# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-22 11:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../abqpy/docs/source/user.rst:63
#: ../../abqpy/docs/source/user/about.rst:17
#: ../../abqpy/docs/source/user/about/examples.rst:8
#: ../../abqpy/docs/source/user/environment.rst:7
#: ../../abqpy/docs/source/user/examples.rst:26
#: ../../abqpy/docs/source/user/output.rst:11
#: ../../abqpy/docs/source/user/output/cpp.rst:7
#: ../../abqpy/docs/source/user/output/python.rst:7
#: ../../abqpy/docs/source/user/python.rst:7
#: ../../abqpy/docs/source/user/python/introduction.rst:9
#: ../../abqpy/docs/source/user/python/python-abaqus.rst:11
#: ../../abqpy/docs/source/user/python/use-scripts.rst:7
msgid "Contents"
msgstr ""

#: ../../abqpy/docs/source/user.rst:3
msgid "User's Guide"
msgstr ""

#: ../../abqpy/docs/source/user.rst:5
msgid "The Abaqus Scripting User's Guide takes you through the process of understanding the Python programming language and the Abaqus Scripting Interface so that you can write your own programs. It also describes how you use the Abaqus Scripting Interface and the C++ application programming interface (API) to access an Abaqus output database."
msgstr ""

#: ../../abqpy/docs/source/user.rst:7
msgid "This guide is a part of the Abaqus® documentation collection, which describes all the capabilities of the Abaqus finite element analysis technology used in SIMULIA® applications."
msgstr ""

#: ../../abqpy/docs/source/user.rst:9
msgid "The guide consists of the following sections:"
msgstr ""

#: ../../abqpy/docs/source/user.rst:11
msgid ":doc:`/user/about`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:13
msgid ":doc:`/user/about/interface`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:15
msgid "This section provides an overview of the Abaqus Scripting Interface and describes how Abaqus/CAE executes scripts."
msgstr ""

#: ../../abqpy/docs/source/user.rst:17
msgid ":doc:`/user/about/examples`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:19
msgid "Two simple examples are provided to introduce you to programming with the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user.rst:21
msgid ":doc:`/user/about/examples/create-part`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:22
msgid ":doc:`/user/about/examples/read-output`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:24
msgid ":doc:`/user/python`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:26
msgid ":doc:`/user/python/introduction`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:28
msgid "This section is intended as a basic introduction to the Python programming language and is not an exhaustive description of the language. There are several books on the market that describe Python, and these books are listed as references. Additional resources, such as Python-related sites, are also listed."
msgstr ""

#: ../../abqpy/docs/source/user.rst:30
msgid ":doc:`/user/python/python-abaqus`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:32
msgid "This section describes the Abaqus Scripting Interface in more detail. The documentation style used in the command reference is explained, and important Abaqus Scripting Interface concepts such as data types and error handling are introduced."
msgstr ""

#: ../../abqpy/docs/source/user.rst:34
msgid ":doc:`/user/python/use-scripts`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:36
msgid "This section describes how you use the Abaqus Scripting Interface to control Abaqus/CAE models and analysis jobs. The Abaqus object model is introduced, along with techniques for specifying a region and reading messages from an analysis product (Abaqus/Standard or Abaqus/Explicit). You can skip this section of the guide if you are not working with Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user.rst:38
msgid ":doc:`/user/environment`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:40
msgid ":doc:`/user/examples`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:42
msgid "This section provides a set of example scripts that lead you through the cantilever beam tutorial found in `Creating and Analyzing a Simple Model in Abaqus/CAE <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEGSARefMap/simagsa-m-Caebeam-sb.htm?contextscope=all#simagsa-m-Caebeam-sb>`_. The following section is a basic tutorial for the experienced Abaqus user. It leads you through the Abaqus/CAE modeling process by visiting each of the modules and showing you the basic steps to create and analyze a simple model.\"). Additional examples are provided that read from an output database, display a contour plot, and print a contour plot from each step of the analysis. The final example illustrates how you can read from a model database created by Abaqus/CAE, parameterize the model, submit a set of analysis jobs, and generate results from the resulting output databases."
msgstr ""

#: ../../abqpy/docs/source/user.rst:44
msgid ":doc:`/user/output`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:46
msgid ":doc:`/user/output/python`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:48
msgid "When you execute an analysis job, Abaqus/Standard and Abaqus/Explicit store the results of the analysis in an output database (.odb file) that can be viewed in the Visualization module of Abaqus/CAE or in Abaqus/Viewer. This section describes how you use the Abaqus Scripting Interface to access the data stored in an output database."
msgstr ""

#: ../../abqpy/docs/source/user.rst:50
msgid "You can do the following with the Abaqus Scripting Interface:"
msgstr ""

#: ../../abqpy/docs/source/user.rst:52
msgid "Read model data describing the geometry of the parts and the assembly; for example, nodal coordinates, element connectivity, and element type and shape."
msgstr ""

#: ../../abqpy/docs/source/user.rst:53
msgid "Read model data describing the sections and materials and where they are used in an assembly."
msgstr ""

#: ../../abqpy/docs/source/user.rst:54
msgid "Read field output data from selected steps, frames, and regions."
msgstr ""

#: ../../abqpy/docs/source/user.rst:55
msgid "Read history output data."
msgstr ""

#: ../../abqpy/docs/source/user.rst:56
msgid "Operate on field output and history output data."
msgstr ""

#: ../../abqpy/docs/source/user.rst:57
msgid "Write model data, field output data, and history data to an existing output database or to a new output database."
msgstr ""

#: ../../abqpy/docs/source/user.rst:59
msgid ":doc:`/user/output/cpp`"
msgstr ""

#: ../../abqpy/docs/source/user.rst:61
msgid "This section describes how you use the C++ language to access an application programming interface (API) to the data stored in an output database. The functionality of the C++ API is identical to the Abaqus Scripting Interface API; however, the interactive nature of the Abaqus Scripting Interface and its integration with Abaqus/CAE makes it easier to use and program. The C++ interface is aimed at experienced C++ programmers who want to bypass the Abaqus Scripting Interface for performance considerations. The C++ API offers faster access to the output database, although this is a consideration only if you need to access large amounts of data."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:3
msgid "About the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:5
msgid "The Abaqus Scripting Interface is an application programming interface (API) to the models and data used by Abaqus. The Abaqus Scripting Interface is an extension of the Python object-oriented programming language; Abaqus Scripting Interface scripts are Python scripts. You can use the Abaqus Scripting Interface to do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:7
msgid "Create and modify the components of an Abaqus model, such as parts, materials, loads, and steps."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:8
msgid "Create, modify, and submit Abaqus analysis jobs."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:9
msgid "Read from and write to an Abaqus output database."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:10
msgid "View the results of an analysis."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:13
msgid "You use the Abaqus Scripting Interface to access the functionality of Abaqus/CAE from scripts (or programs). (The Visualization module of Abaqus/CAE is also licensed separately as Abaqus/Viewer; therefore, the Abaqus Scripting Interface can also be used to access the functionality of Abaqus/Viewer.) Because the Abaqus Scripting Interface is a customized extension of standard Python, further extension of Abaqus base types to create user-defined classes is not allowed."
msgstr ""

#: ../../abqpy/docs/source/user/about.rst:15
msgid "This section provides an introduction to the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples.rst:3
msgid "Simple examples"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples.rst:5
msgid "Programming with the Abaqus Scripting Interface is straightforward and logical. This section includes two simple Abaqus Scripting Interface scripts to illustrate how easy it is to write your own programs. You are not expected to understand every line of the examples; the terminology and the syntax will become clearer as you read the detailed explanations in the following chapters. This section also includes a description of some of the principles behind programming with Python and the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:3
msgid "Creating a part"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:5
msgid "This section includes an example that shows how you can use an Abaqus/CAE script to replicate the functionality of Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:8
#: ../../abqpy/docs/source/user/about/examples/read-output.rst:8
msgid "The example script"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:10
msgid "This example shows how you can use an Abaqus/CAE script to replicate the functionality of Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:12
#: ../../abqpy/docs/source/user/about/examples/read-output.rst:12
#: ../../abqpy/docs/source/user/examples/plot.rst:27
#: ../../abqpy/docs/source/user/examples/plot.rst:102
msgid "The script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:14
msgid "Creates a new model in the model database."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:15
msgid "Creates a two-dimensional sketch."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:16
msgid "Creates a three-dimensional, deformable part."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:17
msgid "Extrudes the two-dimensional sketch to create the first geometric feature of the part."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:18
msgid "Creates a new viewport."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:19
msgid "Displays a shaded image of the new part in the new viewport."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:22
msgid "The new viewport and the shaded part are shown in :numref:`cmd_int_aexample_nls`."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:29
msgid "The example creates a new viewport and a part."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:32
msgid "The example scripts from this guide can be copied to the user's working directory by using the Abaqus fetch utility:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:38
msgid "where scriptName.py is the name of the script (see `Fetching sample input files <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all?>`_). Use the following command to retrieve the script for this example:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:47
msgid "Abaqus does not install the sample scripts by default during the installation procedure. As a result, if the Abaqus fetch utility fails to find the sample script, the script may be missing from your Abaqus installation. You must rerun the installation procedure and request Abaqus sample problems from the list of items to install."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:49
msgid "To run the program, do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:51
msgid "Start Abaqus/CAE by typing abaqus cae."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:52
msgid "From the startup screen, select Run Script."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:53
msgid "From the Run Script dialog box that appears, select modelAExample.py."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:54
msgid "Click OK to run the script."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:59
msgid "If Abaqus/CAE is already running, you can run the script by selecting from the main menu bar."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:61
#: ../../abqpy/docs/source/user/about/examples/read-output.rst:42
msgid "The example follows:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:110
#: ../../abqpy/docs/source/user/about/examples/read-output.rst:105
msgid "How does the script work?"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:112
#: ../../abqpy/docs/source/user/about/examples/read-output.rst:107
msgid "This section explains each portion of the example script."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:118
msgid "This statement makes the basic Abaqus objects accessible to the script. It also provides access to a default model database using the variable named mdb. The statement, `from abaqusConstants import *`, makes the Symbolic Constants defined by the Abaqus Scripting Interface available to the script."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:125
msgid "These statements provide access to the objects related to sketches and parts. sketch and part are called Python modules."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:127
msgid "The next statement in the script is shown in :numref:`cmd-righttoleft-nls`. You can read this statement from right to left as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:129
msgid "Create a new model named Model A."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:130
msgid "Store the new model in the model database mdb."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:131
msgid "Assign the new model to a variable called myModel."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:139
msgid "Creating a new model."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:146
msgid "This statement creates a new sketch object named Sketch A in myModel. The variable mySketch is assigned to the new sketch. The sketch will be placed on a sheet 200 units square. Note the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:148
msgid "A command that creates something (an \"object\" in object-oriented programming terms) is called a constructor and starts with an uppercase character. You have seen the Model and Sketch commands that create Model objects and Sketch objects, respectively."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:150
msgid "The command uses the variable myModel that we created in the previous statement. Using variables with meaningful names in a script makes the script easier to read and understand."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:162
msgid "These two statements define the X- and Y-coordinates of the vertices that form the inner and outer profile of the letter A. The variable xyCoordsInner refers to the vertices of the inner profile, and the variable xyCoordsOuter refers to the vertices of the outer profile."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:170
msgid "This loop creates the inner profile of the letter A in mySketch. Four lines are created using the X- and Y-coordinates of the vertices in xyCoordsInner to define the beginning point and the end point of each line. Note the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:172
msgid "Python uses only indentation to signify the start and the end of a loop. Python does not use the brackets {} of C and C++."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:173
msgid "The `len()` function returns the number of coordinate pairs in xyCoordsInner—five in our example."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:174
msgid "The `range()` function returns a sequence of integers. In Python, as in C and C++, the index of an array starts at zero. In our example range(4) returns 0,1,2,3. For each iteration of the loop in the example the variable i is assigned to the next value in the sequence of integers."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:177
msgid "Similarly, a second loop creates the outer profile of the A character."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:184
msgid "This statement creates a three-dimensional, deformable part named Part A in myModel. The new part is assigned to the variable myPart."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:190
msgid "This statement creates a base solid extrude feature in myPart by extruding mySketch through a depth of 20.0."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:197
msgid "This statement creates a new viewport named Viewport for Model A in session. The new viewport is assigned to the variable myViewport. The origin of the viewport is at (20, 20), and it has a width of 150 and a height of 100."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:203
msgid "This statement tells Abaqus to display the new part, myPart, in the new viewport, myViewport."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/create-part.rst:209
msgid "This statement sets the render style of the part display options in myViewport to shaded. As a result, myPart appears in the shaded render style."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:3
#: ../../abqpy/docs/source/user/output/cpp/read.rst:3
#: ../../abqpy/docs/source/user/output/python/read.rst:3
msgid "Reading from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:5
msgid "This section includes an example that shows how you can use the Abaqus Scripting Interface to read an output database, manipulate the data, and display the results using the Visualization module in Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:10
msgid "This example shows how you can use the Abaqus Scripting Interface to read an output database, manipulate the data, and display the results using the Visualization module in Abaqus/CAE. The Abaqus Scripting Interface allows you to display the data even though you have not written it back to an output database."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:14
msgid "Opens the tutorial output database."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:15
msgid "Creates variables that refer to the first and second steps in the output database."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:16
msgid "Creates variables that refer to the last frame of the first and second steps."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:17
msgid "Creates variables that refer to the displacement field output in the last frame of the first and second steps."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:18
msgid "Creates variables that refer to the stress field output in the last frame of the first and second steps."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:19
msgid "Subtracts the displacement field output from the two steps and puts the result in a variable called deltaDisplacement."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:20
msgid "Subtracts the stress field output from the two steps and puts the result in a variable called deltaStress."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:21
msgid "Selects deltaDisplacement as the default deformed variable."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:22
msgid "Selects the von Mises invariant of deltaStress as the default field output variable."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:23
msgid "Plots a contour plot of the result."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:25
msgid "The resulting contour plot is shown in :numref:`cmd-super`."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:32
msgid "The resulting contour plot."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:35
msgid "Use the following commands to retrieve the script and the output database that is read by the script:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:114
msgid "These statements make the basic Abaqus objects accessible to the script as well as all the Symbolic Constants defined in the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:120
msgid "This statement provides access to the commands that replicate the functionality of the Visualization module in Abaqus/CAE (Abaqus/Viewer)."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:126
msgid "This statement creates a new viewport named Superposition example in the session. The new viewport is assigned to the variable myViewport. The origin and the size of the viewport assume the default values."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:132
msgid "This statement creates a path to the tutorial output database."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:138
msgid "This statement uses the path variable odbPath to open the output database and to assign it to the variable myOdb."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:144
msgid "This statement displays the default plot of the output database in the viewport."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:150
msgid "These statements assign the first and second steps in the output database to the variables firstStep and secondStep."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:157
msgid "These statements assign the last frame of the first and second steps to the variables frame1 and frame2. In Python an index of 0 refers to the first item in a sequence. An index of −1 refers to the last item in a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:164
msgid "These statements assign the displacement field output in the last frame of the first and second steps to the variables displacement1 and displacement2."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:171
msgid "Similarly, these statements assign the stress field output in the last frame of the first and second steps to the variables stress1 and stress2."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:177
msgid "This statement subtracts the displacement field output from the last frame of the two steps and puts the resulting field output into a new variable deltaDisplacement."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:183
msgid "Similarly, this statement subtracts the stress field output and puts the result in the variable deltaStress."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:189
msgid "This statement uses deltaDisplacement, the displacement field output variable that we created earlier, to set the deformed variable. This is the variable that Abaqus will use to display the shape of the deformed model."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:197
msgid "This statement uses deltaStress, our stress field output variable, to set the primary variable. This is the variable that Abaqus will display in a contour or symbol plot."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/read-output.rst:203
msgid "The final statement sets the plot state to display a contour plot on the deformed model shape."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:3
msgid "Summary"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:5
msgid "The examples illustrate how a script can operate on a model in a model database or on the data stored in an output database. The details of the commands in the examples are described in later sections; however, you should note the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:7
msgid "You can run a script from the Abaqus/CAE startup screen when you start a session. After a session has started, you can run a script from the FileRun Script menu or from the command line interface."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:9
msgid "A script is a sequence of commands stored in ASCII format and can be edited with a standard text editor."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:11
msgid "A set of example scripts are provided with Abaqus. Use the abaqus fetch command to retrieve a script and any associated files."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:13
msgid "You must use the import statement to make the required set of Abaqus Scripting Interface commands available. For example, the statement import part provides the commands that create and operate on parts."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:15
msgid "A command that creates something (an \"object\" in object-oriented programming terms) is called a constructor and starts with an uppercase character. For example, the following statement uses the Model constructor to create a model object."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:21
msgid "The model object created is"
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:27
msgid "You can use a variable to refer to an object. Variables make your scripts easier to read and understand. myModel refers to a model object in the previous example."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:29
msgid "A Python script can include a loop. The start and end of a loop is controlled by indentation in the script."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:31
msgid "Python includes a set of built-in functions. For example, the len() function returns the length of a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/about/examples/summary.rst:33
msgid "You can use commands to replicate any operation that can be performed interactively when you are working with Abaqus/CAE; for example, creating a viewport, displaying a contour plot, and setting the step and the frame to display."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:3
msgid "How does the Abaqus Scripting Interface interact with Abaqus/CAE?"
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:5
msgid ":numref:`acl-all-schematic-nls-1` illustrates how Abaqus Scripting Interface commands interact with the Abaqus/CAE kernel."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:12
msgid "Abaqus Scripting Interface commands and Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:14
#: ../../abqpy/docs/source/user/about/interface.rst:7
msgid "The Abaqus Scripting Interface allows you to bypass the Abaqus/CAE GUI and communicate directly with the kernel. A file containing Abaqus Scripting Interface commands is called a script. You can use scripts to do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:16
#: ../../abqpy/docs/source/user/about/interface.rst:9
msgid "To automate repetitive tasks. For example, you can create a script that executes when a user starts an Abaqus/CAE session. Such a script might be used to generate a library of standard materials. As a result, when the user enters the Property module, these materials will be available. Similarly, the script might be used to create remote queues for running analysis jobs, and these queues will be available in the Job module."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:18
#: ../../abqpy/docs/source/user/about/interface.rst:11
msgid "To perform a parametric study. For example, you can create a script that incrementally modifies the geometry of a part and analyzes the resulting model. The same script can read the resulting output databases, display the results, and generate annotated hard copies from each analysis."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:20
msgid "Create and modify the model databases and models that are created interactively when you work with Abaqus/CAE. The Abaqus Scripting Interface is an application programming interface (API) to your model databases and models. For a discussion of model databases and models, see `What is an Abaqus/CAE model database? <https://help.3ds.com/2021/english/dssimulia_established/SIMACAECAERefMap/simacae-c-dbsconcepts.htm?contextscope=all>`_ and `What is an Abaqus/CAE model? <https://help.3ds.com/2021/english/dssimulia_established/SIMACAECAERefMap/simacae-m-DbsConcWhatismodel-sb.htm?contextscope=all>`_ \"This section describes an Abaqus/CAE model\"."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:22
#: ../../abqpy/docs/source/user/about/interface.rst:15
msgid "Access the data in an output database. For example, you may wish to do your own postprocessing of analysis results. You can write your own data to an output database and use the Visualization module of Abaqus/CAE to view its contents."
msgstr ""

#: ../../abqpy/docs/source/user/about/interact.rst:25
#: ../../abqpy/docs/source/user/about/interface.rst:18
msgid "The Abaqus Scripting Interface is an extension of the popular object-oriented language called Python. Any discussion of the Abaqus Scripting Interface applies equally to Python in general, and the Abaqus Scripting Interface uses the syntax and operators required by Python."
msgstr ""

#: ../../abqpy/docs/source/user/about/interface.rst:3
msgid "Abaqus/CAE and the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/about/interface.rst:5
msgid "When you use the Abaqus/CAE graphical user interface (GUI) to create a model and to visualize the results, commands are issued internally by Abaqus/CAE after every operation. These commands reflect the geometry you created along with the options and settings you selected from each dialog box. The GUI generates commands in an object-oriented programming language called Python. The commands issued by the GUI are sent to the Abaqus/CAE kernel. The kernel interprets the commands and uses the options and settings to create an internal representation of your model. The kernel is the brains behind Abaqus/CAE. The GUI is the interface between the user and the kernel."
msgstr ""

#: ../../abqpy/docs/source/user/about/interface.rst:13
msgid "Create and modify the model databases and models that are created interactively when you work with Abaqus/CAE. The Abaqus Scripting Interface is an application programming interface (API) to your model databases and models. For a discussion of model databases and models, see `What is an Abaqus/CAE model database? <https://help.3ds.com/2021/english/dssimulia_established/SIMACAECAERefMap/simacae-c-dbsconcepts.htm?contextscope=all>`_ and `What is an Abaqus/CAE model? <https://help.3ds.com/2021/english/dssimulia_established/SIMACAECAERefMap/simacae-m-DbsConcWhatismodel-sb.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/environment.rst:3
msgid "The Abaqus Python Development Environment"
msgstr ""

#: ../../abqpy/docs/source/user/environment.rst:5
msgid "This section describes the **Abaqus Python development environment** (PDE). The Abaqus PDE provides a simple interface that you can use to develop—create, edit, test, and debug—Python scripts. The Abaqus PDE is primarily intended for use with Abaqus/CAE user interface (GUI) and kernel scripts, including plug-ins, but you can also use it to work on scripts that function independently from Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:3
msgid "About the Abaqus Python development environment"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:5
msgid "The Abaqus PDE is a separate application that you can access from within Abaqus/CAE or launch independently to work on Python scripts."
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:7
msgid "It is intended primarily for use with scripts that use the Abaqus/CAE graphical user interface (GUI) or kernel commands, including plug-ins, but you can also use it to work on scripts that are unrelated to Abaqus. The Abaqus PDE also enables you to set breakpoints to pause script execution at a particular line in any Python script, including an Abaqus plug-in."
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:9
msgid ":numref:`cmd-pde-nls` shows a `.guiLog` file in the Abaqus PDE. The script creates an extruded solid rectangular part named box1 and was recorded by logging the actions to complete the task in the Abaqus/CAE user interface."
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:16
msgid "The Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:18
msgid "The PDE controls allow you to complete the following tasks:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:20
msgid "Open `.guiLog`, `.py`, and other Python scripts"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:21
msgid "Designate an open file or open another file as the main file for testing"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:22
msgid "Open recently used files, including modules called by the main file"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:23
msgid "Edit scripts"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:24
msgid "Reload modules after editing a plug-in"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:25
msgid "Record `.guiLog` files from Abaqus/CAE"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:26
msgid "Run scripts that use the Abaqus/CAE user interface, the Abaqus scripting commands, or general Python commands"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:27
msgid "Add (or ignore) breakpoints in a script"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:28
msgid "Add a breakpoint in any Python code executed in Abaqus/CAE, such as plug-ins"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:29
msgid "Add a delay between executing steps"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:30
msgid "Step through scripts (trace the execution), including plug-in modules and custom startup modules"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:31
msgid "Change options for recording `.guiLog` scripts and animating (highlighting) traced files"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:33
msgid "The following sections contain detailed information about each of the functions in the PDE:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:35
msgid ":doc:`pde-basics`"
msgstr ""

#: ../../abqpy/docs/source/user/environment/about.rst:36
msgid ":doc:`use-pde`"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:3
msgid "Abaqus PDE basics"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:5
msgid "The following sections describe the basic functions of the PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:8
msgid "Starting the Abaqus Python development environment"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:10
msgid "You can choose from several methods to start the Abaqus Python development environment. If you plan to work on scripts that use the Abaqus/CAE GUI, you should start the Abaqus PDE from within an Abaqus/CAE session or start it from the command prompt when you start Abaqus/CAE. These startup methods link the Abaqus PDE to the corresponding Abaqus/CAE session. Alternatively, you can start the Abaqus PDE independently to save system memory or avoid using an Abaqus license."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:12
msgid "Use one of the following methods to start the Abaqus PDE. The first two methods start the Abaqus PDE with a link to an Abaqus/CAE session. The last method starts the Abaqus PDE independently from Abaqus/CAE:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:14
msgid "In Abaqus/CAE, select File -> Abaqus PDE from the main menu bar."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:16
#: ../../abqpy/docs/source/user/environment/pde-basics.rst:28
msgid "From a system command prompt, enter"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:22
msgid "where *abaqus* is the command used to start Abaqus."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:24
#: ../../abqpy/docs/source/user/environment/pde-basics.rst:51
#: ../../abqpy/docs/source/user/environment/use-pde.rst:135
msgid "Note:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:26
msgid "Using this method starts Abaqus/CAE without any local user preference settings. Ignoring user preferences allows you to record and run .guiLog tests using the consistent default startup settings."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:34
msgid "where *abaqus* is the command used to start Abaqus, and *filenames* are the names, including the directory paths, of scripts to be opened at startup."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:36
msgid "The `-script` option allows you to enter the name, including the directory path, of a main file to be opened at startup. The Abaqus PDE will create a new blank script if the named file does not exist in the specified directory. If the directory does not exist, the Abaqus PDE generates an error message."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:40
msgid "File names and paths specified without the `-script` option are opened for editing—not as the main file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:42
msgid "The -pde option is used to specify options for use with Abaqus/CAE if you run a script in the Abaqus PDE that requires the Abaqus/CAE kernel or user interface. You can also add command line options for Abaqus/CAE using the Settings menu. For more information, see `Selecting the settings for use with a file <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdesettings.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:44
msgid "The sections that follow describe how to use the menus and tools within the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:47
msgid "Managing files in the Abaqus PDE"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:49
msgid "You can use the File menu and tools to manage files in the Abaqus PDE. You can work with multiple scripts, but you can test only one script at a time. The file to be tested is called the Main File. The path and file name of the main file are displayed near the upper left corner of the Abaqus PDE window. You can open the main file by using the Select Main File or Recent Main Files items in the File menu. You can also create a new main file or select an open file to be the main file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:53
msgid "When the Set Last Main File on Startup setting is toggled on, the Abaqus PDE automatically reopens the main file that was open when you closed your last session."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:55
msgid "The default file extensions for use with the Abaqus PDE are .py and .guiLog. A .py file typically designates a standard Python or Abaqus Scripting Interface script, and a .guiLog file is a specialized Python script that records actions in the Abaqus/CAE GUI."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:57
msgid "As you play a main file script, the Abaqus PDE automatically opens any files that contain functions called by the script, if the files are available in the current path (sys.path). These files are added to the recently used files list in the File menu. The Abaqus PDE also saves a list of recently used files and other files (dependent files) called when you run a main file. This list is saved in the current directory as abaqus_pde.deps."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:59
msgid ":numref:`cmd-pde-filemenu-nls` shows the items in the Abaqus PDE File menu."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:66
msgid "The File menu"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:68
msgid "The following options are available from the File menu:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:70
msgid "**New**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:72
msgid "Create a new file. The Abaqus PDE creates a new main file and displays it in the main window. The file is created using the default naming convention `_abaqus*#*_.guiLog`, where # starts at 1 and is incremented as you create more files in the current directory. You can also click the New guiLog  icon to create a new file.Abaqus automatically designates the new script as the main file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:74
msgid "**Open**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:76
msgid "Open a script. You can also click the Open file  icon to open a script.If you have not yet opened or created another script, Abaqus automatically makes the first opened file the main file for testing. Otherwise, the file opened becomes the current file viewed in the main window, but it is not the main file used for testing.**Tip:** You can drag and drop script files from the desktop or from Windows Explorer into the Abaqus PDE for editing.You can navigate to the file you want to open by entering its full path, or you can specify a path using environment variables."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:78
msgid "**Select Main File**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:80
msgid "Open a script as the main file for testing. You can also click the Open main file  icon to open a script as the main file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:82
msgid "**Make Current Main**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:84
msgid "Designate the current script in the main window as the main file for testing."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:86
msgid "**Save**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:88
msgid "Save changes to the current file. You can also click Save  to save the current file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:90
msgid "**Save As**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:92
msgid "Save the current file with a new name."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:94
msgid "**Reload Modules**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:96
msgid "Reload user interface modules to capture any changes that you made since they were first loaded. You can also click Reload Modules  to reload the user interface modules. The Abaqus PDE reloads user interface modules in the Abaqus/CAE GUI and Abaqus/CAE kernel processes unless the current setting for the Run Script In option is local, in which case any changed modules are reloaded in the local PDE process."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:98
msgid "**Close File**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:100
msgid "Close the current file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:102
msgid "**Filename.py**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:104
msgid "The name and file extension of the current main file, if one is selected.Clicking here shows a list of dependent files that were found when the main file was run. If the current main file has not been run in the Abaqus PDE, this list will be empty."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:106
msgid "**Recent Main Files**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:108
msgid "A list of the files that you have opened as the main file for testing. Recent Files from previous sessions will be read from the abaqus_pde.deps file, if it exists in the current directory."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:110
msgid "**Recent Traced Files**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:112
msgid "A list of files that were opened by the Abaqus PDE to trace a function called by one of the main files that you tested. Recent Files from previous sessions will be read from the abaqus_pde.deps file, if it exists in the current directory."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:114
msgid "**Recent Files**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:116
msgid "A list of all files that you have opened, regardless of whether you opened them to view and edit them or opened them as the main file for testing. Recent Files from previous sessions will be read from the `abaqus_pde.deps` file, if it exists in the current directory."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:118
msgid "The recently used files lists are stored in the `abaqus_pde.deps` file in the directory from which you start the current Abaqus PDE session. If you start an Abaqus PDE session from another location, the lists contain only the files that you used the last time you opened a session in that directory. If you have not previously used the Abaqus PDE in the current directory, a new set of recently used files is recorded as you work."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:121
msgid "Editing files in the Abaqus PDE"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:123
msgid "You can use the **Edit** menu to edit scripts in the Abaqus PDE. The **Edit** menu contains common editing tools, including **Undo**, **Redo**, **Copy**, **Cut**, **Paste**, **Find**, and **Replace**. It also contains the following tools for editing scripts:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:125
msgid "**Indent Region >**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:126
msgid "**Unindent Region <**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:127
msgid "**Comment Region ##**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:128
msgid "**Uncomment Region**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:130
msgid "To use these tools, highlight one or more lines of code in the main window and select the desired option from the **Edit** menu. The **Edit** menu also contains a keyboard shortcut for each of the editing tools."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:133
msgid "Selecting the settings for use with a file"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:135
msgid "Use the **Settings** menu and tools to change some of the options in the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:137
msgid ":numref:`cmd-pde-settingsmenu-nls` shows the items and default selections in the Abaqus PDE **Settings** menu."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:144
msgid "The Settings menu."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:146
msgid "The following items are available from the **Settings** menu:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:148
msgid "**Recording Options**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:150
msgid "Set the display of the triad, state block, and title block and whether the legend background matches the viewport. These options affect the commands recorded for an output database."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:152
msgid "**Allow Editing of Files**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:154
msgid "Toggle between edit and read-only modes for all files. Editing is allowed by default."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:156
msgid "**Show File Line Numbers**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:158
msgid "Display line numbers for any open files on the left side of the main window. Line numbers are displayed by default."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:160
msgid "**Ignore Breakpoints During Play**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:162
msgid "Run the main file continuously, skipping any breakpoints, until it completes or stops for an error. Breaks are not skipped by default. You can also skip breakpoints by toggling on Ignore breaks, located in the toolbar above the main window."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:164
msgid "**Allow Pause in Play**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:166
msgid "Pause a running file by clicking the **Pause** button. Pause is allowed by default. Allowing pause also causes the main file to run in the debugger. (For more information, see `Using the debugger <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdedebug.htm?contextscope=all>`_.)"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:168
msgid "**Set Last Main File on Startup**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:170
msgid "Upon startup, automatically reopen the main file that was open when you last closed the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:172
msgid "**Run Script In**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:174
msgid "Select whether the main file is run in the Abaqus/CAE GUI, the Abaqus/CAE kernel, or run locally. By default, `.guiLog` files are run in the GUI, and `.py` and other file types are run in the kernel. You can also set this option using the GUI, Kernel, and Local radio buttons located above the main window.If the Abaqus PDE was opened without Abaqus/CAE and you run a script with the **GUI** or **Kernel** process, the Abaqus PDE will start Abaqus/CAE to run the script."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:176
msgid "**.py Default to Kernel**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:178
msgid "Set `.py` files to run in the Abaqus/CAE kernel. This option is selected by default. If `.py` Default to Kernel is not selected, `.py` files are run locally. Select the **GUI** or **Local** radio button to run a Python script in one of these modes without changing the default behavior."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:180
msgid "**Line Animation**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:182
msgid "Highlight the line currently being executed in the main window. The following animation settings are available:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:184
msgid "No animation."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:185
msgid "Animate main file (default). Highlights only the statements in the main function or method. Functions called from the main script are not highlighted."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:186
msgid "Animate main file functions. Highlights the main script statements and the statements in functions that are defined within the main file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:187
msgid "Animate all files. Highlights the main script statements and statements within all functions for which the source code is available."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:189
msgid "**Python Code**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:191
msgid "Control the appearance and editing behavior of Python scripts in the Abaqus PDE main window."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:193
msgid "**Syntax Coloring**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:195
msgid "Display the code using various font colors according to its purpose. This option is selected by default.You can view or change the color selections with the Choose Syntax Colors option."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:197
msgid "**Python Editing**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:199
msgid "Edit scripts with Python formatting, such as indentation, included automatically. This option is selected by default."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:201
msgid "**Choose Syntax Colors**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:203
msgid "Opens the **PDE Syntax Colors** dialog box in which you can view or change the color selections for editing scripts. Click **Reset Defaults** to restore the default colors."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:205
msgid "**CAE Command Line Extra Args...**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:207
msgid "Enter extra arguments for use when Abaqus/CAE is launched from the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:209
msgid "**Auto Trace in CAE**"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:211
msgid "Automatically trace code in GUI and kernel processes of Abaqus/CAE. The script will be traced until it returns from the frame in which the trace started. The trace will therefore stop when the function returns or the end of the script is reached. This option is selected by default."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:214
msgid "The message area and GUI command line interface"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:216
msgid "The message area and the GUI command line interface share the space at the bottom of the Abaqus PDE, similar to the kernel command line interface in Abaqus/CAE. (For more information, see `Components of the main window <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECAERefMap/simacae-c-topmainabqwindow.htm?contextscope=all>`_.) The message area is displayed by default. It displays messages and warnings as you run scripts in the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:218
msgid "The GUI command line interface is hidden by default, but it uses the same space occupied by the message area. Click |ico_guiCli| in the bottom left corner of the Abaqus PDE main window to switch from the message area to the GUI command line interface. The GUI and kernel processes in Abaqus/CAE run separately, each using its own Python interpreter. You can use the GUI command line interface to type Python commands and to evaluate mathematical expressions using the Python interpreter that is built into the Abaqus/CAE GUI. You can use the kernel command line interface in Abaqus/CAE for similar tasks. Each command line interface includes primary (>>>) and secondary (...) prompts to indicate when you must indent commands to comply with Python syntax. After you use the GUI command line interface, click |afxI_messageArea| to display the message area."
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:220
msgid "ico_guiCli"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:223
msgid "afxI_messageArea"
msgstr ""

#: ../../abqpy/docs/source/user/environment/pde-basics.rst:226
msgid "If new messages are generated in the message area while the GUI command line interface is active, the background around the message area icon turns red. The background reverts to its normal color when you display the message area."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:3
msgid "Using the Abaqus PDE"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:5
msgid "The following sections contain detailed information that you can use to create and work with files in the Abaqus PDE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:8
msgid "Creating .guiLog files"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:10
msgid "The Abaqus PDE is designed to work any type of Python files, including `.guiLog` files. A `.guiLog` is a Python script that records actions in the Abaqus/CAE GUI. When you create a `.guiLog`, it records every mouse click, dialog box entry, and menu, tool, or viewport selection."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:12
msgid "To record actions from Abaqus/CAE, the Abaqus PDE session must be associated with a Abaqus/CAE session. The Abaqus PDE and Abaqus/CAE sessions are associated if you started them together from a command prompt or if you started the Abaqus PDE by selecting File -> Abaqus PDE in Abaqus/CAE. For more information on starting the Abaqus PDE, see `Starting the Abaqus Python development environment <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdestart.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:14
msgid "From the main menu bar in the Abaqus PDE, select FileNew to create a new empty file in the main window."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:16
msgid "**Tip:** You can also click the New guiLog icon  to create a new `.guiLog` file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:18
msgid "Click the Start Recording icon to begin recording actions from Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:20
msgid "Abaqus writes the following two lines to begin the file:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:27
msgid "Complete all the desired actions in the Abaqus/CAE session to record them in the .guiLog file."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:31
msgid "When you record .guiLog files, do not use mouse button 2 to close the dialog box for a procedure. Instead, use the buttons in the dialog box to close it. Using mouse button 2 adds multiple dialog box closing commands to the recorded .guiLog file. Since only one command is needed to close the dialog, the extra commands will result in an error when the recorded script is played."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:33
msgid "Click the Stop Recording icon  to stop recording."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:35
msgid "Use standard text editing techniques to edit the file in the main window. Additional editing tools are available in the Edit menu (for more information, see `Editing files in the Abaqus PDE <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdeedit.htm?contextscope=all>`_.)"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:37
msgid "To add more recorded commands to the file, position the cursor at the desired location or click End of Main File to position the cursor at the end of the file, then repeat Step 2 through Step 4."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:39
msgid "Select FileSave to save the file or FileSave As to save the file with a new name; new files automatically use Save As."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:42
msgid "Running a script"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:44
msgid "The Abaqus PDE runs scripts using one of three processes - GUI, kernel, or local. By default, `.guiLog` files are run in the Abaqus/CAE GUI process. If the Abaqus PDE was opened from within Abaqus/CAE, `.py` files and all other file types are run in the Abaqus/CAE kernel process by default. If the Abaqus PDE was opened without Abaqus/CAE, `.py` files are run in the local process by default. The local process runs the script without Abaqus/CAE, using Python in the local (PDE) process. You can change the process by selecting **Settings -> Run Script** In and choosing the desired process, or by clicking the **GUI**, **Kernel**, or **Local** radio buttons located above the main window. If the Abaqus PDE was opened without Abaqus/CAE and you run a script with the **GUI** or **Kernel** process, Abaqus PDE will start Abaqus/CAE to run the script."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:46
msgid "To run the main file, click **Play** above the main window. The Abaqus PDE runs the main file until it completes, encounters an error, or reaches a breakpoint. As the script runs, the current line is highlighted according to the **Line Animation** settings."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:48
msgid "Use the other buttons - **Next Line**, **Stop**, **Go to Start**, and **Go to End** - to execute the main file one line at a time, stop running the file, or reposition the cursor at the beginning or end of the file, respectively."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:50
msgid "As you run a script, you might want to specify a breakpoint to pause script execution at a particular line. For more information about breakpoints, see `Using breakpoints <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdebreakpoint.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:53
msgid "Using the debugger"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:55
msgid "You can use the debugger in the Abaqus PDE to troubleshoot your scripts."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:57
msgid "To open the debugger, select **Window -> Debugger** or click **Start debugger**. If you have a script paused in the main window, the debugger opens at the current position of the test. If you do not have a paused script, the debugger automatically begins running the main file and positions the cursor at the start of the script."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:59
msgid "The debugger consists of a call stack area, action buttons, and the debugger command line interface (CLI) window, as shown in :numref:`cmd-pde-debugger-nls` The debugger is positioned between the Abaqus PDE main window and the message area."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:66
msgid "The Abaqus PDE debugger."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:68
msgid "The debugger uses a custom Python module named atxPdb, based on the Python pdb module. You can enter Pdb commands in the debugger CLI; you can also enter any Python statements in the debugger CLI. Python statements are executed in the same process—GUI, kernel, or local—that is running the current script (for more information, see :doc:`/user/environment/use-pde:running a script`)."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:72
msgid "If you enter a command in the debugger CLI and it does not seem to work, it may be conflicting with a Pdb command."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:74
msgid "The call stack area shows the commands that are currently being executed."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:76
msgid "The debugger contains a tool to watch variables as scripts are executed. To add a variable to the watch list, click mouse button 3 over the variable name in the Abaqus PDE main window and select **Add Watch: variable name** from the menu that appears. The Abaqus PDE adds the variable to the watch list, indicating the namespace that the variable is defined within, the variable name, the type of data the variable can store, the current value, and the file and line where the variable is located. When you execute or step through the script, the variable information is updated as needed. You can also activate the watch list tool after starting the debugger by selecting **Show Watch** from the action buttons below the call stack area or by selecting **Window -> Debug Windows -> Watch List**. Abaqus displays the Watch List area below the debugger or below the main window if the debugger is not open."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:78
msgid "You can also customize the following aspects of variable display in the Watch **List**:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:80
msgid "You can switch a variable's display format between repr and str formats. The `repr()` function returns a string that is better suited to being read by the Python interpreter, while the `str()` function returns a string better suited to printing. For more information about the built-in Python functions `repr()` and `str()`, refer to the official Python website (https://www.python.org)."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:82
msgid "To toggle between these settings, click mouse button 3 on a watch variable row and **select Display repr (not str) value of variable name or Display str (not repr) value of variable name** from the list that appears. If the variable is a local variable and the program is not accessing that section of code, the variable value will be set to “not evaluated.” Variable values are also set to “not evaluated” if the program is not running."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:84
msgid "You can prompt the Abaqus PDE to pause when the program reaches a line in which the value of a selected watch variable has changed. To toggle on the “stop on change” option for a particular watch variable, click mouse button 3 on the variable's line and select **Stop on change to variable name** from the list that appears. When this option is selected, Abaqus PDE stops at the line after the change."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:86
msgid "You can remove any watch variables from the debugger by clicking mouse button 3 on the variable's line and selecting **Delete watch var variable name** from the list that appears."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:89
msgid "Using breakpoints"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:91
msgid "Breakpoints are points where script execution pauses until you select Play or **Next Line** above the main window."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:93
msgid "You can add breakpoints at any line in a script. Breakpoints also allow you to pause plug-ins and custom applications so you can trace their execution."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:95
msgid "To add a breakpoint, position the cursor on the desired line of the script, click mouse button 3, and select **Add Breakpoint**. Use the same process, selecting **Remove Breakpoint**, to remove breakpoints. You can also add and remove breakpoints using the breakpoint tool  located above the main window or the F9 key."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:97
msgid "Breakpoints are indicated by an asterisk to the right of the line number in the Abaqus PDE. If syntax colors are active, the line number, asterisk, and the line of code are colored using the current breakpoint color selection (for more information, see `Selecting the settings for use with a file <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-pdesettings.htm?contextscope=all>`_)."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:99
msgid "You can review breakpoints in all open files by selecting **Window -> Debug Windows -> Breakpoints List**. The **Abaqus PDE Breakpoints** dialog box lists the file path, name, and each line number where a breakpoint is located. You can double-click the paths to position the cursor in the main window at the selected breakpoint."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:102
msgid "Using the Abaqus PDE with plug-ins"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:104
msgid "The functions and tools in the Abaqus PDE work the same way for plug-ins as they do for other scripts. However, since plug-ins are launched within Abaqus/CAE, you cannot load and run them as a main file like you can with other scripts. Instead, you add breakpoints, then run the plug-ins as usual."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:106
msgid "If the plug-in contains both kernel and GUI functions, you must trace them separately. Tracing the kernel and GUI functions separately prevents problems that can occur in Abaqus/CAE as the Abaqus PDE attempts to switch between kernel and GUI modes while the code is running. Separating the functions also provides a logical approach to locating problems in the kernel code versus ones in the user interface."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:108
msgid "After you save the changes to your plug-in, you can trace its execution."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:110
#: ../../abqpy/docs/source/user/environment/use-pde.rst:139
msgid "Open the file that you want to debug."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:112
#: ../../abqpy/docs/source/user/environment/use-pde.rst:141
msgid "Position the cursor where you want to add a breakpoint. Click mouse button 3, and select **Add Breakpoint**. (For more information, see :doc:`/user/environment/use-pde:using breakpoints`.)"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:114
msgid "Start the plug-in from within Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:116
msgid "The plug-in code appears in the Abaqus PDE window, stopped at the breakpoint or at the line immediately following the start trace statement, if you added one."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:118
msgid "Use the Abaqus PDE controls and options described in the previous sections to step through the execution of the plug-in."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:121
msgid "Using the Abaqus PDE with custom applications"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:123
msgid "Custom applications are scripts created to modify or add functionality to Abaqus/CAE. They typically use a combination of the Abaqus Scripting Interface commands and the Abaqus GUI toolkit commands to extend the user interface and the underlying kernel commands. Custom applications are launched concurrent with the start of an Abaqus/CAE session, and they are integrated into the existing functionality."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:125
msgid "If the application contains both kernel and GUI functions, you must trace them separately. Tracing the kernel and GUI functions separately prevents problems that can occur in Abaqus/CAE as the Abaqus PDE attempts to switch between kernel and GUI modes while the code is running. Separating the functions also provides a logical approach to locating problems in the kernel code versus ones in the GUI code."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:127
msgid "Enter the following at a command prompt to start the Abaqus PDE and the custom application:"
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:133
msgid "where *abaqus* is the command you use to start Abaqus and *args* are the arguments required to start the custom application. For example, if you enter `abaqus cae -custom xxx.py` to start Abaqus/CAE and your application, enter `abaqus pde -pde -custom xxx.py`."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:137
msgid "You cannot start the custom application and launch the Abaqus PDE from within Abaqus/CAE since the initial startup processes would already be complete."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:143
msgid "Click **Start CAE** at the top right of the Abaqus PDE to start Abaqus/CAE with the custom startup commands."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:145
msgid "The application code appears in the Abaqus PDE window, stopped at a breakpoint."
msgstr ""

#: ../../abqpy/docs/source/user/environment/use-pde.rst:147
msgid "Use the Abaqus PDE controls and options described in the previous sections to step through the execution of the custom application."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:3
msgid "Putting it all Together: Abaqus Scripting Interface Examples"
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:5
msgid "The section provides examples that illustrate how you can combine Abaqus Scripting Interface commands and Python statements to create your own scripts. You can use the scripts to create Abaqus/CAE models, submit jobs for analysis, and view the results. For examples of scripts that read and write from an output database, see `Example scripts that access data from an output database <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-m-OdbIntroExamplesPyc-sb.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:7
msgid "The Abaqus/CAE example scripts in this section illustrate:"
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:9
msgid "How you can use commands from the Abaqus Scripting Interface to create a simple model, submit it for analysis, and view the results. :doc:`user/examples/cantilever` uses Abaqus Scripting Interface commands to reproduce the cantilever beam tutorial described in `Understanding Abaqus/CAE modules <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEGSARefMap/simagsa-c-caebeammodel.htm?contextscope=all#simagsa-c-caebeammodel>`_."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:10
msgid "How you can use the Abaqus Scripting Interface to control the output from the Visualization module in Abaqus/CAE (Abaqus/Viewer)."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:12
msgid ":doc:`user/examples/plot:opening the tutorial output database` explains how to use **abaqus fetch** to retrieve the Abaqus/CAE tutorial output database."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:13
msgid ":doc:`user/examples/plot:opening an output database and displaying a contour plot` explains how to open the tutorial output database, display a contour plot, and print the resulting viewport to a file."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:14
msgid ":doc:`user/examples/plot:printing a contour plot at the end of each step` explains how to open the tutorial output database, customize the legend, display a contour plot at the end of each step, and print the resulting viewports to a file."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:15
msgid "How you can introduce more complex programming techniques into your Abaqus Scripting Interface scripts. :doc:`user/examples/sensitivity` reproduces the problem found in :doc:`user/examples/sensitivity`. You use Abaqus/CAE to create the model, and you use Abaqus Scripting Interface commands to parameterize an evaluation of the model by changing its geometry and element type. The example investigates the sensitivity of the shell elements in Abaqus to skew distortion when they are used as thin plates."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:16
msgid "How you can use functions available in the caePrefsAccess module to edit the display preferences and GUI settings in the abaqus_2021.gpr file. :doc:`user/examples/settings` describes how to query for and set several default display and GUI behaviors in Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:18
msgid "The example scripts from this guide can be copied to the user's working directory by using the Abaqus **fetch** utility:"
msgstr ""

#: ../../abqpy/docs/source/user/examples.rst:24
msgid "where **scriptName.py** is the name of the script (see `Fetching sample input files <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all>`_)."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:3
msgid "Reproducing the cantilever beam tutorial"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:5
msgid "This section explains how to use the Abaqus Scripting Interface commands to reproduce a tutorial that shows the basic steps to create and analyze a simple model. The tutorial, `Creating and Analyzing a Simple Model in Abaqus/CAE <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEGSARefMap/simagsa-m-Caebeam-sb.htm?contextscope=all#simagsa-m-Caebeam-sb>`_, is available in `Getting Started with Abaqus/CAE <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEGSARefMap/simagsa-c-ov.htm?contextscope=all#simagsa-c-ov>`_."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:8
msgid "About the cantilever beam example"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:10
msgid "The example leads you through the Abaqus/CAE modeling process by visiting each of the modules and shows you the basic steps to create and analyze a simple model. In `Creating and Analyzing a Simple Model in Abaqus/CAE <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEGSARefMap/simagsa-m-Caebeam-sb.htm?contextscope=all#simagsa-m-Caebeam-sb>`_, you create a model of a steel cantilever beam and load its top surface. You then analyze the beam and plot the resulting stresses and displacements. :numref:`gst-beam` illustrates the model that you create and analyze."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:17
msgid "A loaded cantilever beam."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:20
msgid "Running the example"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:22
msgid "Use the following command to retrieve the output database that is read by the scripts:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:28
msgid "To run the script, do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:30
msgid "Start Abaqus/CAE from a directory in which you have write permission by typing `abaqus cae`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:31
msgid "From the startup screen, select **Run Script**."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:32
msgid "From the **Run Script** dialog box that appears, enter the path given above and select the file containing the script."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:33
msgid "Click **OK** to run the script."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:37
msgid "If Abaqus/CAE is already running, you can run the script by selecting **File -> Run Script** from the main menu bar."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:40
msgid "The cantilever beam example script"
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:42
msgid "The first line of the script, `from abaqus import *`, imports the Mdb and Session objects. The current viewport is `session.viewports['Viewport: 1']`, and the current model is `mdb.models['Model-1']`. Both of these objects are available to the script after you import the `abaqus` module. The second line of the script, `from abaqusConstants import *`, imports the Symbolic Constants defined in the Abaqus Scripting Interface. The script then creates a new model that will contain the cantilever beam example and creates a new viewport in which to display the model and the results of the analysis. For a description of the commands used in this section, see the appropriate sections in the :doc:`references`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/cantilever.rst:44
msgid "The script then imports the `Part` module. Most of the sections in this example begin with importing the appropriate module, which illustrates how a script can import a module at any time to extend or augment the object model. However, the Abaqus Scripting Interface has a convention that all the required modules are imported at the start of a script; and that convention is followed in other example scripts in this guide."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:3
msgid "Generating a customized plot"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:5
msgid "The following section provides examples of Abaqus Scripting Interface scripts that open an output database and generate a customized plot. In effect, these scripts reproduce the functionality of the Visualization module in Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:8
msgid "Opening the tutorial output database"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:10
msgid "Each of the following example scripts opens the output database used by the Visualization module tutorial in Getting Started with Abaqus/CAE. Use the following command to retrieve the output database that is read by the scripts:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:17
msgid "Opening an output database and displaying a contour plot"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:19
msgid "The following example of a script containing Abaqus Scripting Interface commands uses the output database used by `Viewing the Output from Your Analysis <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEGSARefMap/simagsa-m-Caevismod-sb.htm?contextscope=all#simagsa-m-Caevismod-sb>`_."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:21
#: ../../abqpy/docs/source/user/examples/plot.rst:96
#: ../../abqpy/docs/source/user/output/python/examples.rst:162
#: ../../abqpy/docs/source/user/output/python/examples.rst:433
#: ../../abqpy/docs/source/user/output/python/examples.rst:515
#: ../../abqpy/docs/source/user/output/python/examples.rst:563
#: ../../abqpy/docs/source/user/output/python/examples.rst:622
#: ../../abqpy/docs/source/user/output/python/examples.rst:689
#: ../../abqpy/docs/source/user/output/python/examples.rst:749
#: ../../abqpy/docs/source/user/output/python/examples.rst:865
msgid "Use the following command to retrieve the example script:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:29
msgid "Creates a viewport, and makes it the current viewport."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:30
msgid "Opens an output database."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:31
msgid "Displays a contour plot."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:32
msgid "Displays the model in the first frame of the third step."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:33
msgid "Sets the number of contour intervals and the contour limits."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:34
msgid "Prints a color image of the viewport to a .png file."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:92
msgid "Printing a contour plot at the end of each step"
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:94
msgid "The following example script demonstrates how to produce and print a contour plot at the last frame of every step within an output database file. The example sets the appropriate contour limits so that all plots can be viewed within a fixed range."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:104
msgid "Defines the contour limits function."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:105
msgid "Determines the final frame of every step within an output database file."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:106
msgid "Produces a contour plot at the final frame of every step."
msgstr ""

#: ../../abqpy/docs/source/user/examples/plot.rst:107
msgid "Prints the contour plot to a file."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:3
msgid "Investigating the skew sensitivity of shell elements"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:5
msgid "In this example you will use Abaqus/CAE to create the model and store the model in a model database. The script opens the model database and performs a parametric study on the model. The example illustrates how you can use a combination of Abaqus/CAE and the Abaqus Scripting Interface to analyze a problem."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:9
msgid "Creating the model to analyze"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:11
msgid "This example uses Abaqus Scripting Interface commands to evaluate the sensitivity of the shell elements in Abaqus to skew distortion when they are used as thin plates. Further details can be found in `Skew sensitivity of shell elements <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEBMKRefMap/simabmk-c-skewshell.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:13
msgid "The problem investigates the effects on the accuracy of the bending moment computed at the center of a shell using:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:15
msgid "different shell formulations and"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:16
msgid "at different angles."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:18
msgid ":numref:`cmd-skew-dim` illustrates the basic geometry of the simply supported skew plate with a uniform distributed load."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:24
msgid "A 4 × 4 quadrilateral mesh of the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:26
msgid "The plate is loaded by a uniform pressure of :math:`1\\times10^{-6}` MPa applied over the entire surface. The edges of the plate are all simply supported. The analysis is performed for five different values of the skew angle, :math:`\\delta`: 90°, 80°, 60°, 40°, and 30°. The analysis is performed for two different quadrilateral elements: S4 and S8R."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:28
msgid "The example is divided into two scripts. The controlling script, `skewExample.py`, imports `skewExampleUtils.py`. Use the **fetch** utility to retrieve the scripts:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:35
msgid "You should use Abaqus/CAE to create your model and to save the resulting model database. You will then use scripting to parameterize your model, submit an analysis job, and operate on the results generated."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:37
msgid "Start Abaqus/CAE, and create a model database from the **Start Session** dialog box. By default, you are operating on a model named `Model-1.` The model should include the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:39
#: ../../abqpy/docs/source/user/output/cpp/write.rst:36
#: ../../abqpy/docs/source/user/output/python/write.rst:38
msgid "**Part**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:41
msgid "Create a three-dimensional planar shell part, and name it `Plate`. Use an approximate size of 5.0. Sketch a square where all sides are 1.0 m long, with the lower-left vertex at (0, 0, 0). Delete all perpendicular and vertical constraints, and apply the following:fixed constraints to the lower-left and lower-right vertices,horizontal constraints to the top and bottom edges (if they are not already defined),parallel constraints to the left and right edges, andan angle dimension to the lower-left vertex (90°)."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:43
msgid "**Material**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:45
msgid "Create a material, and name it Steel. The Young's modulus is 30 MPa, and the Poisson's ratio is 0.3."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:47
msgid "**Section**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:49
msgid "Create a homogeneous shell section that refers to the material called `Steel`. Name the section `Shell`. The plate thickness is 0.01 m. The length/thickness ratio is, thus, 100/1 so that the plate is thin in the sense that transverse shear deformation should not be significant. Assign the section to the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:51
msgid "**Assembly**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:53
msgid "Create the assembly using a single, independent part instance of `Plate`. Abaqus/CAE names the part instance `Plate-1`. Creating an independent part instance means that the mesh is based at the assembly level."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:55
msgid "**Step**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:57
msgid "Create a static step and name it `Step-1`. Enter `Apply pressure` for the step **Description**. Accept the default time period of 1.0 and the default initial increment of 1.0."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:59
msgid "**Output database requests**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:61
msgid "Edit the default output database request for field output and select only **U, Translations and rotations**. Create a second field output request for SF, Section forces and moments, and specify Nodes as the element output position. Both field output requests should be for the whole model after every increment. Delete all requests for history output."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:63
msgid "**Boundary condition**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:65
msgid "Create a displacement boundary condition, and name it `Pinned`. The boundary condition pins the exterior edges of the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:67
msgid "**Load**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:69
msgid "Create a pressure load, and name it `Pressure`. Apply the load to the face of the plate. Accept the default side of the plate and use a magnitude of 1.0. This positive pressure will result in a negative displacement in the 3-direction."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:71
msgid "**Set**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:73
msgid "Partition the plate into quarters by sketching lines between the midpoints of the four edges. Create a set that contains the vertex at the center of the plate, and name the set `CENTER`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:75
msgid "**Mesh**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:77
msgid "Create a 4 × 4 mesh of quadrilateral elements on the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:79
msgid "**Job**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:81
msgid "Create a job, and name it `skew`. The job must refer to the model `Model-1`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:83
msgid "If you want, you can complete the above steps for creating the model using a function in `skewExampleUtils.py`. In the command line interface area of Abaqus/CAE, type the following commands:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:90
msgid "When you execute the function, a new database is created, so you should save your work first."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:92
msgid "Finally, save the database as `skew.cae`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:95
msgid "Changing the skew angle"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:97
#: ../../abqpy/docs/source/user/examples/sensitivity.rst:99
msgid "The parameterized script changes the skew angle of the plate and computes the maximum bending moment at the center for two different element types. The script changes the skew angle by modifying an angular dimension and selecting the vertices to move. You need to add the angular dimension and determine the indices of the dimension to modify and the vertices to move."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:102
msgid "Add the angular dimension"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:104
msgid "Return to the Part module."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:106
msgid "From the main menu bar, select **Feature -> Edit** and select the plate to edit."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:108
msgid "From the **Edit Feature** dialog box, select **Edit Section Sketch**."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:110
msgid "From the Sketcher toolbox, select the dimension tool and dimension the angle at the lower left corner of the plate as shown in :numref:`cmd-skew-dim`"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:117
msgid "Dimension the angle at the lower left corner of the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:120
msgid "Determine the indices of the dimension to modify and the vertices to move"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:122
msgid "From the Sketcher toolbox, select the edit dimension tool."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:123
msgid "Select the lower left angular dimension."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:124
msgid "Enter a dimension of `60`, and click **OK**."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:125
msgid "Exit the Sketcher tools, and exit the Sketcher."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:126
msgid "From the **Edit Feature** dialog box, select **OK**."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:127
msgid "Examine the replay file, `abaqus.rpy`. The last few lines of the replay file will contain the statements that modified the angular dimension. The statement will look similar to the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:133
msgid "The example script, `skewExample.py`, contains a similar statement that modifies the angular dimension of the plate. The index of the angular dimension in your model must be the same as the index in the example script. If the indices are not the same, you must edit the example script and enter the correct indices."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:139
msgid "Save the model database, and name it `skew`. Abaqus/CAE saves the model database in a file called `skew.cae`. The example script opens this model database and parameterizes the model it contains."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:142
msgid "Using a script to perform a parametric study"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:144
msgid "he following shows the contents of the script skewExample.py. The parametric study does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:146
msgid "Opens the model database and creates variables that refer to the part, the assembly, and the part instance stored in `Model-1`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:148
msgid "Creates variables that refer to the four faces and the nine vertices in the instance of the planar shell part."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:150
msgid "Skews the plate by modifying the angular dimension in the sketch of the base feature."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:152
msgid "Defines the logical corners of the four faces, and generates a structured mesh."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:154
msgid "Runs the analysis for a range of angles using two element types for each angle."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:156
msgid "Calculates the maximum moment and displacement at the center of the shell."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:158
msgid "Displays **X - Y** plots in separate viewports of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:160
msgid "Displacement versus skew angle"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:161
msgid "Maximum bending moment versus skew angle"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:162
msgid "Minimum bending moment versus skew angle"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:164
msgid "The theoretical results are also plotted."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:293
msgid "The script imports two functions from `skewExampleUtils`. The functions do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:295
msgid "Retrieve the displacement and calculate the maximum bending moment at the center of the plate."
msgstr ""

#: ../../abqpy/docs/source/user/examples/sensitivity.rst:296
msgid "Display curves of theoretical and computed results in a new viewport."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:3
msgid "Editing display preferences and GUI settings"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:5
msgid "You can use the Abaqus Scripting Interface to edit the abaqus_2021.gpr file, which includes settings that control many default display preferences and GUI settings in the Abaqus/CAE user interface. To enable editing of this file, you must import the caePrefsAccess module. This section describes the structure of the abaqus_2021.gpr file and provides an overview of customizing its settings; for more detailed information about the functions available in the caePrefsAccess module, see :doc:`reference/kernel/cae_display_preferences`."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:8
msgid "Editing the `abaqus_2021.gpr` file is for experienced users only. Do not use the functions in the `caePrefsAccess` module unless you are comfortable with the Abaqus Scripting Interface and understand the structure of the `abaqus_2021.gpr` file. In addition, you should not have Abaqus/CAE running when you make changes to the graphical preferences file."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:10
msgid "You can retrieve the location of your `abaqus_2021.gpr` file using the `getGuiPrefsFileName` function. The file records default settings in two sections: display options reside in the `sessionOptions` section, and GUI settings reside in the `guiPreferences` section. Editing the options in one section does not have any effect on the options in the other section."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:12
msgid "**sessionOptions**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:14
msgid "The session options consist of the settings that you can save using the **File -> Save Display Options** menu option. In Abaqus/CAE you can save these options in the current directory or in your home directory."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:16
msgid "You can display and edit session options using the `openSessionOptions` function."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:35
msgid "The following statement changes the frame rate to 50. You should confirm that the data type you specify matches the type of the existing value."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:42
msgid "You can save the options you change to the original file by issuing the following command:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:48
msgid "**guiPreferences**"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:50
msgid "The GUI preferences control many default behaviors in the Abaqus/CAE graphical interface, including size and location of the main window, size and location of the dialog boxes within Abaqus/CAE, and the number of recent files listed in the **Start Session** dialog box and in the **File** menu."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:52
msgid "Abaqus/CAE saves `guiPreferences` settings to your home directory when you exit the application. A separate `guiPreferences` record is stored in the preferences file for each display you use, so you must specify the **displayName** you want to modify when you open the `guiPreferences` settings. You can obtain a list of the available **displayName** settings by calling the `getDisplayNamesInGuiPreferences` function, and you can edit these settings by using the `openGuiPreferences` function and specifying the **displayName** of the settings that you want to modify."
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:54
msgid "In the following example, the `openGuiPreferences` function is used to examine the **X** - and **Y** -location and the height and width of the following components of Abaqus/CAE:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:56
msgid "**Select Font** dialog box"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:57
msgid "Abaqus/CAE main window"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:58
msgid "**Adaptivity Plotter** plug-in"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:59
msgid "**Amplitude Plotter** plug-in"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:60
msgid "**Create Weld** dialog box"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:61
msgid "**Copy Annotation** dialog box"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:63
msgid "The sample statements follow:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:95
msgid "You can change the geometry of the Abaqus/CAE main window by issuing a command like the following:"
msgstr ""

#: ../../abqpy/docs/source/user/examples/settings.rst:101
msgid "You can save the GUI preferences you change to the original file by issuing the following command:"
msgstr ""

#: ../../abqpy/docs/source/user/output.rst:3
msgid "Accessing an Output Database"
msgstr ""

#: ../../abqpy/docs/source/user/output.rst:5
msgid "This section describes how you access the data in an output database using either the Abaqus Scripting Interface or the C++ Application Programming Interface (API). You can read model data and field and history data from an output database. You can also write field and history data to an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output.rst:7
msgid "The Abaqus Scripting Interface commands that read and write data from an output database are described in :doc:`reference/odb`."
msgstr ""

#: ../../abqpy/docs/source/user/output.rst:9
msgid "The C++ commands that read and write data from an output database are described in :doc:`reference/odb`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp.rst:3
msgid "Using C++ to access an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp.rst:5
msgid "The following sections describe the architecture of an output database and how to use the Abaqus C++ Application Programming Interface (API) to access data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/about.rst:3
msgid "About the C++ interface"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/about.rst:5
msgid "The C++ interface to an output database is related closely to the Abaqus Scripting Interface. Disparities between the two interfaces are due to fundamental differences in the programming languages. The C++ interface is intended for users with high-performance requirements; others are encouraged to use the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/about.rst:7
msgid "A working knowledge of the C++ programming language is assumed."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:3
msgid "Accessing the C++ interface from an existing application"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:5
msgid "This section provides information that may be helpful to users who need to access results in an output database from an existing application. Most users should find that the **abaqus make** utility is sufficient for their postprocessing needs. Since linking and executing with dynamically linked runtime libraries is highly system dependent, the information in this section is intended for users who have an advanced working knowledge of compilation and linking with runtime libraries."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:7
msgid "It is important to ensure that the compiler used to compile and link the existing application is consistent with the compilers used to generate the Abaqus release. The “System Requirements” document lists the name and version of the compiler used for the Abaqus release on each supported platform. You can access this document through the **System Information** section of the **Support** page at https:www.3ds.com/simulia. You can also find information on compiling and linking with the C++ interface to an output database in the Dassault Systèmes Knowledge Base at https://support.3ds.com/knowledge-base/."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:10
msgid "Initializing the C++ interface"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:12
msgid "Before any calls are made to the C++ interface, the following call must be made to initialize the interface:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:18
msgid "This call is generated automatically when the **abaqus make** utility is run but must be included in any application that is not compiled and linked using the **abaqus make** utility. After all calls to the C++ interface have been completed, the interface may be deactivated by including a call to"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:24
msgid "If the finalization call is not made explicitly, the finalize routine will be called automatically when the application exits."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:27
msgid "Link library location"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:29
msgid "The libraries necessary to link applications that access the C++ interface are located in the following directories:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:31
#: ../../abqpy/docs/source/user/output/cpp/access.rst:48
#: ../../abqpy/docs/source/user/output/cpp/access.rst:65
msgid "**Linux**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:33
msgid "*abaqus_dir/code/lib*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:35
#: ../../abqpy/docs/source/user/output/cpp/access.rst:52
#: ../../abqpy/docs/source/user/output/cpp/access.rst:69
msgid "**Windows**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:37
msgid "*abaqus_dir\\code\\lib*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:39
#: ../../abqpy/docs/source/user/output/cpp/access.rst:56
#: ../../abqpy/docs/source/user/output/cpp/access.rst:73
msgid "where **abaqus_dir** is the name of the directory in which Abaqus is installed. To determine the location of **abaqus_dir** at your site, type `abaqus whereami` at an operating system prompt."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:41
msgid "During linking, the `ABQodb` library and several other libraries shipped with the Abaqus release are used to resolve all the functions available in the interface to the output database. The command used by Abaqus to link runtime libraries (for example, for user subroutines) is available through the Abaqus environment variable **link_sl**. Additional information about linking with the Abaqus libraries, including the names of all libraries which must be specified as part of the link command, may be obtained by running the **abaqus make** utility in verbose mode with a verbosity level of 3."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:44
msgid "Runtime library location"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:46
msgid "The runtime libraries required to execute a program that accesses the C++ interface are located in the following directories:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:50
msgid "*abaqus_dir/code/bin*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:54
msgid "*abaqus_dir\\code\\bin*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:58
msgid "The correct path to the Abaqus runtime libraries must be specified prior to starting the user application. The runtime library path is typically set using the system environment variable `LD_LIBRARY_PATH`, but the method used to set the path may vary depending on your operating system configuration. The `ABQodb` library and several utility libraries resolve all the functions available in the interface to the output database, as described in `Link library location <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-odbintrocpplinklibrary.htm?contextscope=all>`_. At runtime these libraries depend on many of the underlying Abaqus libraries. As a result, if you do not define the correct runtime library path, your application will not run."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:61
msgid "Header file location"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:63
msgid "he header files required to compile a program that accesses the C++ interface are located in the following directories:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:67
msgid "*abaqus_dir/code/include*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:71
msgid "*abaqus_dir\\code\\include*"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/access.rst:75
msgid "Only `odb_API.h` must be included to access the C++ interface, but the path to the header files must be provided during compilation."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:3
msgid "The Abaqus C++ API architecture"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:5
msgid "This section describes the architecture of the Abaqus C++ interface to an output database. The output database is an object-oriented database, which means that the data are held by “objects” (C++ classes) that have certain behavior (C++ methods). The methods of an object in the database allow access to and manipulation of the data held by the object. The data members of an object can be either primitives (integer, floating point, string) or other objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:8
msgid "Class naming convention"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:10
msgid "All class names start with `odb_` to avoid possible name clashes. For example, the string class is named `odb_String`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:13
msgid "Constructors"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:15
msgid "A constructor is a method that creates an object. The Abaqus C++ API uses the following three types of constructors:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:17
msgid "**Constructors for nonpersistent objects**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:19
msgid "Constructors for nonpersistent objects are the standard C++ constructors. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:25
msgid "**Constructors for persistent objects**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:27
msgid "You create a persistent object by calling a method on an existing Abaqus C++ API object. In Abaqus the convention is that the constructor method name corresponds to the name of the object created and that the first letter of the constructor name is capitalized. The object can be accessed using the return value of the constructor call or using a lowercase version of the method name. For example, a Frame object can be created using the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:34
msgid "The Frame object can be retrieved with the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:40
msgid "**Constructors for objects created in large quantities**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:42
msgid "For efficiency the constructors for objects that you create in large quantities, such as elements, nodes, and field values, do not follow the capitalized constructor name rule used for persistent objects. Nodes, elements, and field values are created using the `addNodes`, `addElements`, and `addData` methods, respectively. For example, you use the addNodes method to create and retrieve nodes:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:52
msgid "Header files"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:54
msgid "To use a class in a C++ program, the relevant header files must be included. The naming convention followed is that the file name is the same as the name of the class declared in the header file. For example, the `odb_FieldValue` object is declared in the file `odb_FieldValue.h`. The file `odb_API.h` includes all the header files required to use the API. Other header files must be included to use some classes:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:56
msgid "To access material objects you must include the file `odb_MaterialTypes.h`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/architecture.rst:57
msgid "To access section objects you must include the file `odb_SectionTypes.h`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/compile-link.rst:3
msgid "Compiling and linking your C++ source code"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/compile-link.rst:5
msgid "Sample postprocessing programs to perform commonly exercised tasks are presented in separate sections in this chapter. These and other C++ postprocessing programs must be compiled and linked using the make parameter when running the Abaqus execution procedure (see `Making user-defined executables and subroutines <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-makeproc.htm?contextscope=all>`_). To link properly, the programs cannot contain a C++ main routine. Instead, the programs must begin with a C++ function called ABQmain."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/compile-link.rst:17
msgid "The arguments passed into the program upon execution will be passed into `ABQmain` as though it were the standard C++ main function. The compile and link commands used by the **abaqus make** utility are determined by the settings of the **compile_cpp** and **link** parameters in the Abaqus environment file."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:3
#: ../../abqpy/docs/source/user/output/python/computations.rst:3
msgid "Computations with Abaqus results"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:5
#: ../../abqpy/docs/source/user/output/python/computations.rst:5
msgid "This section discusses computations with Abaqus results in the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:8
#: ../../abqpy/docs/source/user/output/python/computations.rst:8
msgid "Rules for the mathematical operations"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:10
#: ../../abqpy/docs/source/user/output/python/computations.rst:10
msgid "Mathematical operations are supported for FieldOutput, FieldValue, and HistoryOutput objects. These operators allow you to perform linear superposition of Abaqus results or to create more complex derived results from Abaqus results."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:12
#: ../../abqpy/docs/source/user/output/python/computations.rst:12
msgid "The following rules apply:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:14
#: ../../abqpy/docs/source/user/output/python/computations.rst:14
msgid "The operations are performed on the components of a tensor or vector."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:15
#: ../../abqpy/docs/source/user/output/python/computations.rst:15
msgid "The invariants are computed from the component values. For example, taking the absolute value of a tensor can result in negative values of the pressure invariant."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:16
#: ../../abqpy/docs/source/user/output/python/computations.rst:16
msgid "Operations between FieldOutput, FieldValue, and HistoryOutput objects are not supported."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:17
#: ../../abqpy/docs/source/user/output/python/computations.rst:17
msgid "Multiplication and division are not supported between two vector objects nor between two tensor objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:18
#: ../../abqpy/docs/source/user/output/python/computations.rst:18
msgid "The types in an expression must be compatible. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:20
#: ../../abqpy/docs/source/user/output/python/computations.rst:20
msgid "A vector cannot be added to a tensor."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:21
#: ../../abqpy/docs/source/user/output/python/computations.rst:21
msgid "A three-dimensional surface tensor cannot be added to a three-dimensional planar tensor."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:22
#: ../../abqpy/docs/source/user/output/python/computations.rst:22
msgid "INTEGRATION_POINT data cannot be added to ELEMENT_NODAL data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:23
#: ../../abqpy/docs/source/user/output/python/computations.rst:23
msgid "If the fields in the expression were obtained using the getSubset method, the same getSubset operations must have been applied in the same order to obtain each field."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:24
#: ../../abqpy/docs/source/user/output/python/computations.rst:24
msgid "Arguments to the trigonometric functions must be in radians."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:25
#: ../../abqpy/docs/source/user/output/python/computations.rst:25
msgid "Operations on tensors are performed in the local coordinate system, if it is available. Otherwise the global system is used. Abaqus assumes that the local coordinate systems are consistent for operations involving more than one tensor."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:26
#: ../../abqpy/docs/source/user/output/python/computations.rst:26
msgid "Operations between FieldValue objects associated with different locations in the model are allowed only if the data types are the same. If the locations in the model differ, the FieldValue computed will not be associated with a location. If the local coordinate systems of the FieldValue objects are not the same, the local coordinate systems of both fieldValues will be disregarded and the fieldValue computed will have no local coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:28
#: ../../abqpy/docs/source/user/output/python/computations.rst:28
msgid "The FieldOutput operations are significantly more efficient than the FieldValue operators. You can save the computed FieldOutput objects with the following procedure (see the example, :doc:`user/output/python/examples:computations with FieldOutput objects`):"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:30
#: ../../abqpy/docs/source/user/output/python/computations.rst:30
msgid "Create a new FieldOutput object in the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:31
msgid "Use the `addData` method to add the new computed field objects to the new FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:62
#: ../../abqpy/docs/source/user/output/python/computations.rst:34
msgid "Valid mathematical operations"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:64
#: ../../abqpy/docs/source/user/output/python/computations.rst:36
msgid "Table 1 describes the abbreviations that are used in mathematical operations."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:66
#: ../../abqpy/docs/source/user/output/python/computations.rst:38
msgid "**Table 1. Abbreviations.**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:69
#: ../../abqpy/docs/source/user/output/python/computations.rst:41
msgid "Abbreviation"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:69
#: ../../abqpy/docs/source/user/output/python/computations.rst:41
msgid "Allowable values"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:71
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:90
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:98
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:100
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:108
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:112
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:114
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:116
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:118
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:120
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:122
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:124
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:126
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:128
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:130
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:132
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:134
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:142
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:144
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:146
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:148
#: ../../abqpy/docs/source/user/output/python/computations.rst:43
#: ../../abqpy/docs/source/user/output/python/computations.rst:62
#: ../../abqpy/docs/source/user/output/python/computations.rst:70
#: ../../abqpy/docs/source/user/output/python/computations.rst:72
#: ../../abqpy/docs/source/user/output/python/computations.rst:80
#: ../../abqpy/docs/source/user/output/python/computations.rst:84
#: ../../abqpy/docs/source/user/output/python/computations.rst:86
#: ../../abqpy/docs/source/user/output/python/computations.rst:88
#: ../../abqpy/docs/source/user/output/python/computations.rst:90
#: ../../abqpy/docs/source/user/output/python/computations.rst:92
#: ../../abqpy/docs/source/user/output/python/computations.rst:94
#: ../../abqpy/docs/source/user/output/python/computations.rst:96
#: ../../abqpy/docs/source/user/output/python/computations.rst:98
#: ../../abqpy/docs/source/user/output/python/computations.rst:100
#: ../../abqpy/docs/source/user/output/python/computations.rst:102
#: ../../abqpy/docs/source/user/output/python/computations.rst:104
#: ../../abqpy/docs/source/user/output/python/computations.rst:106
#: ../../abqpy/docs/source/user/output/python/computations.rst:114
#: ../../abqpy/docs/source/user/output/python/computations.rst:116
#: ../../abqpy/docs/source/user/output/python/computations.rst:118
#: ../../abqpy/docs/source/user/output/python/computations.rst:120
msgid "all"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:71
#: ../../abqpy/docs/source/user/output/python/computations.rst:43
msgid "FieldOutput objects, FieldValue objects, HistoryVariable objects, or floating point numbers"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:74
#: ../../abqpy/docs/source/user/output/python/computations.rst:46
msgid "float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:74
#: ../../abqpy/docs/source/user/output/python/computations.rst:46
msgid "floating point numbers"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:76
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:92
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:102
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:106
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:110
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:136
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:150
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:152
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:154
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:156
#: ../../abqpy/docs/source/user/output/python/computations.rst:48
#: ../../abqpy/docs/source/user/output/python/computations.rst:64
#: ../../abqpy/docs/source/user/output/python/computations.rst:74
#: ../../abqpy/docs/source/user/output/python/computations.rst:78
#: ../../abqpy/docs/source/user/output/python/computations.rst:82
#: ../../abqpy/docs/source/user/output/python/computations.rst:108
#: ../../abqpy/docs/source/user/output/python/computations.rst:122
#: ../../abqpy/docs/source/user/output/python/computations.rst:124
#: ../../abqpy/docs/source/user/output/python/computations.rst:126
#: ../../abqpy/docs/source/user/output/python/computations.rst:128
msgid "FO"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:76
#: ../../abqpy/docs/source/user/output/python/computations.rst:48
msgid "FieldOutput objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:78
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:94
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:104
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:138
#: ../../abqpy/docs/source/user/output/python/computations.rst:50
#: ../../abqpy/docs/source/user/output/python/computations.rst:66
#: ../../abqpy/docs/source/user/output/python/computations.rst:76
#: ../../abqpy/docs/source/user/output/python/computations.rst:110
msgid "FV"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:78
#: ../../abqpy/docs/source/user/output/python/computations.rst:50
msgid "FieldValue objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:80
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:96
#: ../../abqpy/docs/source/user/output/cpp/computations.rst:140
#: ../../abqpy/docs/source/user/output/python/computations.rst:52
#: ../../abqpy/docs/source/user/output/python/computations.rst:68
#: ../../abqpy/docs/source/user/output/python/computations.rst:112
msgid "HO"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:80
#: ../../abqpy/docs/source/user/output/python/computations.rst:52
msgid "HistoryOutput objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:83
#: ../../abqpy/docs/source/user/output/python/computations.rst:55
msgid "Table 2 shows the valid operations on FieldOutput objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:85
#: ../../abqpy/docs/source/user/output/python/computations.rst:57
msgid "**Table 2. Valid operations.**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:88
#: ../../abqpy/docs/source/user/output/python/computations.rst:60
msgid "Symbol"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:88
#: ../../abqpy/docs/source/user/output/python/computations.rst:60
msgid "Operation"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:88
#: ../../abqpy/docs/source/user/output/cpp/style.rst:119
#: ../../abqpy/docs/source/user/output/python/computations.rst:60
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:185
msgid "Return value"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:90
#: ../../abqpy/docs/source/user/output/python/computations.rst:62
msgid "all + float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:90
#: ../../abqpy/docs/source/user/output/python/computations.rst:62
msgid "addition"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:92
#: ../../abqpy/docs/source/user/output/python/computations.rst:64
msgid "FO + FO"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:94
#: ../../abqpy/docs/source/user/output/python/computations.rst:66
msgid "FV + FV"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:96
#: ../../abqpy/docs/source/user/output/python/computations.rst:68
msgid "HO + HO"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:98
#: ../../abqpy/docs/source/user/output/python/computations.rst:70
msgid "-all"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:98
#: ../../abqpy/docs/source/user/output/python/computations.rst:70
msgid "unary negation"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:100
#: ../../abqpy/docs/source/user/output/python/computations.rst:72
msgid "all - float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:100
#: ../../abqpy/docs/source/user/output/python/computations.rst:72
msgid "subtraction"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:102
#: ../../abqpy/docs/source/user/output/python/computations.rst:74
msgid "FO - FO"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:104
#: ../../abqpy/docs/source/user/output/python/computations.rst:76
msgid "FV - FV"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:106
#: ../../abqpy/docs/source/user/output/python/computations.rst:78
msgid "FO * FO (only if FO is a scalar)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:106
#: ../../abqpy/docs/source/user/output/python/computations.rst:78
msgid "multiplication"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:108
#: ../../abqpy/docs/source/user/output/python/computations.rst:80
msgid "all * float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:110
#: ../../abqpy/docs/source/user/output/python/computations.rst:82
msgid "FO / FO (only if FO is a scalar)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:110
#: ../../abqpy/docs/source/user/output/python/computations.rst:82
msgid "division"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:112
#: ../../abqpy/docs/source/user/output/python/computations.rst:84
msgid "all / float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:114
#: ../../abqpy/docs/source/user/output/python/computations.rst:86
msgid "abs(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:114
#: ../../abqpy/docs/source/user/output/python/computations.rst:86
msgid "absolute value"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:116
#: ../../abqpy/docs/source/user/output/python/computations.rst:88
msgid "acos(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:116
#: ../../abqpy/docs/source/user/output/python/computations.rst:88
msgid "arccosine"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:118
#: ../../abqpy/docs/source/user/output/python/computations.rst:90
msgid "asin(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:118
#: ../../abqpy/docs/source/user/output/python/computations.rst:90
msgid "arcsine"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:120
#: ../../abqpy/docs/source/user/output/python/computations.rst:92
msgid "atan(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:120
#: ../../abqpy/docs/source/user/output/python/computations.rst:92
msgid "arctangent"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:122
#: ../../abqpy/docs/source/user/output/python/computations.rst:94
msgid "cos(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:122
#: ../../abqpy/docs/source/user/output/python/computations.rst:94
msgid "cosine"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:124
#: ../../abqpy/docs/source/user/output/python/computations.rst:96
msgid "degreeToRadian (all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:124
#: ../../abqpy/docs/source/user/output/python/computations.rst:96
msgid "convert degrees to radians"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:126
#: ../../abqpy/docs/source/user/output/python/computations.rst:98
msgid "exp(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:126
#: ../../abqpy/docs/source/user/output/python/computations.rst:98
msgid "natural exponent"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:128
#: ../../abqpy/docs/source/user/output/python/computations.rst:100
msgid "exp10(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:128
#: ../../abqpy/docs/source/user/output/python/computations.rst:100
msgid "base 10 exponent"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:130
#: ../../abqpy/docs/source/user/output/python/computations.rst:102
msgid "log(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:130
#: ../../abqpy/docs/source/user/output/python/computations.rst:102
msgid "natural logarithm"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:132
#: ../../abqpy/docs/source/user/output/python/computations.rst:104
msgid "log10(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:132
#: ../../abqpy/docs/source/user/output/python/computations.rst:104
msgid "base 10 logarithm"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:134
#: ../../abqpy/docs/source/user/output/python/computations.rst:106
msgid "float ** float"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:134
#: ../../abqpy/docs/source/user/output/python/computations.rst:106
msgid "raise to a power"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:136
#: ../../abqpy/docs/source/user/output/python/computations.rst:108
msgid "power(FO, float)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:138
#: ../../abqpy/docs/source/user/output/python/computations.rst:110
msgid "power(FV, float)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:140
#: ../../abqpy/docs/source/user/output/python/computations.rst:112
msgid "power(HO, float)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:142
#: ../../abqpy/docs/source/user/output/python/computations.rst:114
msgid "radianToDegree (all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:142
#: ../../abqpy/docs/source/user/output/python/computations.rst:114
msgid "convert radian to degree"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:144
#: ../../abqpy/docs/source/user/output/python/computations.rst:116
msgid "sin(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:144
#: ../../abqpy/docs/source/user/output/python/computations.rst:116
msgid "sine"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:146
#: ../../abqpy/docs/source/user/output/python/computations.rst:118
msgid "sqrt(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:146
#: ../../abqpy/docs/source/user/output/python/computations.rst:118
msgid "square root"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:148
#: ../../abqpy/docs/source/user/output/python/computations.rst:120
msgid "tan(all)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:148
#: ../../abqpy/docs/source/user/output/python/computations.rst:120
msgid "tangent"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:150
#: ../../abqpy/docs/source/user/output/python/computations.rst:122
msgid "complexMagnitude(FO)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:150
#: ../../abqpy/docs/source/user/output/python/computations.rst:122
msgid "magnitude of the complex field output"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:152
#: ../../abqpy/docs/source/user/output/python/computations.rst:124
msgid "complexPhase(FO)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:152
#: ../../abqpy/docs/source/user/output/python/computations.rst:124
msgid "phase of the complex field output"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:154
#: ../../abqpy/docs/source/user/output/python/computations.rst:126
msgid "complexReal(FO)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:154
#: ../../abqpy/docs/source/user/output/python/computations.rst:126
msgid "real part of the complex field output"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:156
#: ../../abqpy/docs/source/user/output/python/computations.rst:128
msgid "complexImag(FO)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:156
#: ../../abqpy/docs/source/user/output/python/computations.rst:128
msgid "imaginary part of the complex field output"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:160
#: ../../abqpy/docs/source/user/output/python/computations.rst:132
msgid "Envelope calculations"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:162
#: ../../abqpy/docs/source/user/output/python/computations.rst:134
msgid "You use envelope calculations to retrieve the extreme value for an output variable over a number of fields. Envelope calculations are especially useful for retrieving the extreme values over a number of load cases."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:164
#: ../../abqpy/docs/source/user/output/python/computations.rst:136
msgid "The following operators consider a list of fields and perform the envelope calculation:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:187
#: ../../abqpy/docs/source/user/output/python/computations.rst:153
msgid "The envelope commands return two FieldOutput objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:189
#: ../../abqpy/docs/source/user/output/python/computations.rst:155
msgid "The first object contains the requested extreme values."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:190
#: ../../abqpy/docs/source/user/output/python/computations.rst:156
msgid "The second object contains the indices of the fields for which the extreme values were found. The indices derive from the order in which you supplied the fields to the command."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:192
#: ../../abqpy/docs/source/user/output/python/computations.rst:158
msgid "The optional **invariant** argument is a Symbolic Constant specifying the invariant to be used when comparing vectors or tensors. The optional **componentLabel** argument is a odb_String specifying the component of the vector or tensor to be used for selecting the extreme value."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:194
#: ../../abqpy/docs/source/user/output/python/computations.rst:160
msgid "The following rules apply to envelope calculations:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:196
#: ../../abqpy/docs/source/user/output/python/computations.rst:162
msgid "Abaqus compares the values using scalar data. If you are looking for the extreme value of a vector or a tensor, you must supply an invariant or a component label for the selection of the extreme value. For example, for vectors you can supply the MAGNITUDE invariant and for tensors you can supply the MISES invariant."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:197
#: ../../abqpy/docs/source/user/output/python/computations.rst:163
msgid "The fields being compared must be similar. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:199
#: ../../abqpy/docs/source/user/output/python/computations.rst:165
msgid "VECTOR and TENSOR_3D_FULL fields cannot appear in the same list."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:200
#: ../../abqpy/docs/source/user/output/python/computations.rst:166
msgid "The output region of all the fields must be the same. All the fields must apply to the whole model, or all the fields must apply to the same set."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:203
#: ../../abqpy/docs/source/user/output/python/computations.rst:169
msgid "Transformation of results"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:205
#: ../../abqpy/docs/source/user/output/python/computations.rst:171
msgid "Transformations of vector and tensor fields are supported for rectangular, cylindrical, and spherical coordinate systems. The coordinate systems can be fixed or model based. Model-based coordinate systems refer to nodes for position and orientation. Abaqus uses the coordinates of the deformed state to determine a systems origin and orientation for model-based coordinate systems. Transformations that use a model-based coordinate system can account for large displacements of both the coordinate system and the structure."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:207
#: ../../abqpy/docs/source/user/output/python/computations.rst:173
msgid "The steps required to transform results are (see also the example :doc:`user/output/python/examples:transformation of field results`):"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:209
#: ../../abqpy/docs/source/user/output/python/computations.rst:175
msgid "Create the coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:210
#: ../../abqpy/docs/source/user/output/python/computations.rst:176
msgid "Retrieve the field from the database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:211
#: ../../abqpy/docs/source/user/output/python/computations.rst:177
msgid "Use the `fieldOutput.getTransformedField` method to obtain a new field with the results in the specified coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:212
#: ../../abqpy/docs/source/user/output/python/computations.rst:178
msgid "For large displacement of the structure and coordinate system, you must also retrieve the displacement field at the frame. You must compute this displacement field for the whole model to ensure that the required displacement information is available."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:214
#: ../../abqpy/docs/source/user/output/python/computations.rst:180
msgid "The following rules apply to the transformation of results:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:216
#: ../../abqpy/docs/source/user/output/python/computations.rst:182
msgid "Beams, truss, and axisymmetric shell element results will not be transformed."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:218
#: ../../abqpy/docs/source/user/output/python/computations.rst:184
msgid "The component directions 1, 2, and 3 of the transformed results will correspond to the system directions **X**, **Y**, and **Z** for rectangular coordinate systems; :math:`R`, :math:`\\theta`, and **Z** for cylindrical coordinate systems; and :math:`R`, :math:`\\theta`, and :math:`\\phi` for spherical coordinate systems."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:221
#: ../../abqpy/docs/source/user/output/python/computations.rst:187
msgid "Stress results for three-dimensional continuum elements transformed into a cylindrical system would have the hoop stress in S22, which is consistent with the coordinate system axis but inconsistent with the stress state for a three-dimensional axisymmetric elements having hoop stress in S33."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:223
#: ../../abqpy/docs/source/user/output/python/computations.rst:189
msgid "When you are transforming a tensor, the location or integration point always takes into account the deformation. The location of the coordinate system depends on the model, as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:225
#: ../../abqpy/docs/source/user/output/python/computations.rst:191
msgid "If the system is fixed, the coordinate system is fixed."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:226
#: ../../abqpy/docs/source/user/output/python/computations.rst:192
msgid "If the system is model based, you must supply a displacement field that determines the instantaneous location and orientation of the coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:228
#: ../../abqpy/docs/source/user/output/python/computations.rst:194
msgid "Abaqus will perform transformations of tensor results for shells, membranes, and planar elements as rotations of results about the element normal at the element result location. The element normal is the normal computed for the frame associated with the field by Abaqus, and you cannot redefine the normal. Abaqus defines the location of the results location from the nodal locations. You specify optional arguments if you want to use the deformed nodal locations to transform results. For rectangular, cylindrical, and spherical coordinate systems the second component direction for the transformed results will be determined by one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:230
#: ../../abqpy/docs/source/user/output/python/computations.rst:196
msgid "The **Y** - axis in a rectangular coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:231
#: ../../abqpy/docs/source/user/output/python/computations.rst:197
msgid "The :math:`\\theta`-axis in a cylindrical coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:232
#: ../../abqpy/docs/source/user/output/python/computations.rst:198
msgid "The :math:`\\theta`-axis in a spherical coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:233
#: ../../abqpy/docs/source/user/output/python/computations.rst:199
msgid "A user-specified datum axis projected onto the element plane."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/computations.rst:235
#: ../../abqpy/docs/source/user/output/python/computations.rst:201
msgid "If the coordinate system used for projection and the element normal have an angle less than the specified tolerance (the default is 30°), Abaqus will use the next axis and generate a warning."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:3
msgid "Example programs that access data from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:5
#: ../../abqpy/docs/source/user/output/python/examples.rst:5
msgid "The following examples illustrate how you use the output database commands to access data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:8
#: ../../abqpy/docs/source/user/output/python/examples.rst:10
msgid "Finding the maximum value of von Mises stress"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:10
msgid "This example illustrates how you can iterate through an output database and search for the maximum value of von Mises stress. The program opens the output database specified by the first argument on the command line and iterates through the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:12
#: ../../abqpy/docs/source/user/output/python/examples.rst:14
msgid "Each step."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:13
#: ../../abqpy/docs/source/user/output/python/examples.rst:15
msgid "Each frame in each step."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:14
#: ../../abqpy/docs/source/user/output/python/examples.rst:16
msgid "Each value of von Mises stress in each frame."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:16
msgid "In addition, you can supply an optional assembly element set argument from the command line, in which case the program searches only the element set for the maximum value of von Mises stress."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:18
msgid "The following illustrates how you can run the example program from the system prompt. The program will search the element set ALL ELEMENTS in the viewer tutorial output database for the maximum value of von Mises stress:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:26
msgid "If a command line argument is a String that contains spaces, some systems will interpret the String correctly only if it is enclosed in double quotation marks. For example, \"ALL ELEMENTS\"."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:28
#: ../../abqpy/docs/source/user/output/cpp/examples.rst:722
#: ../../abqpy/docs/source/user/output/python/examples.rst:30
msgid "You can also run the example with only the **-help** parameter for a summary of the usage."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:30
msgid "Use the following commands to retrieve the example program and the viewer tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:246
#: ../../abqpy/docs/source/user/output/python/examples.rst:151
msgid "Creating an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:248
msgid "The following example illustrates how you can use the Abaqus C++ API commands to do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:250
#: ../../abqpy/docs/source/user/output/python/examples.rst:155
msgid "Create a new output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:251
#: ../../abqpy/docs/source/user/output/python/examples.rst:156
msgid "Add model data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:252
#: ../../abqpy/docs/source/user/output/python/examples.rst:157
msgid "Add field data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:253
#: ../../abqpy/docs/source/user/output/python/examples.rst:158
msgid "Add history data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:254
#: ../../abqpy/docs/source/user/output/python/examples.rst:159
msgid "Read history data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:255
#: ../../abqpy/docs/source/user/output/python/examples.rst:160
msgid "Save the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:257
#: ../../abqpy/docs/source/user/output/cpp/examples.rst:685
#: ../../abqpy/docs/source/user/output/cpp/examples.rst:793
msgid "Use the following command to retrieve the example program:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:660
msgid "Reading data from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:662
msgid "This example illustrates how you can print the content of an output database. The example opens the output database specified on the command line and calls functions that print the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:664
msgid "Parts"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:665
#: ../../abqpy/docs/source/user/output/python/read.rst:66
msgid "Part instances"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:666
msgid "The root assembly"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:667
msgid "Connectors"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:668
msgid "Connector properties"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:669
msgid "Datum coordinate systems"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:670
msgid "Nodes"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:671
msgid "Elements"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:672
msgid "Sets"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:673
msgid "Faces"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:674
msgid "Sections"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:675
msgid "Steps"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:676
msgid "Frames"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:677
msgid "Fields"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:678
msgid "Field values"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:679
msgid "Field bulk data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:680
msgid "Field locations"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:681
msgid "History regions"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:682
msgid "History output"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:683
msgid "History points"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:692
msgid "Decreasing the amount of data in an output database by retaining data at specific frames"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:694
msgid "This example illustrates how you can decrease the size of an output database. In most cases a large output database results from excessive field output being generated over a large number of frames. The Abaqus C++ API does not support the deletion of data from an output database; however, you can use this example program to copy data from select frames into a second output database created by a **datacheck** analysis that has identical model data. The original analysis and the **datacheck** analysis must be run using the same number of processors because the internal organization of data may differ based on the number of processors. The program uses addData to copy data at specified frames from the large output database into the new output database. The addData method works only when the model data in the two output databases are identical. For more information, see :py:meth:`~abaqus.Odb.FieldOutput.FieldOutput.addData`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:696
msgid "When you run the program, the following command line parameters are required:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:698
msgid "**-smallOdb odbName**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:700
msgid "The name of the output database created with a **datacheck** analysis of the original problem. For more information, see `Abaqus/Standard and Abaqus/Explicit execution <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-analysisproc.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:702
msgid "**-largeOdb odbName**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:704
msgid "The name of the large output database generated by the original problem. The program copies selected frames from this output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:706
msgid "The following parameters are optional:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:708
msgid "**-history**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:710
msgid "Copy all history output from all available steps in the large output database. By default, history output is not copied."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:713
msgid "Copying large amounts of history data can result in the program creating a very large output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:715
msgid "**-debug**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:717
msgid "Print a detailed report of all the operations performed during the running of the program. By default, no debug information is generated."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:720
msgid "If you are extracting data from a large output database, the debug option can generate large amounts of information."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:724
msgid "The following is an example of how you can use this program in conjunction with the output database generated by the problem described in `Free ring under initial velocity: comparison of rate-independent and rate-dependent plasticity <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEBMKRefMap/simabmk-c-freering.htm?contextscope=all>`_. Use the following commands to retrieve the example program and the benchmark input file:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:731
msgid "Run an analysis using the benchmark input file:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:737
msgid "This creates an output database called `ringshell.odb` that contains 100 frames of data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:739
msgid "Run a **datacheck** analysis to obtain a new output database called `ringshell_datacheck.odb` that contains the same model data as `ringshell.odb`:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:745
msgid "Create the executable program:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:751
msgid "The program displays the number of frames available in each step. For each step you must specify the number of increments between frames, which is the frequency at which the data will be copied to the new output database. Data for the first and last increment in each step are always copied. For example, if a step has 100 frames, and you enter a frame interval of 37, the program will copy data for frames 0, 37, 74, and 100."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:753
msgid "The following statement will run the executable program and read data from the small output database containing only model data and the large output database created by the benchmark example:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:759
msgid "The program prompts you for the increment between frames:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:772
msgid "Enter 37 to define the increment between frames. The program then reads the data and displays the frames being processed:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:783
#: ../../abqpy/docs/source/user/output/python/examples.rst:739
msgid "Stress range for multiple load cases"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:785
msgid "This example illustrates how you can use the envelope operations to compute the stress range over a number of load cases. The example program does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:787
msgid "For each load case during a specified step, the program collects the S11 components of the stress tensor fields into a list of scalar fields."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:788
#: ../../abqpy/docs/source/user/output/python/examples.rst:744
msgid "Computes the maximum and minimum of the S11 stress component using the envelope calculations."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:789
#: ../../abqpy/docs/source/user/output/python/examples.rst:745
msgid "Computes the stress range using the maximum and minimum values of the stress component."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:790
#: ../../abqpy/docs/source/user/output/python/examples.rst:746
msgid "Creates a new frame in the step."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:791
#: ../../abqpy/docs/source/user/output/python/examples.rst:747
msgid "Writes the computed stress range into a new FieldOutput object in the new frame."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:799
msgid "The fetch command also retrieves an input file that you can use to generate an output database that can be read by the example program."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:873
msgid "A C++ version of FELBOW"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:875
msgid "This example illustrates the use of a C++ program to read selected element integration point records from an output database and to postprocess the elbow element results. The program creates **X - Y** data that can be plotted with the *X–Y* plotting capability in Abaqus/CAE. The program performs the same function as the Fortran program described in `Creation of a data file to facilitate the postprocessing of elbow element results: FELBOW <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-felbow.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:877
msgid "The program reads integration point data for elbow elements from an output database to visualize one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:879
#: ../../abqpy/docs/source/user/output/python/examples.rst:1024
msgid "Variation of an output variable around the circumference of a given elbow element, or"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:880
#: ../../abqpy/docs/source/user/output/python/examples.rst:1025
msgid "Ovalization of a given elbow element."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:882
msgid "The program creates either an ASCII file containing *X–Y* data or a new output database file that can be viewed using Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:884
msgid "To use option 2, you must ensure that the integration point coordinates (COORD) are written to the output database. For option 1 the *X*-data are data for the distance around the circumference of the elbow element, measured along the middle surface, and the *Y*-data are data for the output variable. For option 2 the *X–Y* data are the current coordinates of the middle-surface integration points around the circumference of the elbow element, projected to a local coordinate system in the plane of the deformed cross-section. The origin of the local system coincides with the center of the cross-section; the plane of the deformed cross-section is defined as the plane that contains the center of the cross-section."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:886
msgid "You should specify the name of the output database during program execution. The program prompts for more information, depending on the option that was chosen; this information includes the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:888
#: ../../abqpy/docs/source/user/output/python/examples.rst:1033
msgid "Your choice for storing results (ASCII file or a new output database)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:889
#: ../../abqpy/docs/source/user/output/python/examples.rst:1034
msgid "File name based on the above choice"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:890
#: ../../abqpy/docs/source/user/output/python/examples.rst:1035
msgid "The postprocessing option (1 or 2)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:891
#: ../../abqpy/docs/source/user/output/python/examples.rst:1036
msgid "The part name"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:892
#: ../../abqpy/docs/source/user/output/python/examples.rst:1037
msgid "The step name"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:893
#: ../../abqpy/docs/source/user/output/python/examples.rst:1038
msgid "The frame number"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:894
#: ../../abqpy/docs/source/user/output/python/examples.rst:1039
msgid "The element output variable (option 1 only)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:895
#: ../../abqpy/docs/source/user/output/python/examples.rst:1040
msgid "The component of the variable (option 1 only)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:896
#: ../../abqpy/docs/source/user/output/python/examples.rst:1041
msgid "The section point number (option 1 only)"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:897
#: ../../abqpy/docs/source/user/output/python/examples.rst:1042
msgid "The element number or element set name"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:899
msgid "Before program execution, compile and link the C++ program using the **abaqus make** utility:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:905
msgid "After successful compilation, the program's object code is linked automatically with the Abaqus object codes stored in the shared program library and interface library to build the executable program. Refer to `Customizing the Abaqus environment <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEILGRefMap/simailg-m-Environment-sb.htm?contextscope=all>`_ to see which compile and link commands are used for a particular computer."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:907
msgid "Before executing the program, run an analysis that creates an output database file containing the appropriate output. This analysis includes, for example, output for the elements and the integration point coordinates of the elements. Execute the program using the following command:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:913
msgid "The program prompts for other information, such as the desired postprocessing option, part name, etc. The program processes the data and produces a text file or a new output database file that contains the information required to visualize the elbow element results."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/examples.rst:915
#: ../../abqpy/docs/source/user/output/python/examples.rst:1052
msgid "`Elastic-plastic collapse of a thin-walled elbow under in-plane bending and internal pressure <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-elbowcollapse.htm?contextscope=all>`_ contains several figures that can be created with the aid of this program."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/exceptions.rst:3
#: ../../abqpy/docs/source/user/output/python/exceptions.rst:3
msgid "Exception handling in an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/exceptions.rst:5
msgid "Support for C++ exception handling is provided in the API to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/exceptions.rst:7
msgid "For example, in your C++ program you may wish to customize the error message when an output database was not opened successfully as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/exceptions.rst:25
msgid "For more information, see BaseException object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:3
#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:3
msgid "Improving the efficiency of your scripts"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:5
#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:5
msgid "If you are accessing large amounts of data from an output database, you should be aware of potential inefficiencies in your script and techniques that will help to speed up your scripts."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:8
msgid "Creating objects to hold loop counters"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:10
msgid "A program can spend a large proportion of its computation time executing statements inside loops. As a result, you can make your scripts more efficient if you consider how Abaqus computes the next value of a loop counter each time the loop is executed. If possible, you should create an integer or a sequence object to hold the value of a loop counter. If you use a value derived from an Abaqus object, the time taken to calculate the next value can slow your program significantly."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:12
msgid "The following example uses the number of nodes in a part instance to determine the range of a loop counter:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:22
msgid "You can make the program more efficient if you create an object to hold the value of the number of nodes."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:33
msgid "You can use this technique only if the maximum value of the loop counter remains fixed for the duration of the loop."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:36
msgid "Creating objects to hold temporary variables"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:38
msgid "To improve the efficiency of scripts that access an output database, you should create objects that will be used to hold temporary variables that are accessed multiple times while the program is executing. For example, if the program accesses the temporary variable while inside a loop that is executed many times, creating an object to hold the variable will speed up your program significantly."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:40
msgid "The following example examines the von Mises stress in each element during a particular frame of field output. If the stress is greater than a certain maximum value, the program prints the strain components for the element."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:69
msgid "In this example every time the script calls the strainField.values method, Abaqus must reconstruct the sequence of FieldValue objects. This reconstruction could result in a significant performance degradation, particularly for a large model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:71
msgid "A slight change in the program greatly improves its performance, as shown in the following example:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:101
#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:52
msgid "Similarly, if you expect to retrieve more than one frame from an output database, you should create a temporary variable that holds the entire frame repository. You can then provide the logic to retrieve the desired frames from the repository and avoid recreating the repository each time. For example, executing the following statements could be very slow:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:109
#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:60
msgid "Creating a temporary variable to hold the frame repository provides the same functionality and speeds up the process:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:118
#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:69
msgid "Such a potential loss of performance will not be a problem when accessing a load case frame. Accessing a load case frame does not result in the creation of a frame repository and, thus, does not suffer from a corresponding loss of performance."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:121
msgid "Using references to objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:123
msgid "Many functions return a reference to an object rather than an object. Returning a reference is much more efficient because it avoids unnecessary memory operations. To maintain the efficiency of references, you should use the reference itself. You should not assign the reference to a new object, since assigning the reference to a new object creates a copy of the object that is denoted by the reference and invokes potentially expensive copy constructors. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:131
msgid "In the above case a copy of the nodeSequence object has to be created in memory."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:133
msgid "Many of the methods in the Abaqus Scripting Interface that provide access to an output database return a reference to an object rather than the object itself. It is much more efficient to modify the previous example to specify the returned type to be a reference:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/improve-efficiency.rst:140
msgid "In this case no new object is created and no copy constructors are called."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:3
#: ../../abqpy/docs/source/user/output/python/need-what-to-understand.rst:3
msgid "What do you need to access the output database?"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:5
msgid "To use the Abaqus C++ API to access an output database, you need to understand the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:7
msgid "The fundamentals of Abaqus output data and the Abaqus concepts of instances, fields, and history."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:8
msgid "How to program in C++."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:9
msgid "How to use the C++ API utility interface."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:10
msgid "How to use Abaqus objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/need-what-access.rst:11
msgid "How to compile and link your C++ source code."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:3
#: ../../abqpy/docs/source/user/output/python/object-model.rst:3
msgid "How the object model for the output database relates to commands"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:5
#: ../../abqpy/docs/source/user/output/python/object-model.rst:5
msgid "You need to understand the object model for the output database both to read data from it and to write data to it. An object model describes the relationship between objects. The object model for the Abaqus/CAE model is described in :doc:`user/python/use-scripts/object-model`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:7
#: ../../abqpy/docs/source/user/output/python/object-model.rst:7
msgid "For example, consider the object model for field output data shown in :numref:`odb-overview-nls` The Odb object at the top of the figure is created when you issue the command to open or create an output database. As you move down the object model, an OdbStep object is a member of the Odb object; similarly, a Frame object is a member of the OdbStep object. The FieldOutput object has two members—fieldValue and fieldLocation."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:14
#: ../../abqpy/docs/source/user/output/python/object-model.rst:15
msgid "The output database object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:16
msgid "The object model translates directly to the structure of an Abaqus C++ API command. For example, the following command refers to a Frame object in the sequence of frames contained in an OdbStep object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:22
#: ../../abqpy/docs/source/user/output/python/object-model.rst:23
msgid "Similarly, the following command refers to the sequence of field data contained in a FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/object-model.rst:29
msgid "You use commands to access objects by stepping through the hierarchy of objects in the object model. The `Access`, `Path`, and `Prototype` descriptions in :doc:`reference/odb` describe the interface definition of the command. The interface definition of the command reflects the hierarchy of objects in the object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:3
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:3
msgid "Object model for the output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:5
msgid "An output database generated from an Abaqus analysis contains both model and results data. The output database object model is shown in :numref:`odb-model-nls`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:7
msgid "**Model data**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:9
msgid "Model data describe the parts and part instances that make up the root assembly; for example, nodal coordinates, set definitions, and element types."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:11
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:11
msgid "**Results data**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:13
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:13
msgid "Results data describe the results of your analysis; for example, stresses, strains, and displacements. You use output requests to configure the contents of the results data. Results data can be either field output data or history output data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:17
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:16
msgid "For a description of object models, see :doc:`user/python/use-scripts/object-model`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:19
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:18
msgid "You can find more information on the format of the output database in `Output to the Output Database <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEOUTRefMap/simaout-m-dboutput-sb.htm?contextscope=all#simaout-m-dboutput-sb>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:22
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:21
msgid "Model data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:24
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:23
msgid "Model data define the model used in the analysis; for example, the parts, materials, initial and boundary conditions, and physical constants. More information about model data can be found in The :doc:`user/python/use-scripts/object-model` and `Assembly definition <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEMODRefMap/simamod-c-partassy.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:26
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:25
msgid "Abaqus does not write all the model data to the output database; for example, you cannot access loads, and only certain interactions are available. Model data that are stored in the output database include parts, the root assembly, part instances, regions, materials, sections, section assignments, and section categories, each of which is stored as an Abaqus Scripting Interface object. These components of model data are described below."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:28
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:27
msgid "**Parts**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:30
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:29
msgid "A part in the output database is a finite element idealization of an object. Parts are the building blocks of an assembly and can be either rigid or deformable. Parts are reusable; they can be instanced multiple times in the assembly. Parts are not analyzed directly; a part is like a blueprint for its instances. A part is stored in an output database as a collection of nodes, elements, surfaces, and sets."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:32
#: ../../abqpy/docs/source/user/output/cpp/read.rst:53
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:31
#: ../../abqpy/docs/source/user/output/python/read.rst:58
msgid "**The root assembly**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:34
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:33
msgid "The root assembly is a collection of positioned part instances. An analysis is conducted by defining boundary conditions, constraints, interactions, and a loading history for the root assembly. The output database object model contains only one root assembly."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:36
#: ../../abqpy/docs/source/user/output/cpp/read.rst:61
#: ../../abqpy/docs/source/user/output/cpp/write.rst:105
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:35
#: ../../abqpy/docs/source/user/output/python/write.rst:91
msgid "**Part instances**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:38
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:37
msgid "A part instance is a usage of a part within the assembly. All characteristics (such as mesh and section definitions) defined for a part become characteristics for each instance of that part—they are inherited by the part instances. Each part instance is positioned independently within the root assembly."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:40
#: ../../abqpy/docs/source/user/output/cpp/read.rst:248
#: ../../abqpy/docs/source/user/output/cpp/write.rst:142
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:39
#: ../../abqpy/docs/source/user/output/python/read.rst:131
#: ../../abqpy/docs/source/user/output/python/write.rst:120
msgid "**Materials**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:42
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:41
msgid "Materials contain material models comprised of one or more material property definitions. The same material models may be used repeatedly within a model; each component that uses the same material model shares identical material properties. Many materials may exist within a model database, but only the materials that are used in the assembly are copied to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:44
#: ../../abqpy/docs/source/user/output/cpp/read.rst:332
#: ../../abqpy/docs/source/user/output/cpp/write.rst:170
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:43
#: ../../abqpy/docs/source/user/output/python/read.rst:181
#: ../../abqpy/docs/source/user/output/python/write.rst:132
msgid "**Sections**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:46
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:45
msgid "Sections add the properties that are necessary to define completely the geometric and material properties of an element. Various element types require different section types to complete their definitions. For example, shell elements in a composite part require a section that provides a thickness, multiple material models, and an orientation for each material model; all these pieces combine to complete the composite shell element definition. Like materials, only those sections that are used in the assembly are copied to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:48
#: ../../abqpy/docs/source/user/output/cpp/read.rst:399
#: ../../abqpy/docs/source/user/output/cpp/write.rst:203
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:47
#: ../../abqpy/docs/source/user/output/python/read.rst:223
#: ../../abqpy/docs/source/user/output/python/write.rst:152
msgid "**Section assignments**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:50
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:49
msgid "Section assignments link section definitions to the regions of part instances. Section assignments in the output database maintain this association. Sections are assigned to each part in a model, and the section assignments are propagated to each instance of that part."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:52
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:51
msgid "**Section categories**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:54
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:53
msgid "You use section categories to group the regions of the model that use the same section definitions; for example, the regions that use a shell section with five section points. Within a section category, you use the section points to identify the location of results; for example, you can associate section point 1 with the top surface of a shell and section point 5 with the bottom surface."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:56
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:55
msgid "**Analytical rigid surface**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:58
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:57
msgid "Analytical rigid surfaces are geometric surfaces with profiles that can be described with straight and curved line segments. Using analytical rigid surfaces offers important advantages in contact modeling."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:60
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:59
msgid "**Rigid bodies**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:62
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:61
msgid "You use rigid bodies to define a collection of nodes, elements, and/or surfaces whose motion is governed by the motion of a single node, called the rigid body reference node."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:64
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:63
msgid "**Pretension Sections**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:66
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:65
msgid "Pretension sections are used to associate a pre-tension node with a pre-tension section. The pre-tension section can be defined using a surface for continuum elements or using an element for truss or beam elements."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:68
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:67
msgid "**Interactions**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:70
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:69
msgid "Interactions are used to define contact between surfaces in an analysis. Only contact interactions defined using contact pairs are written to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:72
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:71
msgid "**Interaction properties**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:74
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:73
msgid "Interaction properties define the physical behavior of surfaces involved in an interaction. Only tangential friction behavior is written to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:76
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:75
msgid ":numref:`odb-model-nls` shows the model data object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:83
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:82
msgid "The model data object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:86
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:157
msgid "Results data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:88
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:159
msgid "Results data describe the results of your analysis. Abaqus organizes the analysis results in an output database into the following components:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:90
#: ../../abqpy/docs/source/user/output/cpp/read.rst:435
#: ../../abqpy/docs/source/user/output/cpp/write.rst:224
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:161
#: ../../abqpy/docs/source/user/output/python/read.rst:260
#: ../../abqpy/docs/source/user/output/python/write.rst:170
msgid "**Steps**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:92
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:163
msgid "An Abaqus analysis contains a sequence of one or more analysis steps. Each step is associated with an analysis procedure."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:94
#: ../../abqpy/docs/source/user/output/cpp/read.rst:454
#: ../../abqpy/docs/source/user/output/cpp/write.rst:239
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:165
#: ../../abqpy/docs/source/user/output/python/read.rst:291
#: ../../abqpy/docs/source/user/output/python/write.rst:181
msgid "**Frames**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:96
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:167
msgid "Each step contains a sequence of frames, where each increment of the analysis that resulted in output to the output database is called a frame. In a frequency or buckling analysis each eigenmode is stored as a separate frame. Similarly, in a steady-state harmonic response analysis each frequency is stored as a separate frame."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:98
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:169
msgid "**Field output**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:100
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:171
msgid "Field output is intended for infrequent requests for a large portion of the model and can be used to generate contour plots, animations, symbol plots, and displaced shape plots in the Visualization module of Abaqus/CAE. You can also use field output to generate an **X - Y** data plot. Only complete sets of basic variables (for example, all the stress or strain components) can be requested as field output. Field output is composed of a cloud of data values (e.g., stress tensors at each integration point for all elements). Each data value has a location, type, and value. You use the regions defined in the model data, such as an element set, to access subsets of the field output data. :numref:`odb-field-nls` shows the field output data object model within an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:107
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:178
msgid "The field output data object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:109
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:180
msgid "**History output**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:111
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:182
msgid "History output is output defined for a single point or for values calculated for a portion of the model as a whole, such as energy. History output is intended for relatively frequent output requests for small portions of the model and can be displayed in the form of **X - Y** data plots in the Visualization module of Abaqus/CAE. Individual variables (such as a particular stress component) can be requested."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:113
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:184
msgid "Depending on the type of output expected, a HistoryRegion object can be defined for one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:115
#: ../../abqpy/docs/source/user/output/cpp/read.rst:720
#: ../../abqpy/docs/source/user/output/cpp/write.rst:388
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:186
#: ../../abqpy/docs/source/user/output/python/read.rst:513
#: ../../abqpy/docs/source/user/output/python/write.rst:259
msgid "a node"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:116
#: ../../abqpy/docs/source/user/output/cpp/read.rst:721
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:187
#: ../../abqpy/docs/source/user/output/python/read.rst:514
msgid "an integration point"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:117
#: ../../abqpy/docs/source/user/output/cpp/read.rst:722
#: ../../abqpy/docs/source/user/output/cpp/write.rst:390
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:188
#: ../../abqpy/docs/source/user/output/python/read.rst:515
#: ../../abqpy/docs/source/user/output/python/write.rst:261
msgid "a region"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:118
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:189
msgid "the whole model"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:120
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:191
msgid "The output from all history requests that relate to a particular point or region is then collected in one HistoryRegion object. :numref:`odb-history-nls` shows the history output data object model within an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/output-object-model.rst:127
#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:198
msgid "The history output data."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:5
msgid "The following sections describe how you use Abaqus C++ API commands to read data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:8
#: ../../abqpy/docs/source/user/output/python/read.rst:8
msgid "The Abaqus/CAE Visualization module tutorial output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:10
#: ../../abqpy/docs/source/user/output/python/read.rst:10
msgid "The following sections describe how you can access the data in an output database. Examples are included that refer to the Abaqus/CAE Visualization module tutorial output database, `viewer_tutorial.odb`. This database is generated by the input file from Case 2 of the example problem, `Indentation of an elastomeric foam specimen with a hemispherical punch <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-indentfoamhemipunch.htm?contextscope=all>`_. The problem studies the behavior of a soft elastomeric foam block indented by a heavy metal punch. The tutorial shows how you can use the Visualization module to view the data in the output database. The tutorial describes how you can choose the variable to display, how you can step through the steps and frames in the analysis, and how you can create **X - Y** data from history output."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:12
msgid "You are encouraged to copy the tutorial output database to a local directory and experiment with the Abaqus C++ API. The output database and the example scripts from this guide can be copied to the user's working directory using the **abaqus fetch** utility:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:18
msgid "where **name.C** is the name of the program or **name.odb** is the name of the output database (see `Fetching sample input files <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all>`_). For example, use the following command to retrieve the tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:25
#: ../../abqpy/docs/source/user/output/python/read.rst:26
msgid "Making the Odb commands available"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:27
msgid "To make the Odb commands available to your program, you first need to include the output database interface classes using the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:33
msgid "To make the material and section Odb commands available to your program, you also need to include their output database classes:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:41
#: ../../abqpy/docs/source/user/output/python/read.rst:43
msgid "Opening an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:43
#: ../../abqpy/docs/source/user/output/python/read.rst:45
msgid "You use the `openOdb` method to open an existing output database. For example, the following statement opens the output database used by the Abaqus/CAE Visualization module tutorial:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:49
msgid "After you open the output database, you can access its contents using the methods and members of the Odb object returned by the `openOdb` method. In the above example the Odb object is referred to by the variable `odb`. For a full description of the `openOdb` command, see :func:`~odbAccess.openOdb`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:51
msgid "The following list describes the objects in model data and the commands you use to read model data. Many of the objects are repositories, and you will find it useful to use the repository iterators to determine the keys of the repositories. For more information on repositories and sequences, see :doc:`utility`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:55
#: ../../abqpy/docs/source/user/output/python/read.rst:60
msgid "An output database contains only one root assembly. You access the root assembly through the OdbAssembly object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:63
msgid "Part instances are stored in the instance repository under the OdbAssembly object. The following statements display the repository keys of the part instances in the tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:72
#: ../../abqpy/docs/source/user/output/python/read.rst:76
msgid "The output database contains only one part instance, and the resulting output is"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:78
msgid "From a part instance or part you can retrieve the node and element information as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:129
#: ../../abqpy/docs/source/user/output/cpp/write.rst:116
#: ../../abqpy/docs/source/user/output/python/read.rst:83
#: ../../abqpy/docs/source/user/output/python/write.rst:102
msgid "**Regions**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:131
#: ../../abqpy/docs/source/user/output/python/read.rst:85
msgid "Regions in the output database are OdbSet objects. Regions refer to the part and assembly sets stored in the output database. A part set refers to elements or nodes in an individual part and appears in each instance of the part in the assembly. An assembly set refers to the elements or nodes in part instances in the assembly. A region can be one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:133
#: ../../abqpy/docs/source/user/output/python/read.rst:87
msgid "A node set"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:134
#: ../../abqpy/docs/source/user/output/python/read.rst:88
msgid "An element set"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:135
#: ../../abqpy/docs/source/user/output/python/read.rst:89
msgid "A surface"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:137
#: ../../abqpy/docs/source/user/output/python/read.rst:91
msgid "For example, the following statement displays the node sets in the OdbAssembly object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:146
#: ../../abqpy/docs/source/user/output/cpp/read.rst:174
#: ../../abqpy/docs/source/user/output/cpp/read.rst:446
#: ../../abqpy/docs/source/user/output/cpp/read.rst:540
#: ../../abqpy/docs/source/user/output/cpp/read.rst:653
#: ../../abqpy/docs/source/user/output/cpp/read.rst:855
#: ../../abqpy/docs/source/user/output/python/read.rst:98
#: ../../abqpy/docs/source/user/output/python/read.rst:113
#: ../../abqpy/docs/source/user/output/python/read.rst:269
#: ../../abqpy/docs/source/user/output/python/read.rst:285
#: ../../abqpy/docs/source/user/output/python/read.rst:397
#: ../../abqpy/docs/source/user/output/python/read.rst:414
#: ../../abqpy/docs/source/user/output/python/read.rst:440
#: ../../abqpy/docs/source/user/output/python/read.rst:480
#: ../../abqpy/docs/source/user/output/python/read.rst:728
#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:85
#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:139
msgid "The resulting output is"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:153
#: ../../abqpy/docs/source/user/output/python/read.rst:104
msgid "The following statements display the node sets and the element sets in the PART-1-1 part instance:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:189
#: ../../abqpy/docs/source/user/output/python/read.rst:121
msgid "The following statement assigns a variable (topNodeSet) to the 'TOP' node set in the PART-1-1 part instance:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:198
msgid "The type of the object to which topNodeSet refers is OdbSet. After you create a variable that refers to a region, you can use the variable to refer to a subset of field output data, as described in `Using regions to read a subset of field output data <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAECMDRefMap/simacmd-c-odbintroreadregcpp.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:200
msgid "To access the set information on a part instance:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:231
msgid "The set information in an assembly set is keyed by instance name and can be accessed using the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:250
#: ../../abqpy/docs/source/user/output/python/read.rst:133
msgid "You can read material data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:252
#: ../../abqpy/docs/source/user/output/cpp/write.rst:146
#: ../../abqpy/docs/source/user/output/python/read.rst:135
msgid "Materials are stored in the materials repository under the Odb object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:254
#: ../../abqpy/docs/source/user/output/cpp/write.rst:148
msgid "Extend the Material commands available to the Odb object using the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:261
#: ../../abqpy/docs/source/user/output/python/read.rst:137
msgid "Access the materials repository using the command:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:271
#: ../../abqpy/docs/source/user/output/python/read.rst:145
msgid "To print isotropic elastic material properties in a material object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:297
#: ../../abqpy/docs/source/user/output/python/read.rst:167
msgid "Some Material definitions have suboptions. For example, to access the smoothing type used for biaxial test data specified for a hyperelastic material:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:330
msgid ":doc:`reference/mdb/model/material` describes the Material object commands in more detail; the odb_Union object is defined in `Union object <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-infunioncpp.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:334
#: ../../abqpy/docs/source/user/output/python/read.rst:183
msgid "You can read section data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:336
#: ../../abqpy/docs/source/user/output/cpp/write.rst:174
#: ../../abqpy/docs/source/user/output/python/read.rst:185
msgid "Sections are stored in the sections repository under the Odb object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:338
msgid "Extend the Section commands available to the Odb object using the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:345
#: ../../abqpy/docs/source/user/output/python/read.rst:187
msgid "The following statements display the repository keys of the sections in an output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:356
msgid "The Section object can be one of the various section types. The odb_isA method can be used to determine the section type. For example, to determine whether a section is of type homogeneous solid section and to print its thickness and associated material name:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:374
#: ../../abqpy/docs/source/user/output/python/read.rst:205
msgid "Similarily, to access the beam profile repository:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:384
msgid "The Profile object can be one of the various profile types. The odb_isA method can be used to determine the profile type. For example, to output the radius of all circular profiles in the odb:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:401
msgid "Section assignments are stored in the sectionAssignments repository under the OdbAssembly object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:403
#: ../../abqpy/docs/source/user/output/python/read.rst:227
msgid "All elements in an Abaqus analysis need to be associated with section and material properties. Section assignments provide the relationship between elements in a part instance and their section properties. The section properties include the associated material name. To access the sectionAssignments repository from the PartInstance object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:431
#: ../../abqpy/docs/source/user/output/python/read.rst:256
msgid "Reading results data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:433
msgid "The following list describes the objects in results data and the commands you use to read results data. As with model data you will find it useful to use the repository iterators to determine the keys of the results data repositories."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:437
#: ../../abqpy/docs/source/user/output/python/read.rst:262
msgid "Steps are stored in the steps repository under the Odb object. The key to the steps repository is the name of the step. The following statements print out the keys of each step in the repository:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:456
#: ../../abqpy/docs/source/user/output/python/read.rst:293
msgid "Each step contains a sequence of frames, where each increment of the analysis (or each mode in an eigenvalue analysis) that resulted in output to the output database is called a frame. The following statement assigns a variable to the last frame in the first step:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:466
#: ../../abqpy/docs/source/user/output/python/read.rst:300
msgid "Reading field output data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:468
#: ../../abqpy/docs/source/user/output/python/read.rst:302
msgid "Field output data are stored in the fieldOutputs repository under the OdbFrame object. The key to the repository is the name of the variable. The following statements list all the variables found in the last frame of the first step (the statements use the variable `lastFrame` that we defined previously):"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:487
msgid "Different variables can be written to the output database at different frequencies. As a result, not all frames will contain all the field output variables. You can use the following to view all the available field data in a frame:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:509
#: ../../abqpy/docs/source/user/output/python/read.rst:338
msgid "The resulting print output lists all the field output variables in a particular frame, along with their type and position."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:522
msgid "In turn, a FieldOutput object has a method values that returns a reference to a sequence of FieldValue objects that contain data. Each FieldValue object in the sequence corresponds to a particular location in the model. You can obtain the data corresponding to each FieldValue object using the data method, which returns a pointer to an array that contains the results at the current location. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:551
msgid "The data in the FieldValue object depend on the field output variable, which is displacement in the above example. In the example above the field output for displacements was of type NODAL and there is a FieldValue object for the output at each node. In this case the data method returns a pointer to an array containing the displacements at the node. For INTEGRATION_POINT data each integration point in an element will correspond to a different FieldValue object, and the data method will return a pointer to an array containing the element results data at that particular integration point."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:554
msgid "Access to field data using the FieldValue object will be deprecated in future releases of the C++ version of the Abaqus Scripting Interface because of the improved performance of the bulk data access method. For more information, see :py:class:`~abaqus.Odb.FieldBulkData.FieldBulkData` object and :doc:`read:using bulk data access to an output database`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:557
msgid "Using bulk data access to an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:559
msgid "If you need to access all the data in a field from an output database, you can use the bulkDataBlocks method of the FieldOutput object to read the data in bulk form. The bulkDataBlocks method returns a reference to a sequence of FieldBulkData objects, each of which contains the entire output for a class of nodes or elements, blocked together into an array."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:561
msgid "The data method of the FieldBulkData object returns an array of data corresponding to the output for the entire class of elements or nodes. The length and width methods of theFieldBulkData object return the number of output locations and the number of components at each output location, respectively. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:586
msgid "The `numberOfElements` method returns the number of elements in a block. When you are accessing the results for elements, the `numberOfElements` method is useful in determining the number of output locations per element. For example, when you are accessing element data at integration points, you may need to determine the number of integration points per element. You can determine the number of integration points per element by dividing the length of the block, which is the total number of output locations, by the number of elements in the block. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:625
msgid "For more information, see :py:class:`~abaqus.Odb.FieldBulkData.FieldBulkData` object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:627
msgid "The bulkDataBlocks method is an alternative to the values method of a FieldOutput object, described in :doc:`read:reading field output data`. The `values` method of a FieldOutput object returns a reference to a sequence of FieldValue objects that contain data. Each FieldValue object in the sequence provides data for a unique location in the model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:629
msgid "Performance can be increased with the bulk data interface because the field data stored in a bulk data block are made available in a single array of floating point numbers. If you access the same data in nonbulk form, you must loop over a sequence of FieldValue objects and then access the data for each location separately. Traversing an array can prove to be significantly faster than traversing a sequence of objects and extracting data stored within the objects. As a result, accessing the data in an output database using the bulk data interface can be significantly faster than the nonbulk form."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:631
msgid "If you do not need to access large amounts of data, you may get better performance with the nonbulk access method. This is especially true if the number of output locations you are accessing is smaller than the number of elements in a class. Similarly, the nonbulk access method may be faster if the number of nodes you are accessing is smaller than the number of nodes in an instance. The nonbulk access method is also better suited for random access to an output database, where successive output locations to be accessed may lie in completely different blocks."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:634
#: ../../abqpy/docs/source/user/output/python/read.rst:428
msgid "Using regions to read a subset of field output data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:636
#: ../../abqpy/docs/source/user/output/python/read.rst:430
msgid "After you have created an OdbSet object using model data, you can use the getSubset method to read only the data corresponding to that region. Typically, you will be reading data from a region that refers to a node set or an element set. For example, the following statements create a variable called center that refers to the node set PUNCH at the center of the hemispherical punch. In a previous section you created the displacement variable that refers to the displacement of the entire model in the final frame of the first step. Now you use the getSubset command to get the displacement for only the center region."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:660
msgid "The arguments to `getSubset` are a region, an element type, a position, or section point data. The following is a second example that uses an element set to define the region and generates formatted output for the stress at integration points for CAX4 elements from the element set \"CENT\":"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:706
msgid "Possible values for the enumeration for the position are:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:708
#: ../../abqpy/docs/source/user/output/python/read.rst:501
msgid "INTEGRATION_POINT"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:709
#: ../../abqpy/docs/source/user/output/python/read.rst:502
msgid "NODAL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:710
#: ../../abqpy/docs/source/user/output/python/read.rst:503
msgid "ELEMENT_NODAL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:711
#: ../../abqpy/docs/source/user/output/python/read.rst:504
msgid "CENTROID"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:713
msgid "If the requested field values are not found in the output database at the specified `odb_Enum::ELEMENT_NODAL` or `odb_Enum::CENTROID` positions, they are extrapolated from the field data at the `odb_Enum::INTEGRATION_POINT` position."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:716
#: ../../abqpy/docs/source/user/output/python/read.rst:509
msgid "Reading history output data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:718
#: ../../abqpy/docs/source/user/output/cpp/write.rst:386
#: ../../abqpy/docs/source/user/output/python/read.rst:511
#: ../../abqpy/docs/source/user/output/python/write.rst:257
msgid "History output is output defined for a single point or for values calculated for a portion of the model as a whole, such as energy. Depending on the type of output expected, the historyRegions repository contains data from one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:723
#: ../../abqpy/docs/source/user/output/python/read.rst:516
msgid "a material point"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:726
#: ../../abqpy/docs/source/user/output/cpp/write.rst:393
#: ../../abqpy/docs/source/user/output/python/read.rst:519
#: ../../abqpy/docs/source/user/output/python/write.rst:264
msgid "History data from an analysis cannot contain multiple points."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:728
#: ../../abqpy/docs/source/user/output/python/read.rst:521
msgid "The history data object model is shown in :numref:`odb-history-nls`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:735
#: ../../abqpy/docs/source/user/output/python/read.rst:528
msgid "The history data object model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:737
#: ../../abqpy/docs/source/user/output/python/read.rst:530
msgid "In contrast to field output, which is associated with a frame, history output is associated with a step. History output data are stored in the historyRegions repository under an OdbStep object. Abaqus creates keys to the historyRegions repository that describe the region; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:739
#: ../../abqpy/docs/source/user/output/cpp/read.rst:761
#: ../../abqpy/docs/source/user/output/python/read.rst:532
#: ../../abqpy/docs/source/user/output/python/read.rst:554
msgid "`'Node PART-1-1.1000'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:740
#: ../../abqpy/docs/source/user/output/python/read.rst:533
msgid "`'Element PART-1-1.2 Int Point 1'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:741
#: ../../abqpy/docs/source/user/output/python/read.rst:534
msgid "`'Assembly ASSEMBLY'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:743
#: ../../abqpy/docs/source/user/output/python/read.rst:536
msgid "The output from all history requests that relate to a specified point is collected in one HistoryRegion object. A HistoryRegion object contains multiple HistoryOutput objects. Each HistoryOutput object, in turn, contains a sequence of (**frameValue**, **value**) sequences. In a time domain analysis (**domain** = TIME) the sequence is a tuple of (**stepTime**, **value**). In a frequency domain analysis (**domain** = FREQUENCY) the sequence is a tuple of (**frequency**, **value**). In a modal domain analysis (**domain** = MODAL) the sequence is a tuple of (**mode**, **value**)."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:745
#: ../../abqpy/docs/source/user/output/python/read.rst:538
msgid "In the analysis that generated the Abaqus/CAE Visualization module tutorial output database, the user asked for the following history output:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:747
#: ../../abqpy/docs/source/user/output/python/read.rst:540
msgid "**At the rigid body reference point (Node 1000)**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:749
#: ../../abqpy/docs/source/user/output/python/read.rst:542
msgid "U"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:750
#: ../../abqpy/docs/source/user/output/python/read.rst:543
msgid "V"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:751
#: ../../abqpy/docs/source/user/output/python/read.rst:544
msgid "A"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:753
#: ../../abqpy/docs/source/user/output/python/read.rst:546
msgid "At the corner element"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:755
#: ../../abqpy/docs/source/user/output/python/read.rst:548
msgid "MISES"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:756
#: ../../abqpy/docs/source/user/output/python/read.rst:549
msgid "LE22"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:757
#: ../../abqpy/docs/source/user/output/python/read.rst:550
msgid "S22"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:759
#: ../../abqpy/docs/source/user/output/python/read.rst:552
msgid "The history output data can be retrieved from the HistoryRegion objects in the output database. The tutorial output database contains HistoryRegion objects that relate to the rigid body reference point and the integration points of the corner element as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:762
#: ../../abqpy/docs/source/user/output/python/read.rst:555
msgid "`'Element PART-1-1.1 Int Point 1'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:763
#: ../../abqpy/docs/source/user/output/python/read.rst:556
msgid "`'Element PART-1-1.1 Int Point 2'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:764
#: ../../abqpy/docs/source/user/output/python/read.rst:557
msgid "`'Element PART-1-1.1 Int Point 3'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:765
#: ../../abqpy/docs/source/user/output/python/read.rst:558
msgid "`'Element PART-1-1.1 Int Point 4'`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:767
#: ../../abqpy/docs/source/user/output/python/read.rst:560
msgid "The following statements read the tutorial output database and write the U2 history data from the second step to an ASCII file that can be plotted by Abaqus/CAE:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:790
#: ../../abqpy/docs/source/user/output/python/read.rst:575
msgid "The output in this example is a sequence of tuples containing the frame time and the displacement value. The example uses nodal history data output. If the analysis requested history output from an element, the output database would contain one HistoryRegion object and one HistoryPoint object for each integration point."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:793
#: ../../abqpy/docs/source/user/output/python/read.rst:675
msgid "An example of reading field data from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:795
msgid "The following program illustrates how you read model data and field output data from the output database used by the Abaqus/CAE Visualization module tutorial output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:797
msgid "Import the required modules:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:804
msgid "Open the output database used by the tutorial."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:810
msgid "Create a variable that refers to the last frame of the first step."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:819
msgid "Create a variable that refers to the displacement 'U' in the last frame of the first step."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:826
msgid "Create a variable that refers to the node set 'PUNCH' in the part instance'PART-1–1' :"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:835
msgid "Create a variable that refers to the displacement of the node set in the last frame of the first step:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/read.rst:842
msgid "Finally, print some field output data from each node in the node set (a single node in this example)."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:3
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:3
msgid "Abaqus Scripting Interface documentation style"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:5
msgid "This section describes the style that is used to describe a command in the :doc:`references`. You may want to refer to the :doc:`references` while you read this section and compare the style of a documented command with the descriptions provided here."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:7
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:10
msgid "The following list describes the order in which commands are documented in the :doc:`references`:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:9
msgid "Chapters are grouped alphabetically by functionality. In general, the functionality corresponds to the modules and toolsets that are found in Abaqus/CAE; for example, :doc:`reference/session/animation`, and :doc:`reference/mdb/model/part_assembly/assembly`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:10
msgid "Within each chapter the primary objects appear first and are followed by other objects in alphabetical order. For example, in :doc:`reference/mdb/model/mesh` the objects are listed in the following order:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:12
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:16
msgid "Assembly"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:13
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:17
msgid "Part"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:14
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:18
msgid "ElemType"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:15
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:19
msgid "MeshEdge"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:16
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:20
msgid "MeshElement"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:17
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:21
msgid "MeshFace"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:18
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:22
msgid "MeshNode"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:19
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:23
msgid "MeshStats"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:20
msgid "Within each object description, the commands are listed in the following order: - Constructors (in alphabetical order) - Methods (in alphabetical order) - Members"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:24
msgid "Some methods are not associated with an object and appear at the end of a chapter; for example, the :py:meth:`~abaqus.Material.evaluateMaterial` method appears at the end of :doc:`reference/mdb/model/material`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:27
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:34
msgid "Access"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:29
msgid "The description of each object in the :doc:`references` begins with a section that describes how you access an instance of the object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:31
msgid "The following is the access description for the Part object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:37
msgid "The access description specifies where instances of the object are located in the data model. The Part object can accordingly be accessed as:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:44
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:71
msgid "The Access description for the FieldOutput object is"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:50
msgid "The following statements show how you use the object described by this `Access` description:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:66
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:88
msgid "The next to last line shows the getSubset method of the FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:67
msgid "The last line shows the **validInvariants** member of the FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:70
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:92
msgid "Path"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:72
msgid "A method that creates an object is called a constructor. The Abaqus C++ API uses the convention that constructors begin with an uppercase character. In contrast, methods that operate on an object begin with a lowercase character. The description of each constructor in the :doc:`references` includes a path to the command. For example, the following describes the path to the Part constructor:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:78
msgid "Some constructors include more than one path. For example, you can create a nodeSet that is associated with either a Part object or the RootAssembly object, and each path is listed."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:85
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:107
msgid "The path is not listed if the method is not a constructor."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:87
msgid "If you are using the Abaqus C++ API to read data from an output database, the objects exist when you open the output database, and you do not have to use constructors to create them. However, if you are creating or writing to an output database, you may need to use constructors to create new objects, such as part instances and steps. The documentation describes the path to the constructors that create objects in an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:89
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:111
msgid "For example, the Path description for the FieldOutput constructor is"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:95
#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:117
msgid "The following statement creates a FieldOutput object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:107
msgid "Prototype"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:109
msgid ":doc:`reference/odb` contains a prototype section for each C++ command. The prototype provides the type returned by the command, the name of the command, and a list of all its arguments along with the type of each argument. Required arguments appear first in the list followed by default arguments along with their default value. For example, the Frame constructor is given as"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:116
msgid "indicating that the **incrementNumber** and **frameValue** arguments are required, that the optional **description** argument has a default value of the empty string, and that the method returns a reference to the Frame object created."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:121
msgid "All commands return a value. Many commands return the value void. Constructors (methods that create an object) always return the object being created. The return value of a command can be assigned to a variable. For example, in the following statement the Odb constructor returns an Odb object, and the variable newOdb refers to this new object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:127
msgid "You can use the object returned by a command in subsequent statements. The following statement uses the output database created by the previous statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/style.rst:134
msgid "If an exception is raised while a statement is executing, the command does not return a value."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:3
msgid "Utility interface"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:5
msgid "The Abaqus C++ API provides a set of utilities that allow a user to access certain commonly used functionality (such as strings, sequences (lists), and repositories) quickly and easily using a set of supported and maintained interfaces."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:7
msgid "The following interface classes are provided:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:9
#: ../../abqpy/docs/source/user/output/cpp/utility.rst:28
msgid "**Strings**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:11
msgid "The odb_String object provides a convenient means of storing and passing strings. The odb_String object also provides a simple interface to append and modify the data stored in the string."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:13
#: ../../abqpy/docs/source/user/output/cpp/utility.rst:37
msgid "**Sequences**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:15
msgid "An odb_Sequence class is a container used to hold an ordered list of objects of a specific type. Data can be appended and retrieved from the sequence.The following odb_Sequence objects are provided to store integer, float, and enumeration data:odb_SequenceIntodb_SequenceFloatodb_SequenceStringodb_SequenceInvariantodb_SequenceElementFaceSequences of sequences are also available in the following forms:odb_SequenceSequenceFloatodb_SequenceSequenceSequenceFloatodb_SequenceSequenceIntodb_SequenceSequenceElementFaceThe following Abaqus objects are also stored as sequences:odb_SequenceNodeodb_SequenceElementodb_SequenceFieldValueodb_SequenceFrameodb_SequenceSectionPointodb_SequenceLoadCaseThe following Abaqus object can be collected in a sequence for utility operations:odb_SequenceFieldOutput"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:17
#: ../../abqpy/docs/source/user/output/cpp/utility.rst:58
msgid "**Repositories**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:19
msgid "Repositories are provided to store objects retrieved by name. Both the repositories and the content of the repositories are created by the API; the user can only retrieve objects from repositories. Iterators are provided to navigate the repositories.The following Abaqus repositories are provided:odb_PartRepositoryodb_FieldOutputRepositoryodb_SectionCategoryRepositoryodb_HistoryRegionRepositoryodb_SetRepositoryodb_HistoryOutputRepositoryodb_StepRepositoryodb_InstanceRepository"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:21
msgid "More detail on these interface utility objects can be found in :doc:`reference/odb`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:24
msgid "Utility interface examples"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/utility.rst:26
msgid "The following examples demonstrate the utility interface for each of the utility interface classes discussed:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:3
#: ../../abqpy/docs/source/user/output/python/write.rst:3
msgid "Writing to an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:5
#: ../../abqpy/docs/source/user/output/python/write.rst:5
msgid "You can write your own data to an output database, and you can use Abaqus/CAE to view the data. Writing to an output database is very similar to reading from an output database. When you open an existing database, the Odb object contains all the objects found in the output database, such as instances, steps, and field output data. In contrast, when you are writing to a new output database, these objects do not exist. As a result you must use a constructor to create the objects. For example, you use the Part constructor to create a Part object, the Instance constructor to create an OdbInstance object, and the Step constructor to create an OdbStep object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:7
#: ../../abqpy/docs/source/user/output/python/write.rst:7
msgid "After you create an object, you use methods of the objects to enter or modify the data associated with the object. For example, if you are creating an output database, you first create an Odb object. You then use the Part constructor to create a part. After creating the part, you use the addNodes and addElements methods of the Part object to add nodes and elements, respectively. Similarly, you use the addData method of the FieldOutput object to add field output data to the output database. After creating an output database, you should use the save method on the Odb object to save the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:9
#: ../../abqpy/docs/source/user/output/python/write.rst:9
msgid "The example script in :doc:`user/output/python/examples:creating an output database` also illustrates how you can write to an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:12
#: ../../abqpy/docs/source/user/output/python/write.rst:12
msgid "Creating a new output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:14
#: ../../abqpy/docs/source/user/output/python/write.rst:14
msgid "You use the Odb constructor to create a new, empty Odb object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:21
#: ../../abqpy/docs/source/user/output/python/write.rst:23
msgid "For a full description of the Odb command, see :py:class:`~abaqus.Odb.Odb.Odb` object. Abaqus creates the RootAssembly object when you create or open an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:23
#: ../../abqpy/docs/source/user/output/python/write.rst:25
msgid "You use the `save` method to `save` the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:29
#: ../../abqpy/docs/source/user/output/python/write.rst:31
msgid "For a full description of the save command, see :py:meth:`~abaqus.Odb.OdbBase.OdbBase.save`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:32
#: ../../abqpy/docs/source/user/output/python/write.rst:34
msgid "Writing model data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:34
#: ../../abqpy/docs/source/user/output/python/write.rst:36
msgid "To define the geometry of your model, you first create the parts that are used by the model and then you add nodes and elements to the parts. You then define the assembly by creating instances of the parts. If the output database already contains results data, you should not change the geometry of the model. This is to ensure that the results remain synchronized with the model."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:38
#: ../../abqpy/docs/source/user/output/python/write.rst:40
msgid "If the part was created by Abaqus/CAE, the description of the native Abaqus/CAE geometry is stored in the model database, but it is not stored in the output database. A part is stored in an output database as a collection of nodes, elements, surfaces, and sets. You use the Part constructor to add a part to the Odb object. You can specify the type of the part; however, only DEFORMABLE_BODY is currently supported. For example,`"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:45
#: ../../abqpy/docs/source/user/output/python/write.rst:47
msgid "For a full description of the Part constructor, see :py:class:`~abaqus.Odb.OdbPart.OdbPart`. The new Part object is empty and does not contain geometry. After you create the Part object, you add nodes and elements."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:47
#: ../../abqpy/docs/source/user/output/python/write.rst:49
msgid "You use the addNodes method to add nodes by defining node labels and coordinates. You can also define an optional node set. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:73
#: ../../abqpy/docs/source/user/output/python/write.rst:58
msgid "For a full description of the addNodes command, see :py:meth:`~abaqus.Odb.OdbPart.OdbPart.addNodes`. After you have created nodes, you can use the NodeSetFromNodeLabels constructor to create a node set from the node labels. For more information, see :py:meth:`~abaqus.Odb.OdbPart.OdbPart.NodeSetFromNodeLabels`. Similarly, you use the addElements method to add elements to the part using a sequence of element labels, element connectivity, and element type. You can also define an optional element set and an optional section category. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:93
#: ../../abqpy/docs/source/user/output/python/write.rst:79
msgid "For a full description of the addElements command, see :py:meth:`~abaqus.Odb.OdbPart.OdbPart.addElements`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:95
#: ../../abqpy/docs/source/user/output/python/write.rst:81
msgid "**The RootAssembly object**"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:97
#: ../../abqpy/docs/source/user/output/python/write.rst:83
msgid "The root assembly is created when you create the output database. You access the RootAssembly object using the same syntax as that used for reading from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:103
#: ../../abqpy/docs/source/user/output/python/write.rst:89
msgid "You can create both instances and regions on the RootAssembly object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:107
#: ../../abqpy/docs/source/user/output/python/write.rst:93
msgid "You use the Instance constructor to create part instances of the parts you have already defined using the Part constructor. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:114
#: ../../abqpy/docs/source/user/output/python/write.rst:100
msgid "You can also supply an optional local coordinate system that specifies the rotation and translation of the part instance. You can add nodes and elements only to a part; you cannot add elements and nodes to a part instance. As a result, you should create the nodes and elements that define the geometry of a part before you instance the part. For a full description of the Instance command, see :py:class:`~abaqus.Odb.OdbInstance.OdbInstance`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:118
#: ../../abqpy/docs/source/user/output/python/write.rst:104
msgid "Region commands are used to create sets from element labels, node labels, and element faces. You can create a set on a part, part instance, or the root assembly. Node and element labels are unique within an instance but not within the assembly. As a result, a set on the root assembly requires the names of the part instances associated with the nodes and elements. You can also use region commands to create surfaces. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:140
#: ../../abqpy/docs/source/user/output/python/write.rst:118
msgid "The region commands are described in :doc:`reference/mdb/model/part_assembly/region."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:144
msgid "You use the Material object to list material properties.Materials are stored in the materials repository under the Odb object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:155
msgid "To create an isotropic elastic material, with a Young's modulus of 12000.0 and an effective Poisson's ratio of 0.3 in the output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:168
#: ../../abqpy/docs/source/user/output/python/write.rst:130
msgid "For more information, see :doc:`reference/mdb/material`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:172
msgid "You use the Section object to create sections and profiles.Sections are stored in the sections repository under the Odb object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:176
msgid "Extend the API commands available to the Odb object using the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:184
msgid "The following code creates a homogeneous solid section object. A Material object must be present before creating a Section object. An exception is thrown if the material does not exist."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:195
#: ../../abqpy/docs/source/user/output/python/write.rst:144
msgid "To create a circular beam profile object in the output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:205
#: ../../abqpy/docs/source/user/output/python/write.rst:154
msgid "You use the SectionAssignment object to assign sections and their associated material properties to regions of the model. SectionAssignment objects are members of the Odb object. For a full description of the assignSection method, see :py:meth:`~abaqus.Odb.OdbInstance.OdbInstance.assignSection`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:207
#: ../../abqpy/docs/source/user/output/python/write.rst:156
msgid "All Elements in an Abaqus analysis need to be associated with section and material properties. Section assignments provide the relationship between elements in an Instance object and their section properties. The section properties include the associated material name. To create an element set and assign a section:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:220
#: ../../abqpy/docs/source/user/output/python/write.rst:166
msgid "Writing results data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:222
#: ../../abqpy/docs/source/user/output/python/write.rst:168
msgid "To write results data to the output database, you first create the Step objects that correspond to each step of the analysis. If you are writing field output data, you also create the Frame objects that will contain the field data. History output data are associated with Step objects."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:226
#: ../../abqpy/docs/source/user/output/python/write.rst:172
msgid "You use the Step constructor to create a results step for time, frequency, or modal domain results. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:237
#: ../../abqpy/docs/source/user/output/python/write.rst:179
msgid "The `Step` constructor has an optional previousStepName argument that specifies the step after which this step must be inserted in the steps repository. For a full description of the Step command, see :py:class:`~abaqus.Step.Step.Step`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:241
#: ../../abqpy/docs/source/user/output/python/write.rst:183
msgid "You use the Frame constructor to create a frame for field output. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:247
#: ../../abqpy/docs/source/user/output/python/write.rst:190
msgid "For a full description of the Frame command, see :py:class:`~abaqus.Odb.OdbFrame.OdbFrame`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:250
#: ../../abqpy/docs/source/user/output/python/write.rst:193
msgid "Writing field output data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:252
#: ../../abqpy/docs/source/user/output/python/write.rst:195
msgid "A FieldOutput object contains a cloud of data values (e.g., stress tensors at each integration point for all elements). Each data value has a location, type, and value. You add field output data to a Frame object by first creating a FieldOutput object using the FieldOutput constructor and then adding data to the FieldOutput object using the `addData` method. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:282
#: ../../abqpy/docs/source/user/output/python/write.rst:234
msgid "For a full description of the FieldOutput constructor, see :py:class:`~abaqus.Odb.FieldOutput.FieldOutput`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:284
msgid "The **type** argument to the FieldOutput constructor describes the type of the data—tensor, vector, or scalar. The properties of the different tensor types are:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:286
msgid "Full tensor"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:288
msgid "A tensor that has six components and three principal values. Full three-dimensional rotation of the tensor is possible."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:290
msgid "Three-dimensional surface tensor"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:292
msgid "A tensor that has only three in-plane components and two principal values. Full three-dimensional rotation of the tensor components is possible."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:294
msgid "Three-dimensional planar tensor"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:296
msgid "A tensor that has three in-plane components, one out-of-plane component, and three principal values. Full three-dimensional rotation of the tensor components is possible."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:298
msgid "Two-dimensional surface tensor"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:300
msgid "A tensor that has only three in-plane components and two principal values. Only in-plane rotation of the tensor components is possible."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:302
msgid "Two-dimensional planar tensor"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:304
msgid "A tensor that has three in-plane components, one out-of-plane component, and three principal values. Only in-plane rotation of the tensor components is possible."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:306
msgid "The valid components and invariants for the different data types are given in Table 1."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:309
msgid "Data type"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:309
msgid "Components"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:309
msgid "Invariants"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:311
msgid "SCALAR"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:313
msgid "VECTOR"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:313
msgid "1, 2, 3"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:313
msgid "MAGNITUDE"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:315
msgid "TENSOR_3D_FULL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:315
msgid "11, 22, 33, 12, 13, 23"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:315
msgid "MISES, TRESCA, PRESS, INV3, MAX_PRINCIPAL, MID_PRINCIPAL, MIN_PRINCIPAL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:317
msgid "TENSOR_3D_SURFACE"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:317
#: ../../abqpy/docs/source/user/output/cpp/write.rst:321
msgid "11, 22, 12"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:317
#: ../../abqpy/docs/source/user/output/cpp/write.rst:321
msgid "MAX_PRINCIPAL, MIN_PRINCIPAL, MAX_INPLANE_PRINCIPAL, MIN_INPLANE_PRINCIPAL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:319
msgid "TENSOR_3D_PLANAR"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:319
#: ../../abqpy/docs/source/user/output/cpp/write.rst:323
msgid "11, 22, 33, 12"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:319
#: ../../abqpy/docs/source/user/output/cpp/write.rst:323
msgid "MISES, TRESCA, PRESS, INV3, MAX_PRINCIPAL, MID_PRINCIPAL, MIN_PRINCIPAL, MAX_INPLANE_PRINCIPAL, MIN_INPLANE_PRINCIPAL, OUTOFPLANE_PRINCIPAL"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:321
msgid "TENSOR_2D_SURFACE"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:323
msgid "TENSOR_2D_PLANAR"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:327
msgid "For example, the following statements add element data to the FieldOutput object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:367
msgid "For a full description of the `addData` command, see :py:meth:`~abaqus.Odb.FieldOutput.FieldOutput.addData`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:369
msgid "As a convenience, **localCoordSystem** can be a single transform or a list of transforms. If **localCoordSystem** is a single transform, it applies to all values. If **localCoordSystem** is a list of transforms, the number of items in the list must match the number of data values."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:372
#: ../../abqpy/docs/source/user/output/python/write.rst:237
msgid "Default display properties"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:374
#: ../../abqpy/docs/source/user/output/python/write.rst:239
msgid "The previous examples show how you can use commands to set the default field variable and deformed field variable. Abaqus/CAE uses the default field variable setting to determine the variable to display in a contour plot; for example, stress. Similarly, the default deformed field variable determines the variable that distinguishes a deformed plot from an undeformed plot. Typically, you will use displacement for the default deformed field variable; you cannot specify an invariant or a component. The default variable settings apply for each frame in the step. For example, the following statements use the deformation 'U' as the default setting for both field variable and deformed field variable settings during a particular step:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:381
msgid "You can set a different default field variable and deformed field variable for different steps."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:384
#: ../../abqpy/docs/source/user/output/python/write.rst:255
msgid "Writing history output data"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:389
#: ../../abqpy/docs/source/user/output/python/write.rst:260
msgid "an element, or a location in an element"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:395
#: ../../abqpy/docs/source/user/output/python/write.rst:266
msgid "The output from all history requests that relate to a specified point is collected in one HistoryRegion object. You use the HistoryPoint constructor to create the point. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:401
#: ../../abqpy/docs/source/user/output/python/write.rst:272
msgid "For a full description of the HistoryPoint command, see :py:class:`~abaqus.Odb.HistoryPoint.HistoryPoint`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:403
#: ../../abqpy/docs/source/user/output/python/write.rst:274
msgid "You then use the HistoryRegion constructor to create a HistoryRegion object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:410
#: ../../abqpy/docs/source/user/output/python/write.rst:283
msgid "For a full description of the HistoryRegion command, see :py:class:`~abaqus.Odb.HistoryRegion.HistoryRegion`."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:412
#: ../../abqpy/docs/source/user/output/python/write.rst:285
msgid "You use the HistoryOutput constructor to add variables to the HistoryRegion object."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:419
#: ../../abqpy/docs/source/user/output/python/write.rst:306
msgid "Each HistoryOutput object contains a sequence of (**frameValue**, **value**) sequences. The HistoryOutput object has a method (addData) for adding data. Each data item is a sequence of (**frameValue**, **value**). In a time domain analysis (**domain** = TIME) the sequence is (**stepTime**, **value**). In a frequency domain analysis (**domain** = FREQUENCY) the sequence is (**frequency**, **value**). In a modal domain analysis (**domain** = MODAL) the sequence is (**mode**, **value**)."
msgstr ""

#: ../../abqpy/docs/source/user/output/cpp/write.rst:421
#: ../../abqpy/docs/source/user/output/python/write.rst:308
msgid "You add the data values as time and data tuples. The number of data items must correspond to the number of time items. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/python.rst:3
msgid "Using the Abaqus Scripting Interface to access an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/python.rst:5
msgid "The following sections describe the architecture of an output database and how to use the Abaqus Scripting Interface to access data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/computations.rst:31
msgid "Use the addData method to add the new computed field objects to the new FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:3
msgid "Example scripts that access data from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:7
msgid "In addition, the Abaqus Scripting Interface examples, :doc:`user/about/examples/read_output` and :doc:`user/examples` illustrate how to read data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:12
msgid "This example illustrates how you can iterate through an output database and search for the maximum value of von Mises stress. The script opens the output database specified by the first argument on the command line and iterates through the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:18
msgid "In addition, you can supply an optional assembly element set argument from the command line, in which case the script searches only the element set for the maximum value of von Mises stress."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:20
msgid "The following illustrates how you can run the example script from the system prompt. The script will search the element set ALL ELEMENTS in the viewer tutorial output database for the maximum value of von Mises stress:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:28
msgid "If a command line argument is a String that contains spaces, some systems will interpret the String correctly only if it is enclosed in double quotation marks. For example, `\"ALL ELEMENTS\"`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:32
msgid "Use the following commands to retrieve the example script and the viewer tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:153
msgid "The following example illustrates how you can use the Abaqus Scripting Interface commands to do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:422
msgid "An Abaqus Scripting Interface version of FPERT"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:424
msgid "A Fortran program that reads the Abaqus results file and creates a deformed mesh from the original coordinate data and eigenvectors is described in `Creation of a perturbed mesh from original coordinate data and eigenvectors: FPERT <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-fpert.htm?contextscope=all>`_. This example illustrates an Abaqus Scripting Interface script that reads an output database and performs similar calculations."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:426
#: ../../abqpy/docs/source/user/output/python/examples.rst:682
msgid "The command line arguments provide the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:428
#: ../../abqpy/docs/source/user/output/python/examples.rst:684
msgid "**odbName**: The output database file name."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:429
msgid "**modeList**: A list of eigenmodes to use in the perturbation."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:430
msgid "**weightList**: The perturbation weighting factors."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:431
msgid "**outNameUser**: The output file name (optional)."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:504
msgid "Computations with FieldOutput objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:506
msgid "This example illustrates how you can operate on FieldOutput objects and save the computed field to the output database. The example script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:508
msgid "Retrieves two specified fields from the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:510
msgid "Computes a new field by subtracting the fields that were retrieved."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:511
msgid "Creates a new Step object in the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:512
msgid "Creates a new Frame object in the new step."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:513
msgid "Creates a new FieldOutput object in the new frame."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:514
msgid "Uses the `addData` method to add the computed field to the new FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:521
#: ../../abqpy/docs/source/user/output/python/examples.rst:569
#: ../../abqpy/docs/source/user/output/python/examples.rst:629
msgid "The fetch command also retrieves an input file that you can use to generate the output database that is read by the example script."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:555
msgid "Computations with FieldValue objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:557
msgid "This example illustrates how you can use the fieldValue operators to sum and average fieldValues in a region. The example script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:559
msgid "Retrieves the stress field for a specified region during the last step and frame of the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:560
msgid "Sums all the stress fieldValues and computes the average value."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:561
msgid "For each component of stress, print the sum and the average stress."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:611
msgid "Computations with HistoryOutput objects"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:613
msgid "This example illustrates how you can use the historyOutput operators to compute the displacement magnitude from the components. The example script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:615
msgid "Retrieves the node of interest using a nodeSet."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:616
msgid "Uses the node of interest to construct a HistoryPoint object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:617
msgid "Uses the HistoryPoint to retrieve the historyRegion."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:618
msgid "Computes the displacement magnitude history from the displacement component HistoryOutput objects in the historyRegion."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:619
msgid "Scales the displacement magnitude history using a predefined value."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:620
msgid "Prints the displacement magnitude history."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:673
msgid "Creating a new load combination from different load cases"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:675
msgid "This example illustrates how you can use the frame operators to create a new load combination from existing load cases. The example script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:677
msgid "Retrieves the information describing the new load combination from the command line."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:678
msgid "Retrieves the frames for each load case."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:679
msgid "Computes the new stresses and displacements."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:680
msgid "Saves data computed to the output database as a new load combination."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:685
msgid "**stepName**: The name of the step containing the load cases."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:686
msgid "**loadCaseNames**: The load case names."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:687
msgid "**scaling**: The scale factors to apply to each load case."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:695
#: ../../abqpy/docs/source/user/output/python/examples.rst:755
msgid "The fetch command also retrieves an input file that you can use to generate an output database that can be read by the example script."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:741
msgid "This example illustrates how you can use the envelope operations to compute the stress range over a number of load cases. The example script does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:743
msgid "For each load case during a specified step, the script collects the S11 components of the stress tensor fields into a list of scalar fields."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:791
msgid "Transformation of field results"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:793
msgid "This example illustrates how field results can be transformed to a different coordinate system. The example computes deviation of the nodal displacements with respect to a perfectly cylindrical displacement (cylinder bore distortion). The example does the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:795
msgid "Creates a cylindrical coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:796
msgid "Transforms the results to the new coordinate system."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:797
msgid "Computes the average radial displacement."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:798
msgid "Computes the distortion as the difference between radial displacement and the average radial displacement."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:799
msgid "Saves the distortion field to the output database for viewing."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:801
msgid "Use the following commands to retrieve the example script and an input file to create a sample output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:858
msgid "Viewing the analysis of a meshed beam cross-section"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:860
msgid "This example illustrates how you can view the results of a meshed beam cross-section analysis that was generated using Timoshenko beams, as described in `Meshed beam cross-sections <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEANLRefMap/simaanl-c-meshedsection.htm?contextscope=all>`_. Before you execute the example script, you must run two analyses that create the following output database files:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:862
msgid "An output database generated by the two-dimensional cross-section analysis. The script reads cross-section data, including the out-of-plane warping function, from this output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:863
msgid "An output database generated by the beam analysis. The script reads generalized section strains (SE) from this output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:871
msgid "You must run the script from Abaqus/CAE by selecting **File -> Run Script** from the main menu. The script uses `getInputs` to display a dialog box that prompts you for the name of the output databases generated by the two-dimensional cross-section analysis and by the beam analysis. The names are case-insensitive, and you can omit the `.odb` file suffix. The files must be in the local directory. The dialog box also prompts you for the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:873
msgid "The name of the step"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:874
msgid "The increment or mode number (for a frequency analysis)"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:875
msgid "The name of the load case (if any)"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:876
msgid "The name of the part instance"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:877
msgid "The element number"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:878
msgid "The integration point number"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:880
msgid "If you do not enter a value in a field, the script looks in the beam analysis output database for possible values. The script then enters a default value in the dialog box and displays information about the range of possible values in the Abaqus/CAE message area. You can leave the load case field blank if the analysis did not include load cases. The script does not continue until all the values in the dialog box are acceptable. The same values are written to a file called `compositeBeam_values.dat` in the local directory, and these values appear as defaults in the dialog box the next time you run the example script."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:882
msgid "After the `getInputs` method returns acceptable values, the script reads the two output databases and writes the generated data back to the output database created by the two-dimensional cross-section analysis. If the beam cross-section mesh consists of 1-DOF warping elements, the script then displays an undeformed contour plot of S11 and uses the getInputs method again to display a dialog box with a list of the available stress and strain components (S11, S22, S33, E11, E22, and E33). If the beam cross-section mesh consists of 3-DOF warping elements, the deformed contour plot is displayed, and the full three-dimensional stress and strain components (S11, S22, S33, S12, S13, S23, E11, E22, E33, E12, E13, and E23) are available. The deformation represents the in-plane and out-of-plane warping. Click **OK** in this dialog box to cycle through the available components. Click Cancel to end the script. You can also select the component to display by starting the Visualization module and selecting `Result -> Field Output` from the main menu."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:884
msgid "The example script writes new stress and strain fields. The script must provide a unique name for the generated field output because each of these fields is generated for a specific beam analysis output database and for a specific part instance, step, frame, element, and integration point. The script constructs this unique name as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:886
msgid "All contour stress and strain fields for a specific beam analysis output database are written to a new frame, where the description of the frame is the name of the output database. For example, for a beam analysis output database called `beam_run17.odb`, the frame description is **Beam ODB: beam_run17**."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:887
msgid "The field name is assembled from a concatenation of the **step name**, **frame index**, **instance name**, **element**, and **integration point**, followed by E or S. For example, `Step-1_4_LINEARMESHED_12_1_E`. Any spaces in a step or instance name are replaced by underscores."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:889
msgid "You can run the script many times; for example, to create contour data for a particular step, increment, and integration point along each element of the beam. In this case you would also use **Result -> Field Output** to select which element to display."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:891
msgid "The contour data generated by the example script are written back to the output database that was originally created by the two-dimensional, cross-section analysis. If you want to preserve this database in its original form, you must save a copy before you run the example script."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:894
msgid "Using infinite elements to compute and view the results of an acoustic far-field analysis"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:896
msgid "This example illustrates how you can use the Abaqus Scripting Interface to compute acoustic far-field pressure values from infinite element sets and project the results onto a spherical surface for visualization purposes. This script is designed primarily to compute the acoustic far-field pressure using a layer of infinite acoustic elements that forms a full or partial spherical surface. The script extends the acoustic analysis functionality within Abaqus/Standard, as described in `Acoustic, shock, and coupled acoustic-structural analysis <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEANLRefMap/simaanl-c-acoustic.htm?contextscope=all>`_ and `Infinite elements <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEELMRefMap/simaelm-c-infinite.htm?contextscope=all>`_. The script writes the acoustic far-field pressure values to an output database, and you can use Abaqus/CAE to view the far-field results."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:898
msgid "The far-field pressure is defined as"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:900
msgid "\\lim _{r \\rightarrow \\infty} p(r)=\\lim _{r \\rightarrow \\infty}\\left(\\frac{1}{k r} e^{-i k r} p_{F A R}\\right)\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:902
msgid "where :math:`p(r)` is the acoustic pressure at a distance :math:`r` from the reference point, :math:`k` is the wave number, and :math:`p_{F A R}` is the acoustic far-field pressure. The acoustic pressure decibel value is defined as"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:904
msgid "&\\mathrm{PORdB}=20 \\log _{10}\\left(\\frac{p_{R M S}}{d B R e f}\\right) \\\\\n"
"&p_{R M S}=\\left(\\frac{|\\mathrm{POR}|}{\\sqrt{2}}\\right)"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:909
msgid "where :math:`|\\mathrm{POR}|` is the magnitude of the acoustic pressure at a point, :math:`p_{R M S}` is the root mean square acoustic pressure, and :math:`d B R e f` is the decibel reference value given as user input. The far-field pressure decibel value is defined in the same manner as :math:`\\operatorname{POR} d B`, using the same reference value :math:`d B R e f)`"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:912
msgid "If :math:`d B R e f=20 \\mu P a` (in SI units), POR :math:`d B` corresponds to :math:`d B S P L`"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:914
msgid "The script also calculates the far-field acoustic intensity, which is defined as"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:916
msgid "\\mathrm{INTEN}_{\\mathrm{FAR}}=\\left(\\frac{p_{R M S F A R}^{2}}{\\rho\\times c}\\right)\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:918
msgid "where :math:`p_{R M S F A R}` is the far-field rms pressure, :math:`\\rho` is the fluid density, and :math:`c` is the speed of sound in the medium."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:920
msgid "Before you execute the script, you must run a direct-solution, steady-state dynamics acoustics analysis that includes three-dimensional acoustic infinite elements (ACIN3D3, ACIN3D4, ACIN3D6, and ACIN3D8). In addition, the output database must contain results for the following output variables:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:922
msgid "INFN, the acoustic infinite element normal vector."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:923
msgid "INFR, the acoustic infinite element “radius,” used in the coordinate map for these elements."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:924
msgid "PINF, the acoustic infinite element pressure coefficients."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:926
#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:35
msgid "Use the following command to retrieve the script:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:932
msgid "Enter the Visualization module, and display the output database in the current viewport. Run the script by selecting **File -> Run Script** from the main menu bar."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:934
msgid "The script uses getInputs to display a dialog box that prompts you for the following information:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:936
msgid "The name of the element set containing the infinite elements (the name is case sensitive). By default, the script locates all the infinite elements in the model and uses them to create the spherical surface. If the script cannot find the specified element set in the output database, it displays a list of the available element sets in the message area."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:938
msgid "The radius of the sphere (required). The script asks you to enter a new value if the sphere with this radius does not intersect any of the selected infinite elements."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:940
msgid "The coordinates of the center of the sphere. By default, the script uses (0,0,0)."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:942
msgid "The analysis steps. You can enter one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:944
msgid "An Int"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:945
msgid "A comma-separated list of Ints"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:946
msgid "A range; for example, 1:20"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:948
msgid "You can also enter a combination of Ints and ranges; for example, 4,5,10:20,30. By default, the script reads data from all the steps. The script ignores any steps that do not perform a direct-solution, steady-state dynamics acoustics analysis or that have no results."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:950
msgid "The frequencies for which output should be generated (Hz). You can enter a Float, a list of Floats, or a range. By default, the script generates output for all the frequencies in the original output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:952
msgid "A decibel reference value (required)."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:954
msgid "The name of the part instance to create (required). The script appends this name to the name of the instance containing the infinite elements being used."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:956
msgid "The speed of sound (required)."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:958
msgid "The fluid density (required)"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:960
msgid "Whether to write data to the original output database. By default, the script writes to an output database called `current-odb-name_acvis.odb`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:962
msgid "After the `getInputs` method returns acceptable values, the script processes the elements in the specified element sets. The visualization sphere is then determined using the specified radius and center. For each element in the infinite element sets, the script creates a corresponding membrane element such that the new element is a projection of the old element onto the surface of the sphere. The projection uses the infinite element reference point and the internally calculated infinite direction normal (INFN) at each node of the element."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:964
msgid "Once the new display elements have been created, the script writes results at the nodes in the set. The following output results are written back to the output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:966
msgid "POR, the acoustic pressure."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:967
msgid "PORdB, the acoustic pressure decibel value. If the reference value used is :math:`2\\times10^{-5}` Pa, the PFARdB corresponds to dB SPL."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:968
msgid "PFAR, the acoustic far-field pressure."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:969
msgid "PFARdB, the far-field pressure decibel value."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:970
msgid "INTEN_FAR, the far-field acoustic intensity."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:972
msgid "To create the output at each node, the script first determines the point at which the node ray intersects the sphere. Using the distance from the reference point to the intersection point and the element shape functions, the required output variables are calculated at the intersection point."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:974
msgid "After the script has finished writing data, it opens the output database containing the new data. For comparison, the original instance is displayed along with the new instance, but results are available only for the new instance. However, if you chose to write the results back to the original output database, the original instance and the new instance along with the original results and the new results can be displayed side-by-side. The script displays any error, warning, or information messages in the message area."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:976
msgid "You can run the script more than once and continue writing data to the same output database. For example, you can run the script several times to look at the far-field pressures at various points in space, and results on several spheres will be written to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:978
msgid "To see how the script operates on a single triangular-element model, use the following command to retrieve the input file:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:984
msgid "Use the following command to create the corresponding output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:990
msgid "The results from running the script twice using the single triangular-element model, changing the radius of the sphere, and writing the data back to the original output database are shown in :numref:`cmd-odb-api-acousticviz`"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:997
msgid "Displaying the acoustic pressure on several spheres."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:999
msgid "This model simulates the response of a sphere in \"breathing\" mode (a uniform radial expansion/compression mode). The model consists of one triangular ACIN3D3 element. Each node of the element is placed on a coordinate axis at a distance of :math:`1.0` from the origin that serves as the reference point for the infinite element. The acoustic material properties do not have physical significance; the values used are for convenience only. The loading consists of applying an in-phase pressure boundary condition to all the nodes. Under this loading and geometry, the model behaves as a spherical source (an acoustic monopole) radiating in the radial direction only. The acoustic pressure, :math:`p`, and the acoustic far-field pressure, :math:`p_{F A R}`, at a distance :math:`r` from the center of the sphere are"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1001
msgid "p(r)=p_{0}\\left(\\frac{r_{0}}{r}\\right) e^{-i k\\left(r-r_{0}\\right)}\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1003
#: ../../abqpy/docs/source/user/output/python/examples.rst:1013
msgid "and"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1005
msgid "p_{F A R}(r)=p_{0} r_{0} k e^{i k r_{0}}\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1007
msgid "where :math:`p_{0}` is the known acoustic pressure at some reference distance :math:`r_{0}` and :math:`k` is the wave number."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1009
msgid "For this single-element example, you should enter a value of :math:`1.0` for the speed of sound; thus, :math:`k=2 \\pi f`, where :math:`f` is the frequency in :math:`\\mathrm{Hz}`. :math:`r_{0}` in this model is 1 , and :math:`p_{0}` is :math:`0.001`. The equations for the acoustic pressure, :math:`p`, and the acoustic far-field pressure, :math:`p_{F A R}`, reduce to"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1011
msgid "p(r)=\\frac{0.001}{r} e^{-i k(r-1)}\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1015
msgid "p_{F A R}(r)=0.001 k e^{i k}.\n"
"\n"
""
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1018
msgid "An Abaqus Scripting Interface version of FELBOW"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1020
msgid "This example illustrates the use of an Abaqus Scripting Interface script to read selected element integration point records from an output database and to postprocess the elbow element results. The script creates X–Y data that can be plotted with the X–Y plotting capability in Abaqus/CAE. The script performs the same function as the Fortran program described in `Creation of a data file to facilitate the postprocessing of elbow element results: FELBOW <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXARefMap/simaexa-c-felbow.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1022
msgid "The script reads integration point data for elbow elements from an output database to visualize one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1027
msgid "The script creates either an ASCII file containing **X - Y** data or a new output database file that can be viewed using Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1029
msgid "To use option 2, you must ensure that the integration point coordinates (COORD) are written to the output database. For option 1 the **X** - data are data for the distance around the circumference of the elbow element, measured along the middle surface, and the **Y** - data are data for the output variable. For option 2 the **X - Y** data are the current coordinates of the middle-surface integration points around the circumference of the elbow element, projected to a local coordinate system in the plane of the deformed cross-section. The origin of the local system coincides with the center of the cross-section; the plane of the deformed cross-section is defined as the plane that contains the center of the cross-section."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1031
msgid "You should specify the name of the output database during program execution. The script prompts for more information, depending on the option that was chosen; this information includes the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1044
msgid "Before executing the script, run an analysis that creates an output database file containing the appropriate output. This analysis includes, for example, output for the elements and the integration point coordinates of the elements. Execute the script using the following command:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/examples.rst:1050
msgid "The script prompts for other information, such as the desired postprocessing option, part name, etc. The script processes the data and produces a text file or a new output database that contains the information required to visualize the elbow element results."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/exceptions.rst:5
msgid "Python exception handling in the output database is identical to that in the model database. Python exception handling is described in :doc:`user/python/python-abaqus/errors:exceptions handling`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/exceptions.rst:7
msgid "The exceptions thrown are of type OdbError; for example, the following script catches exceptions thrown when the python interface in not successful in opening an output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:3
msgid "Executing a script that accesses an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:5
msgid "If your script accesses and manipulates data in an output database, you can use either of the following methods to execute the script:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:7
msgid "Type abaqus python **scriptname.py** at the system prompt."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:8
msgid "Select **File -> Run Script** from the Abaqus/CAE main menu bar, and select the file to execute."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:10
msgid "Your script must contain the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:16
msgid "In addition, if your script refers to any of the Symbolic Constants defined in the Abaqus Scripting Interface, your script must contain the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/execute-script.rst:23
msgid "If your script accesses or creates material objects, or if it accesses or creates section or beam profile objects, it must contain the following statements, respectively:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:7
msgid "To improve the efficiency of scripts that access an output database, you should create objects that will be used to hold temporary variables that are accessed multiple times while the script is executing. For example, if the script accesses the temporary variable while inside a loop that is executed many times, creating an object to hold the variable will speed up your script significantly."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:9
msgid "The following example examines the von Mises stress in each element during a particular frame of field output. If the stress is greater than a certain maximum value, the script prints the strain components for the element."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:28
msgid "In this example every time the script accesses a strain component from **strainField.value**, Abaqus must reconstruct the sequence of FieldValue objects. This reconstruction could result in a significant performance degradation, particularly for a large model."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:30
msgid "A slight change in the script greatly improves its performance, as shown in the following example:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/improve-efficiency.rst:50
msgid "The second script replaces the statement strainField = frame.fieldOutputs['LE'] with the statement strainFieldValues = frame.fieldOutputs['LE'].values. As a result, Abaqus does not need to reconstruct the sequence of FieldValue objects each time the script accesses a strain component."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/need-what-to-understand.rst:5
msgid "To use the Abaqus Scripting Interface to access an output database, you need to understand the following:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/need-what-to-understand.rst:7
msgid "How an Abaqus analysis outputs data to the output database as well as the difference between field data, history data, and model data. The output database is described in detail in `Output to the Output Database <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEOUTRefMap/simaout-m-dboutput-sb.htm?contextscope=all#simaout-m-dboutput-sb>`_ and `Assembly definition <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEMODRefMap/simamod-c-partassy.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/need-what-to-understand.rst:8
msgid "How to program using Python. An introduction to the Python programming language is provided in :doc:`user/python/introduction`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/need-what-to-understand.rst:9
msgid "How to use Abaqus objects. Abaqus objects are explained in :doc:`user/python/python-abaqus`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/object-model.rst:17
msgid "The object model translates directly to the structure of an Abaqus Scripting Interface command. For example, the following command refers to a Frame object in the sequence of frames contained in an OdbStep object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/object-model.rst:31
msgid "You use commands to access objects by stepping through the hierarchy of objects in the object model. The `Access` and `Path` descriptions in :doc:`reference/odb` describe the interface definition of the command. The interface definition of the command reflects the hierarchy of objects in the object model. If you are unsure of the structure of the output database, you can issue the `objectname.__members__` command from the command line interface to view the members of an object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:6
msgid "An output database generated from an Abaqus analysis contains both model and results data."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:8
msgid "**Model data** Model data describe the parts and part instances that make up the root assembly; for example, nodal coordinates, set definitions, and element types."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:84
msgid "The objects stored as model data in an output database are similar to the objects stored in an Abaqus/CAE model database. However, the output database does not require a model name because an analysis job always refers to a single model and the resulting output database can contain only one model. For example, the following Abaqus Scripting Interface statements refer to an Instance object in the model database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:92
msgid "Similar statements refer to an Instance object in the output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:100
msgid "You can use the `prettyPrint` method to display a text representation of an output database and to view the structure of the model data in the object model. For example, the following shows the output from `prettyPrint` applied to the output database created by the Abaqus/CAE cantilever beam tutorial:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/output-object-model.rst:154
msgid "For more information, see :func:`~abaqus.TextRepresentation.TextRepr.prettyprint`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:5
msgid "The following sections describe how you use Abaqus Scripting Interface commands to read data from an output database."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:12
msgid "You are encouraged to copy the tutorial output database to a local directory and experiment with the Abaqus Scripting Interface. The output database and the example scripts from this guide can be copied to the user's working directory using the **abaqus fetch** utility:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:18
msgid "where **name.py** is the name of the script or **name.odb** is the name of the output database (see `Fetching sample input files <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-fetchproc.htm?contextscope=all>`_). For example, use the following command to retrieve the tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:28
msgid "To make the Odb commands available to your script, you first need to import the odbAccess module using the following statements:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:35
msgid "To make the material and section Odb commands available to your script, you also need to import the relevant module using the following statements:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:51
msgid "After you open the output database, you can access its contents using the methods and members of the Odb object returned by the openOdb method. In the above example the Odb object is referred to by the variable odb. For a full description of the openOdb command, see :func:`~odbAccess.openOdb`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:54
msgid "Reading model data"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:56
msgid "The following list describes the objects in model data and the commands you use to read model data. Many of the objects are repositories, and you will find the keys() method useful for determining the names of the objects in the repository. For more information, see :doc:`user/python/introduction/programming:using dictionaries` and :doc:`user/python/python-abaqus/types:repositories`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:68
msgid "Part instances are stored in the instances repository under the OdbAssembly object. The following statements display the repository keys of the part instances in the tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:129
msgid "The type of the object to which topNodeSet refers is OdbSet. After you create a variable that refers to a region, you can use the variable to refer to a subset of field output data, as described in :doc:`user/output/python/read:using regions to read a subset of field output data`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:179
msgid ":doc:`reference/mdb/model/material` describes the Material object commands in more detail."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:195
msgid "The Section object can be one of the various section types. The type command provides information on the section type. For example, to determine whether a section is of type homogeneous solid section and to print its thickness and associated material name:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:214
msgid "The Profile object can be one of the various profile types. The type command provides information on the profile type. For example, to output the radius of all circular profiles in the odb:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:225
msgid "Section assignments are stored in the odbSectionAssignmentArray repository under the OdbAssembly object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:243
msgid "**Analytical rigid surfaces**"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:245
msgid "Analytical rigid surfaces are defined under a OdbPart object or a OdbInstance object. Each OdbPart or OdbInstance can have only one analytical rigid surface."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:247
msgid "Rigid bodies"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:249
msgid "Rigid bodies are stored in the odbRigidBodyArray. The OdbPart object, OdbInstance object, and OdbAssembly object each have an odbRigidBodyArray."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:251
msgid "Pretension sections"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:253
msgid "Pretension sections are stored in odbPretensionSectionArray under the OdbAssembly object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:258
msgid "The following list describes the objects in results data and the commands you use to read results data. As with model data you will find it useful to use the `keys()` method to determine the keys of the results data repositories."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:278
msgid "An index of 0 in a sequence refers to the first value in the sequence, and an index of −1 refers to the last value. You can use the following syntax to refer to an individual item in a repository:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:319
msgid "Different variables can be written to the output database at different frequencies. As a result, not all frames will contain all the field output variables."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:321
msgid "You can use the following to view all the available field data in a frame:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:382
msgid "In turn, a FieldOutput object has a member **values** that is a sequence of FieldValue objects that contain data. Each data value in the sequence has a particular location in the model. You can query the FieldValue object to determine the location of a data value; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:408
msgid "The data in the FieldValue object depend on the field output variable, which is displacement in the above example. The following command lists all the members of a particular FieldValue object:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:425
msgid "Where applicable, you can obtain section point information from the FieldValue object."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:446
msgid "The arguments to getSubset are a region, an element type, a position, or section point data. The following is a second example that uses an element set to define the region and generates formatted output. For more information on tuples, the `len()` function, and the `range() `function, see :doc:`user/python/introduction/sequences` and :doc:`user/python/introduction/sequence operations`."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:499
msgid "Possible values for the position argument to the `getSubset` command are:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:506
msgid "If the requested field values are not found in the output database at the specified ELEMENT_NODAL or CENTROID positions, they are extrapolated from the field data at the INTEGRATION_POINT position."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:578
msgid "An example of reading node and element information from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:580
msgid "The following script illustrates how you can open the output database used by the Abaqus/CAE Visualization module tutorial output database and print out some nodal and element information. Use the following commands to retrieve the example script and the tutorial output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:677
msgid "The following script combines many of the commands you have already seen and illustrates how you read model data and field output data from the output database used by the Abaqus/CAE Visualization module tutorial. Use the following commands to retrieve the example script and the tutorial output database: .. code-block:: sh"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/read.rst:680
msgid "abaqus fetch job=odbRead abaqus fetch job=viewer_tutorial"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/write.rst:122
msgid "You use the Material object to list material properties.Materials are stored in the materials repository under the Odb object.To create an isotropic elastic material, with a Young's modulus of 12000.0 and an effective Poisson's ratio of 0.3 in the output database:"
msgstr ""

#: ../../abqpy/docs/source/user/output/python/write.rst:134
msgid "You use the Section object to create sections and profiles.Sections are stored in the sections repository under the Odb object.The following code creates a homogeneous solid section object. A Material object must be present before creating a Section object. An exception is thrown if the material does not exist."
msgstr ""

#: ../../abqpy/docs/source/user/output/python/write.rst:247
msgid "You can set a different default field variable and deformed field variable for different steps. You will need to use a loop to set the defaults for each step. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python.rst:3
msgid "Using the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/python.rst:5
msgid "This section provides an introduction to the Python programming language and a discussion of how you can combine Python statements and the Abaqus Scripting Interface to create your own scripts."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction.rst:3
msgid "Introduction to Python"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction.rst:5
msgid "This section provides a basic introduction to the Python programming language. You are encouraged to try the examples and to experiment with Python statements."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction.rst:7
msgid "The Python language is used throughout Abaqus, not only in the Abaqus Scripting Interface. Python is also used by Abaqus/Design to perform parametric studies and in the Abaqus/Standard, Abaqus/Explicit, and Abaqus/CAE environment file. For more information, see `Parametric Studies <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEANLRefMap/simaanl-m-ParametricStudies-sb.htm?contextscope=all>`_ and `Environment File Settings <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEEXCRefMap/simaexc-c-envfile.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/further-reading.rst:3
msgid "Further reading"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/further-reading.rst:5
msgid "This chapter has introduced only the basics of the Python programming language. You are encouraged to look at the standard Python documentation on the official Python website (https://www.python.org) for more information. In addition, you may find it beneficial to work through the online tutorial on the Python website. A Python reference book will go into more details on object-oriented programming techniques; see :doc:`python-resources` for a list of Python books."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/further-reading.rst:7
msgid "There are many resources available from the Python community. You should look at the official Python website (https://www.python.org) to see the various Python packages that are available publicly."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:3
msgid "Object-oriented basics"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:5
msgid "You need to understand some of the fundamentals of object-oriented programming to understand the terms used in this guide. The following is a brief introduction to the basic concepts behind object-oriented programming."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:7
msgid "Traditional procedural languages, such as Fortran and C, are based around functions or subroutines that perform actions. A typical example is a subroutine that calculates the geometric center of a planar part given the coordinates of each vertex."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:9
msgid "In contrast, object-oriented programming languages, such as Python and C++, are based around objects. An object encapsulates some data and functions that are used to manipulate those data. The data encapsulated by an object are called the members of the object. The functions that manipulate the data are called methods."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:11
msgid "An object can be modeled from a real-world object, such as a tire; or an object can be modeled from something more abstract, such as an array of nodes. For example, the data (or members) encapsulated by a tire object are its diameter, width, aspect ratio, and price. The functions or methods encapsulated by the tire object calculate how the tire deforms under load and how it wears during use. Members and methods can be shared by more than one type of object; for example, a shock absorber has a price member and a deformation method."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/oop-basics.rst:13
msgid "Classes are an important concept in object-oriented programming. Classes are defined by the programmer, and a class defines members and the methods that operate on those members. An object is an instance of a class. An object inherits the members and methods of the class from which it was instanced. You should read a Python text book for a thorough discussion of classes, abstract base classes, and inheritance."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:3
msgid "Programming techniques"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:5
msgid "The following sections introduce you to some of the techniques you will need to program with Python."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:8
msgid "Creating functions"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:10
msgid "You can define your own functions in Python. A function is like a subroutine in Fortran. You can pass arguments into a function, it performs the operation, and it can return one or more values. For example, the following function returns the distance of a point from the origin. The def statement starts a function definition."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:18
msgid "You supply the arguments to a function in parentheses; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:25
msgid "You can assign the return value to a variable:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:33
msgid "One of the methods provided by Abaqus uses as many as 50 arguments. Some of the arguments are required by the method; others are optional, and Abaqus provides an initial or default value. Fortunately, you can call a function or a method without providing every optional argument if you use Python's keyword arguments. A keyword specifies the argument that you are providing. Keyword arguments also make your scripts more readable. For example, the following defines a function called calculateCylinderVolume:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:42
msgid "You can call the function with the following line:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:48
msgid "Here the arguments are called positional arguments because you are relying on their position in the function call to determine the variable to which they are assigned in the function—radius followed by height."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:50
msgid "The following is the same statement using keyword arguments:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:56
msgid "Keyword arguments make your code more readable. In addition, if you use keyword arguments, you can enter the arguments in any order."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:62
msgid "You can define default values for an argument in a function definition. For example, the following sets the default value of radius to 0.5 and the default value of height to 1.0:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:71
msgid "You can now call the function without providing all the arguments. The function assigns the default value to any missing arguments."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:77
msgid "It is good programming practice to use a documentation string that indicates the purpose of a function and the arguments expected. A documentation string appears at the top of a function and is delimited by triple quotes \"\"\". You can use the __doc__ method to obtain the documentation string from a function while running the Python interpreter. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:99
msgid "You can retrieve the documentation string for the methods in the Abaqus Scripting Interface. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:113
msgid "The documentation string shows the name of each argument name and whether the argument is required or optional. The string also shows a brief description of the method."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:115
msgid "You can use the sys module to retrieve command line arguments and pass them to a function. For example, the following script takes two arguments—the X- and Y-coordinates of a point—and calculates the distance from the point to the origin. The script uses the following modules:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:117
msgid "The `sys` module to retrieve the command line arguments."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:119
msgid "The `math` module to calculate the square root."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:154
msgid "To use this script, do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:156
msgid "Copy the statements into a file called `distance.py` in your local directory."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:158
msgid "Type the following at the system prompt:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:164
msgid "Abaqus executes the script and prints the result."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:171
msgid "Using dictionaries"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:173
msgid "Dictionaries are a powerful tool in Python. A dictionary maps a variable to a set of data, much like a real dictionary maps a word to its definition, its pronunciation, and its synonyms. Dictionaries are similar to lists in that they are not homogeneous and can contain objects of any type. To access an object in a list, you provide the integer index that specifies the position of the object in the list. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:181
msgid "In contrast, you access an object in a dictionary through its key, which can be a string, an integer, or any type of immutable Python object. There is no implicit order to the keys in a dictionary. In most cases you will assign a string to the dictionary key. The key then becomes a more intuitive way to access the elements in a dictionary. You use square brackets and the dictionary key to access a particular object. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:191
msgid "You can add dictionary keys at any time."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:198
msgid "You use the key to access an item in a dictionary."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:209
msgid "Dictionaries are not sequences, and you cannot apply sequence methods such as slicing and concatenating to dictionaries. Dictionaries have their own methods. The following statement lists the methods of the dictionary myPart."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:217
msgid "The `keys()` method returns a list of the dictionary keys."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:224
msgid "The `values()` method returns a list of the values of each entry in the dictionary."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:231
msgid "The `items()` method returns a list of tuples. Each tuple contains the key and its value."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:239
msgid "You use the `has_key()` method to see if a key exists. A return value of 1 indicates the key exists in the dictionary. A return value of 0 indicates the key does not exist."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:246
msgid "Python's del statement allows you to delete a variable."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:252
msgid "You can also use del to delete an item from a dictionary."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:260
msgid "You can use the `keys()`, `values()`, or `items()` methods to loop through a dictionary. In the following example, `items()` returns two values; the first is assigned to property, and the second is assigned to setting."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:274
msgid "Reading and writing from files"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:276
msgid "Many of the file commands are built-in Python commands. You do not have to import a module to use file commands. You use the open() function to create a file."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:283
msgid "The first line opens an existing file in the crash_test directory called fender.txt. The file is opened in read-only mode; myInputFile is a variable that refers to a file object. The second line creates and opens a new file object in the local directory called peak_deflection.txt. This file is opened in read and write mode."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:285
msgid "Use the `__methods__` technique that we saw earlier to see the methods of a file object."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:295
msgid "The `readline()` method reads a single line from a file into a string, including the new line character that terminates the string. The `readlines()` method reads all the lines in a file into a list. The `write()` function writes a string to a file. Look at the standard Python documentation on the official Python website (https://www.python.org) for a description of functions that operate on files. File objects are described in the Built-in Types section of the Python Library Reference."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:297
msgid "The following example reads each line of a text file and changes the line to uppercase characters:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:316
msgid "The first line opens the input file; you do not need the `'r'` because read-only is the default access mode. The next line opens a new file to which you will write. You read the lines in the input file into a list. Finally, you enter a loop that converts each line to uppercase characters and writes the result to the output file. The final two lines close the files."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:319
msgid "Error handling"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:321
msgid "When a script encounters unusual circumstances, Python allows you to modify the flow of control through the script and to take the necessary action. The action of signaling a problem during execution is called raising or throwing an exception. Recognizing the problem is called catching an exception. Taking appropriate action is called exception handling."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:323
msgid "Python provides exception handling through the try and except commands. For example, the following statement attempts to open an existing file for reading:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:329
msgid "If the file does not exist, the statement fails, and Python displays the following error message:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:338
msgid "If you use exception handling, you can catch the error, display a helpful message, and take the appropriate action. For example, a revised version of the code attempts to open the same file within a try statement. If an IOError error is encountered, the except statement catches the IOError exception and assigns the exception's value to the variable error."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:349
msgid "You can raise your own exceptions by providing the error type and the error message to the raise statement. The following example script raises an exception and displays a message if the function myFunction encounters a problem."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:365
msgid "Exception handling is discussed in more detail in Error handling in the :doc:`references`."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:368
msgid "Functions and modules"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:370
msgid "When you start Python from a local window or from Abaqus/CAE, the Python interpreter is aware of a limited set of built-in functions. For example, try entering the following at the Python prompt:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:377
msgid "Python returns the number 8, indicating the length of the string `myName`. The `len()` function is a built-in function and is always available when you are using Python. To see a list of the built-in functions provided by Python, type `dir(__builtins__)` at the Python prompt."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:379
msgid "`dir(__builtins__)` is typed as dir(underscore underscorebuiltinsunderscore underscore). You have seen this underscore underscore notation already in Sequences."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:381
msgid "In addition, you can look at the standard Python documentation on the official Python website (http:www.python.org) for a list of built-in functions. Built-in functions are described in the Built-in Functions section of the Python Library Reference."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:383
msgid "Many functions, however, are not built-in; for example, most of the math functions, such as `sin()` and `cos()`, are not available when you start Python. Functions that are not built-in are defined in modules. Modules are a way of grouping functionality and are similar to a Fortran library of subroutines. For example, the following code could be the opening lines of a Python script. The code imports the Python module `sys` and uses the `argv` member of `sys` to print the command line arguments:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:391
msgid "You must first import the module to make its functions, names, and functionality available to the Python interpreter. Try the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:401
msgid "The first line imports all of the names from the math module. The second line uses `pi`, a float number defined in the math module. The third line refers to a `sin()` function. Python can use the `sin()` function because you imported it from the math module."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:403
msgid "To import only the `sin()` function, you could have typed"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:410
msgid "You need to import a module only once during a session. Once a module is imported, its functions, methods, and attributes are always available to you. You cannot unload a module after you import it."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:412
msgid "To see a list of all the functions that come with the math module, look at the Miscellaneous Services section of the Python Library Reference. You can download public-domain modules, and you can create your own modules."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:414
msgid "Python provides a second approach to importing modules. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:424
msgid "The `import` approach shown above imports the module as a unit, and you must qualify the name of an object from the module. To access a function from the `math` module in our example, you must prepend the function with `math.`; the `math.` statement is said to qualify the `sin()` function."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:426
msgid "What is the difference between the two approaches to importing modules? If two modules contain an object with the same name, Python cannot distinguish between the objects if you use the `from modulename import *` approach. If two objects have the same name, Python uses the object most recently imported. However, if you use the `import modulename` approach, modulename qualifies the name of the object and makes it unique."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:429
msgid "Writing your own modules"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:431
msgid "You can create your own module containing a set of Python functions. You can import this module and make use of its functions. The name of the module to import is the same as the name of the file containing the functions without the `.py` file suffix."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:433
msgid "For example, you can create a module called myUtilities by copying a modified version of the function that calculates the distance from a point to the origin into a file called myUtilities.py."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:456
msgid "You must import the module to make use of the functions and constants that it contains."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:464
msgid "You can use the `__doc__` method to obtain the documentation string from a module. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:471
msgid "A tool for finding bugs in your modules is provided with Abaqus. The tool is called pychecker. When you import a module, pychecker prints warnings for any problems it finds with the Python source code. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:481
msgid "For more information about `pychecker`, see the official Python website (https://www.python.org)"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/programming.rst:483
msgid "If you import a module during an interactive session using the command line interface and then make changes to the module, Python will not recognize your changes until you reload the module; for example:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:3
msgid "Python and Abaqus"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:5
msgid "Python is the standard programming language for Abaqus products and is used in several ways."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:7
msgid "The Abaqus environment file uses Python statements."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:9
msgid "The parameter definitions on the data lines of the `PARAMETER <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEKEYRefMap/simakey-r-parameter.htm?contextscope=all#simakey-r-parameter>`_ (\"Define parameters for input parametrization\") option in the Abaqus input file are Python statements."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:11
msgid "The parametric study capability of Abaqus requires the user to write and to execute a Python scripting (.psf) file."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:13
msgid "Abaqus/CAE records its commands as a Python script in the replay (.rpy) file."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:15
msgid "You can execute Abaqus/CAE tasks directly using a Python script. You can execute a script from Abaqus/CAE using the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:17
msgid "From the main menu bar."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:18
msgid "The Macro Manager."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:19
msgid "The command line interface (CLI)."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-abaqus.rst:21
msgid "You can access the output database (.odb) using a Python script."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:3
msgid "The basics of Python"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:5
msgid "The following sections introduce you to the basics of the Python language."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:8
msgid "Variable names and assignment"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:10
msgid "The expression"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:16
msgid "creates a variable called `myName` that refers to a String object."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:18
msgid "To see the value of a variable or expression, simply type the variable name or the expression at the Python prompt, and press **Enter**. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:31
msgid "Python creates a variable when you assign a value to it. Python provides several forms of the assignment statement; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:39
msgid "The second line assigns the string 'Einstein' to the variable myName and assigns the string 'Newton' to the variable yourName. The third line assigns the string 'Einstein' to both myName and yourName."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:41
msgid "The following naming rules apply:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:43
msgid "Variable names must start with a letter or an underscore character and can contain any number of letters, digits, or underscores. load_3 and _frictionStep are legal variable names; 3load, load_3$, and $frictionStep are not legal names. There is no limit on the length of a variable name."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:44
msgid "Some words are reserved and cannot be used to name a variable; for example, print, while, return, and class."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:45
msgid "Python is case sensitive. A variable named Load is different from a variable named load."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:47
msgid "When you assign a variable in a Python program, the variable refers to a Python object, but the variable is not an object itself. For example, the expression numSpokes=3 creates a variable that refers to an integer object; however, numSpokes is not an object. You can change the object to which a variable refers. numSpokes can refer to a real number on one line, an integer on the next line, and a viewport on the next line."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:49
msgid "The first example script in :doc:`/user/about/examples/create-part` created a model using the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:55
msgid "The constructor `mdb.Model(name='Model A')` creates an instance of a model, and this instance is a Python object. The object created is `mdb.models['Model A']`, and the variable myModel refers to this object."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:57
msgid "An object always has a type. In our example the type of `mdb.models['Model A']` is Model. An object's type cannot be changed. The type defines the data encapsulated by an object—its members—and the functions that can manipulate those data—its methods. Unlike most programming languages, you do not need to declare the type of a variable before you use it. Python determines the type when the assignment statement is executed. The Abaqus Scripting Interface uses the term object to refer to a specific Abaqus type as well as to an instance of that type; for example, a Model object refers to a Model type and to an instance of a Model type."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:60
msgid "Python data types"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:62
msgid "Python includes the following built-in data types:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:65
msgid "Integer"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:67
msgid "To create variables called i and j that refer to integer objects, type the following at the Python prompt:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:74
msgid "An integer is based on a C long and can be compared to a Fortran integer\\*4 or \\*8. For extremely large integer values, you should declare a long integer. The size of a long integer is essentially unlimited. The L at the end of the number indicates that it is a long integer."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:81
msgid "Use int(*n*) to convert a variable to an integer; use long(*n*) to convert a variable to a long integer."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:98
msgid "All Abaqus Scripting Interface object types begin with an uppercase character; for example, a Part or a Viewport. An integer is another kind of object and follows the same convention. The Abaqus Scripting Interface refers to an integer object as an Int. Similarly, the Abaqus Scripting Interface refers to a floating-point object as a Float."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:101
msgid "Float"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:103
msgid "Floats represent floating-point numbers or real numbers. You can use exponential notation for floats."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:113
msgid "A float is based on a C double and can be compared to a Fortran real\\*8. Use float(**n**) to convert a variable to a float."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:116
msgid "Complex"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:118
msgid "Complex numbers use the j notation to indicate the imaginary part of the number. Python provides methods to manipulate complex numbers. The conjugate method calculates the conjugate of a complex number."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:126
msgid "A complex number has two members, the real member and the imaginary member."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:136
msgid "Python provides complex math functions to operate on complex variables. You need to import the cmath module to use the complex square root function."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:145
msgid "Remember, functions of a type are called methods; data of a type are called members. In our example conjugate is a method of a complex type; a.real refers to the real member of a complex type."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:148
#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:170
msgid "Sequences"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:150
msgid "Sequences include strings, lists, tuples, and arrays. Sequences are described in :doc:`sequences` and :doc:`sequence-operations`."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:153
msgid "Determining the type of a variable"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:155
msgid "You use the `type()` function to return the type of the object to which a variable refers."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:172
msgid "Sequences are important and powerful data types in Python. A sequence is an object containing a series of objects. There are three types of built-in sequences in Python—list, tuple, and string. In addition, imported modules allow you to use arrays in your scripts. The following table describes the characteristics of list, tuple, string, and array sequences."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:174
msgid "Mutable: Elements can be added, changed, and removed."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:175
msgid "Homogeneous: Elements must be of the same type."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:176
msgid "Methods: The type has methods that can be used to manipulate the sequence; for example, `sort()`, `reverse()`."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:177
msgid "Syntax: The syntax used to create the sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:180
msgid "List"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:182
msgid "Lists are mutable heterogeneous sequences (anything that can be modified is called mutable). A list can be a sequence of strings, integers, floats, or any combination of these. In fact, a list can contain any type of object; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:189
msgid "You can refer to individual items from a sequence using the index of the item. Indices start at zero. Negative indices count backward from the end of a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:205
msgid "Lists are heterogeneous, which means they can contain objects of different type."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:211
msgid "A list can contain other lists."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:221
msgid "`myList[1][2]` refers to the third item in the second list. Remember, indices start at zero."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:228
msgid "Python has built-in methods that allow you to operate on the items in a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:241
msgid "The following are some additional built-in methods that operate on lists:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:243
msgid "`count()`"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:245
msgid "Return the number of times a value appears in the list."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:253
msgid "`index()`"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:255
msgid "Return the index indicating the first time an item appears in the list."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:264
msgid "`insert()`"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:266
msgid "Insert a new element into a list at a specified location."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:274
msgid "`reverse()`"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:276
msgid "Reverse the elements in a list."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:285
msgid "`sort()`"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:287
msgid "Sort the elements in a list."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:296
msgid "Tuple"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:298
msgid "Tuples are very similar to lists; however, they are immutable heterogeneous sequences, which means that you cannot change them after you create them. You can think of a tuple as a list that cannot be modified. Tuples have no methods; you cannot append items to a tuple, and you cannot modify or delete the items in a tuple. The following statement creates an empty tuple:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:304
msgid "The following statement creates a tuple with one element:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:310
msgid "You can use the `tuple()` function to convert a list or a string to a tuple."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:323
msgid "The following statements create a tuple and then try to change the value of an item in the tuple. An `AttributeError` error message is generated because a tuple is immutable."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:336
msgid "String"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:338
msgid "Strings are immutable sequences of characters. Strings are defined by single or double quotation marks. You can use the + operator to concatenate two strings and create a third string; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:351
msgid "You can also use the + operator to concatenate tuples and lists."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:353
msgid "Python provides a set of functions that operate on strings."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:364
msgid "As with all sequences, you use negative indices to index backward from the end of a string."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:372
msgid "Use the built-in str function to convert an object to a string."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:380
msgid "Look at the standard Python documentation on the official Python website (https://www.python.org) for a list of common string operations. String functions are described in the String Services section of the Python Library Reference."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:383
msgid "Array"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:385
msgid "Arrays are mutable homogeneous sequences. The numpy module allows you to create and operate on multidimensional arrays. Python determines the type of elements in the array; you do not have to declare the type when you create the array. For more information about the numpy module, see https://numpy.org."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:406
msgid "Sequence operations"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:408
msgid "Python provides a set of tools that allow you to operate on a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:411
msgid "Slicing"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:413
msgid "Sequences can be divided into smaller sequences. This operation is called slicing. The expression sequence[m:n] returns a copy of sequence from m to n−1. The default value for m is zero; the default value for n is the length of the sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:427
msgid "Repeat a sequence"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:439
msgid "Determine the length of a sequence"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:452
msgid "Concatenate sequences"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:466
msgid "Range"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:468
msgid "The `range()` function generates a list containing a sequence of integers. You can use the `range()` function to control iterative loops. The arguments to range are start (the starting value), end (the ending value plus one), and step (the step between each value). The start and step arguments are optional; the default start argument is 0, and the default step argument is 1. The arguments must be integers."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:480
msgid "Convert a sequence type"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:482
msgid "Convert a sequence to a list or a tuple."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:496
msgid "Python None"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:498
msgid "Python defines a special object called the None object or Python None that represents an empty value. The None object is returned by functions and methods that do not have a return value. The None object has no value and prints as None. For example"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:512
msgid "Continuation lines and comments"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:514
msgid "You can continue a statement on the following line if you break the statement between a set of (), {}, or [] delimiters. For example, look at the tuple that was used in :doc:`user/about/examples/creat-part` to assign the coordinates of the vertices to a variable:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:522
msgid "If a statement breaks at any other place, you must include a \\\\ character at the end of the line to indicate that it is continued on the next line. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:529
msgid "When you are running Python from a local Linux or Windows window, the prompt changes to the . . . characters to indicate that you are on a continuation line. Comments in a Python script begin with the # character and continue to the end of the line."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:538
msgid "Printing variables using formatted output"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:540
msgid "Python provides a print function that displays the value of a variable. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:551
msgid "The string modulus operator % allows you to format your output. The %s operator in the following example converts the variables to strings."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:558
msgid "The `%f` operator specifies floating point notation and indicates the total number of characters to print and the number of decimal places."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:565
msgid "The `%E` operator specifies scientific notation and indicates the number of decimal places."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:572
msgid "The following list includes some additional useful printing operators. The `+` flag indicates that a number should include a sign."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:575
msgid "The `\\\\n` escape sequence inserts a new line."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:577
msgid "The `\\\\t` escape sequence inserts a tab character."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:579
#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:14
msgid "For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:588
msgid "Control blocks"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:590
msgid "Python does not use a special character, such as }, to signify the end of a control block such as an if statement. Instead, Python uses indentation to indicate the end of a control block. You define the indentation that governs a block. When your script returns to the original indentation, the block ends. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:604
msgid "When you are using the Python interpreter from the Abaqus/CAE command line interface or if you are running Python from a local Linux or Windows window, the prompt changes to the \"...\"\" characters to indicate that you are in a block controlled by indentation."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:607
msgid "if, elif, and else"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:620
msgid "while"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:638
msgid "Use `continue` to skip the rest of the loop and to go to the next iteration."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:651
msgid "for"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-basics.rst:653
msgid "Use a sequence to control the start and the end of for loops. The `range()` function is an easy way to create a sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:3
msgid "Using the Python interpreter"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:5
msgid "Python is an interpreted language. This means you can type a statement and view the results without having to compile and link your scripts. Experimenting with Python statements is quick and easy. You are encouraged to try the examples in these tutorials on your workstation, and you should feel free to experiment with your own variations. To run the Python interpreter, do one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:7
msgid "If you have Abaqus installed on your Linux or Windows workstation, type abaqus python at the system prompt. Python enters its interpretive mode and displays the >>> prompt."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:13
msgid "You can enter Python statements at the >>> prompt. To see the value of a variable or expression, type the variable name or expression at the Python prompt. To exit the Python interpreter, type **Ctrl + D** on Linux systems or **Ctrl + Z + Enter** on Windows systems."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:15
msgid "You can also use Python to run a script directly by typing abaqus python **scriptname.py** at the system prompt. Abaqus will run the script through the Python interpreter and return you to the system prompt. For an example of running a Python script using Abaqus, see :doc:`programming/functions`."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:17
msgid "You can also use the Python interpreter provided in the command line interface by Abaqus/CAE. The command line is at the bottom of the Abaqus/CAE window and is shared with the message area. Abaqus/CAE displays the Python >>> prompt in the command line interface."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:20
msgid "Click |afxI_commandLine| in the lower left corner of the main window to display the command line interface. You may want to drag the handle at the top of the command line interface to increase the number of lines displayed."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:28
msgid "afxI_commandLine"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-interpreter.rst:26
msgid "If Abaqus/CAE displays new messages while you are using the command line interface, the message area tab turns red."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:3
msgid "Python resources"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:5
msgid "Python is an object-oriented programming language that is widely used in the software industry. A number of resources are available to help you learn more about the Python programming language."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:8
msgid "Python websites"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:10
msgid "The official Python website `https://www.python.org/ <https://www.python.org/>`_ contains a wealth of information on the Python programming language and the Python community. For new Python programmers the website contains links to:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:12
msgid "General descriptions of the Python language."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:13
msgid "Comparisons between Python and other programming languages."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:14
msgid "An introduction to Python."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:15
msgid "Introductory tutorials."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:17
msgid "The website also contains a reference library of Python functions to which you will need to refer."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:20
msgid "Python books"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:22
msgid "Altom, Tim, Programming With Python, Prima Publishing, ISBN: 0761523340."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:23
msgid "Beazley, David, Python Essential Reference (2nd Edition), New Riders Publishing, ISBN: 0735710910."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:24
msgid "Brown, Martin, Python: The Complete Reference, McGraw-Hill, ISBN: 07212718X."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:25
msgid "Brown, Martin, Python Annotated Archives, McGraw-Hill, ISBN: 072121041."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:26
msgid "Chun, Wesley J., Core Python Programming, Prentice Hall, ISBN: 130260363."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:27
msgid "Deitel, Harvey M., Python: How to Program, Prentice Hall, ISBN: 130923613."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:28
msgid "Gauld, Alan, Learn To Program Using Python, Addison-Wesley, ISBN: 201709384."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:29
msgid "Harms, Daryl D., and Kenneth McDonald, Quick Python Book, Manning Publications Company, ISBN: 884777740."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:30
msgid "Lie Hetland, Magnus, Practical Python, APress, ISBN: 1590590066."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:31
msgid "Lutz, Mark, Programming Python, O'Reilly & Associates, ISBN: 1565921976."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:32
msgid "Lutz, Mark, and David Ascher, Learning Python, Second Edition, O'Reilly & Associates, ISBN: 0596002815."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:33
msgid "Lutz, Mark, and Gigi Estabrook, Python: Pocket Reference, O'Reilly & Associates, ISBN: 1565925009."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:34
msgid "Martelli, Alex, Python in a Nutshell, O'Reilly & Associates, ISBN: 0596001886."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:35
msgid "Martelli, Alex, and David Ascher, Python Cookbook, O'Reilly & Associates, ISBN: 0596001673."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:36
msgid "Van Laningham, Ivan, Sams Teach Yourself Python in 24 Hours, Sams Publishing, ISBN: 0672317354."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:38
msgid "The books Python Essential Reference and Learning Python are recommended reading."
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:41
msgid "Python newsgroups"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:43
msgid "Discussions of Python programming can be found at:"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:45
msgid "comp.lang.python"
msgstr ""

#: ../../abqpy/docs/source/user/python/introduction/python-resources.rst:46
msgid "comp.lang.python.announce"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus.rst:3
msgid "Using Python and the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus.rst:5
msgid "This section explains how Python and the Abaqus Scripting Interface combine to provide a powerful interface to Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus.rst:7
msgid "The Abaqus Scripting Interface is an extension of the Python language and uses the syntax required by Python. Techniques for combining Python statements and Abaqus Scripting Interface commands are introduced, and numerous examples are provided. The syntax of an Abaqus command is explained along with details of how you use the commands to interact with Abaqus/CAE."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus.rst:9
msgid "This section is intended as a programmer's guide to using the Abaqus Scripting Interface; the :doc:`references` the details of each command."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:3
msgid "Error handling in the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:5
msgid "The basics of Python's exception handling apply to the Abaqus Scripting Interface. Python's exception handling is described in :doc:`/user/python/introduction/python-basics/errors`. If certain circumstances arise while a script is running, Python allows you to take the necessary action and still allows the script to continue. Alternatively, when Abaqus/CAE issues (or \"throws\") an exception and the exception is not handled by the script, Abaqus/CAE displays the exception message in the message area and the script stops executing."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:8
msgid "Standard Python exceptions"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:10
msgid "Python exceptions arise from either system-related problems, such as a disk or network error, or from programming errors, such as numeric overflow or reference to an index that does not exist. Standard Python exceptions are not described in this guide and are not listed as possible exceptions in the :doc:`references`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:12
msgid "Look at the standard Python documentation on the official Python website (`https://www.python.org <https://www.python.org>`_) for a list of standard Python exceptions. Standard exceptions are described in the Built-in Exceptions section of the Python Library Reference."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:15
msgid "Standard Abaqus Scripting Interface exceptions"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:17
msgid "Standard Abaqus Scripting Interface exceptions arise from errors in a script that relate to Abaqus/CAE. The standard Abaqus Scripting Interface exceptions that can be raised by a method are listed with each command in the :doc:`references`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:19
msgid "The standard Abaqus Scripting Interface exception types are listed below:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:21
msgid "**InvalidNameError**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:23
msgid "You specified an invalid name. Abaqus/CAE enforces a naming convention for objects that you create. Names must adhere to the following rules:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:25
msgid "Part, model, instance, set, surface, feature, and job names can have up to 80 characters; other object names can have up to 38 characters. Instance names of models that have been instantiated as model instances in another model still have a 38-character limit. For imported sets/surfaces, parts, and model instances, the names are generated internally in Abaqus/CAE by combining part/instance/set names. You must ensure that the combined length will not exceed 80 characters; otherwise, the data check analysis will fail."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:26
msgid "The name can include spaces and most punctuation marks and special characters; however, only 7-bit ASCII characters are supported."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:30
msgid "While Python allows most punctuation marks and special characters, some of the strings you provide will be used in an Abaqus input file; therefore, you cannot use the following characters: $&*~!()[]{}|;'`\",.?/\\ when you are naming an object, such as a part, a model or a job."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:32
msgid "The name must not begin with a number."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:33
msgid "The name must not begin or end with an underscore or a space."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:34
msgid "The name must not contain a period or a double quote."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:36
msgid "**RangeError**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:38
msgid "A numeric value is out of range."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:40
msgid "**AbaqusError**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:42
#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:46
msgid "Context-dependent message."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:44
msgid "**AbaqusException**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:50
msgid "The command descriptions in the :doc:`references` list the type of standard Abaqus Scripting Interface exceptions that can occur; however, the exception messages are not included with the command description."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:53
msgid "Additional Abaqus Scripting Interface exceptions"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:55
msgid "Each command in the :doc:`references` lists the standard Abaqus Scripting Interface exceptions that can be raised by a command. In addition, if the exception is not a standard Python or Abaqus Scripting Interface exception, the description lists the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:57
msgid "A brief description of the problem."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:58
msgid "The exception type."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:59
msgid "The exception message."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:61
msgid "For example, :numref:`cmd-int-exception-nls` shows the layout of a typical exception description in the online documentation."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:68
msgid "The layout of a typical exception description in the online documentation."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:70
msgid "You use the exception type in your error handling routines."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:73
msgid "Exception handling"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:75
msgid "The Python exception handling techniques described in Error handling apply to the Abaqus Scripting Interface. You should use the command description in the :doc:`references` to decide for which exception types you need to account. For example, the following Abaqus Scripting Interface script attempts to create a viewport and prints a message if the width or height are too small:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/errors.rst:92
msgid "The exception has been handled, and the script continues."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:3
msgid "Executing scripts"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:5
msgid "You have seen how to execute Python statements from the stand-alone Python interpreter. If your script does not access the functionality of Abaqus/CAE, you can run the script by typing `abaqus python scriptname.py` at the system prompt. Abaqus will run the script through the Python interpreter and return you to the system prompt."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:7
msgid "If your script accesses the functionality of any of the Abaqus/CAE modules, the statements must be interpreted by the Abaqus/CAE kernel; you cannot run the script from the Python interpreter invoked from the system prompt. You must execute the script in Abaqus/CAE by selecting **File -> Run Script** from the main menu bar and selecting the file to execute. In addition, the script must contain the following statements:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:14
msgid "If your script accesses and manipulates data in an output database, you can execute the script using either of the methods already described:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:16
msgid "Type `abaqus python scriptname.py` at the system prompt. The script must contain the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:22
msgid "Select FileRun Script from the Abaqus/CAE main menu bar, and select the file to execute. The script must contain the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/executing.rst:28
msgid "When you run a script in Abaqus/CAE from the CLI, as part of a macro, or from the **File -> Run Script** menu option, Abaqus/CAE displays a stop button that you can use to stop a script that has been running for a predefined duration. If you want to display this button for scripts run using other methods, execute the `showStopButtonInGui` command from the `abaqus` module before you run the script. The command is not issued automatically when a script is run from the user interface; for example, as part of a plug-in."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:3
msgid "Extending the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:5
msgid "You can extend the functionality of the Abaqus Scripting Interface by writing your own modules that contain classes and functions to accomplish tasks that are not directly available in Abaqus. For example, you can write a function to print the names of all materials that have a density specified, or you can write a function that creates a contour plot using a custom set of contour plot options. Creating functions and modules in Python is described in :doc:`/user/python/introduction/python-basics/functions` and :doc:`/user/python/introduction/python-basics/modules`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:7
msgid "This section describes how you can extend the functionality of the Abaqus Scripting Interface."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:10
msgid "Storing custom data in the model database or in other objects"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:12
msgid "If you extend the kernel functionality by writing your own classes and functions, you may want to store data required by those classes or functions in the Abaqus/CAE model database so the data are available the next time you open the database. To store custom kernel data in the Abaqus/CAE model database, you must make use of the `customKernel` module. The `customKernel` module augments the mdb object with a member called customData. When you save a model database, Abaqus/CAE also saves any data created below the customData object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:25
msgid "If you start a new session and open the model database, `custom-test.cae`, you can refer to the variables that you saved. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:34
msgid "You can store almost any type of Python object under `mdb.customData`; for example, strings, numbers, and Python classes. However, there are some restrictions; for example, you cannot store file objects. These restrictions are due to the fact that the Abaqus/CAE infrastructure uses Python’s `pickle` module to store the `customData` object in the model database. The `pickle` module allows the Python programmer to write a data structure to a file and then recreate that data structure when reading from the file. For details on the restrictions imposed by the `pickle` module, see the official Python website (https://www.python.org)."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:36
msgid "If your code creates a custom class and stores an instance of the class in the model database, the custom module that defined that custom class must be available for Python to unpickle the data when the database is subsequently opened. Consequently, if a user saves custom data to a model database and then passes that model database to another user, the other user must also have access to the custom modules that produced the custom data. Otherwise, they will not be able to load the custom data into their Abaqus/CAE session."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:38
msgid "Abaqus/CAE does not keep track of changes made to the `customData` object. As a result, when the user quits a session, Abaqus/CAE will not prompt them to save their changes if they changed only objects under `customData`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:41
msgid "Interaction with the GUI"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:43
msgid "In addition to providing a persistence mechanism, the `customKernel` module contains classes that provide the following capabilities:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:45
msgid "Querying custom kernel data values from the GUI. From a GUI script you can access some attribute of your custom kernel object, just as you would from the kernel. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:51
msgid "Notification to the GUI when custom kernel data change. For example, you can have a manager dialog box that lists the objects in a repository. When the contents of the repository change, you can be notified and take the appropriate action to update the list of objects in the manager dialog box."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:53
msgid "To make use of these features, you must derive your custom kernel objects from the classes listed in the following sections. For more details on GUI customization, see the `Abaqus GUI Toolkit Reference Guide <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEGUIRefHtml/simagui-c-ov.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:56
msgid "CommandRegister class"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:58
msgid "You can use the CommandRegister class to derive a general class that can be queried from the GUI. In addition, the class can notify the GUI when its contents change. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:68
msgid "If a query is registered by the GUI on an instance of this class, the GUI will be notified when a member of this instance is changed, added, or deleted, For more details on registering queries, see the `Abaqus GUI Toolkit Reference Guide <https://help.3ds.com/2021/english/dssimulia_established/SIMACAEGUIRefHtml/simagui-c-ov.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:70
msgid "If your object is to be stored in a repository (see below), the first argument to the constructor must be a string representing the name of the object. That string will automatically be assigned by the infrastructure to a member called name."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:73
#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:57
msgid "Repositories"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:75
msgid "Repositories are containers that hold objects that are keyed by strings. It may be convenient to store your custom kernel objects in repositories, in the same way that Abaqus/CAE part objects are stored in the Parts repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:77
msgid "The customData object is an instance of a `RepositorySupport` class, which provides a Repository method that allows you to create a repository as an attribute of the instance. For more information, see `RepositorySupport`. The arguments to the Repository method are the name of the repository and a constructor or a sequence of constructors. Those constructors must have name as their first argument, and the infrastructure will automatically assign that value to a member called name. Instances of these constructors will be stored in the repository. For more information, see Repository object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:79
msgid "Since repositories are designed to notify the GUI when their contents change, the objects placed inside them should be derived from either CommandRegister or `RepositorySupport` to extend this capability to its fullest."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:81
msgid "The Abaqus Scripting Interface uses the following conventions:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:83
msgid "The name of a repository is a plural noun with all lowercase letters."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:85
msgid "A constructor is a capitalized noun (or a combination of capitalized nouns and adjectives)."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:87
msgid "The first argument to the constructor must be name."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:89
msgid "For example, the Part constructor creates a part object and stores it in the parts repository. You can access the part object from the repository using the same name argument that you passed in with the Part constructor. In some cases, more than one constructor can create instances that are stored in the same repository. For example, the HomogeneousSolidSection and the HomogeneousShellSection constructors both create section objects that are stored in the sections repository. For more information, see Abstract base type. For example, the following script creates a blocks repository, and the Block constructor creates a block object in the blocks repository:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:104
msgid "Repository methods"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:106
msgid "Repositories have several useful methods for querying their contents, as shown in the following table:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:108
msgid "**keys()**:   Returns a list of the keys in the repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:109
msgid "**has_key()**:        Returns 1 if the key is found in the repository; otherwise, returns 0."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:110
msgid "**values()**:         Returns a list of the objects in the repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:111
msgid "**items()**:  Returns a list of key, value pairs in the repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:112
msgid "**changeKey(fromName, toName)**:      Changes the name of a key in the repository. This method will also change the name attribute of the instance in the repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:114
msgid "The following script illustrates some of these methods:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:151
msgid "RepositorySupport"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:153
msgid "You can use the `RepositorySupport` class to derive a class that can contain one or more repositories. However, if you do not intend to create a repository as an attribute of your class, you should derive your class from `CommandRegister`, not from `RepositorySupport`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:155
msgid "Using the `RepositorySupport` class allows you to create a hierarchy of repositories; for example, in the Abaqus Scripting Interface the parts repository is a child of the models repository. The first argument passed into your constructor is stored as `name`; it is created automatically by the infrastructure. To create a hierarchy of repositories, derive your class from `RepositorySupport` and use its `Repository` method to create child repositories as shown below. The  method is described in :doc:`extending:repositories`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:176
msgid "The path to the object being created can be found by calling repr(self) in the constructor of your object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:179
msgid "Registered dictionaries"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:181
msgid "You use the `RegisteredDictionary` class to create a dictionary that can be queried from the GUI. In addition, the infrastructure can notify the GUI when the contents of the dictionary change. The key of a registered dictionary must be either a String or an Int. The values associated with a key must all be of the same type—all integers or all strings, for example—to prevent errors when accessing them from the GUI. The `RegisteredDictionary` class has the same methods as a Python dictionary. In addition, the `RegisteredDictionary` class has a changeKey method that you use to rename a key in the dictionary. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:191
msgid "Registered lists"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:193
msgid "You use the `RegisteredList` class to create a list that can be queried from the GUI. In addition, the infrastructure can notify the GUI when the contents of the list change. The values in the list must all be of the same type—all integers or all strings, for example—to prevent errors when accessing them from the GUI. The values must all be of the same type; for example, all integers or all strings. The `RegisteredList` has the same methods as a Python list. For example, appending `Item-1` to the list in the following statements causes the infrastructure to notify the GUI that the contents of the list have changed:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:202
msgid "Registered tuples"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:204
msgid "You use the `RegisteredTuple` class to create a tuple that can be queried from the GUI. In addition, the infrastructure can notify the GUI when the contents of any of the members of the tuple change. The members in the tuple must derive from the `CommandRegister` class, and the values in the tuple must all be of the same type; for example, all integers or all strings. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:222
msgid "Session data"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:224
msgid "The `customKernel` module also provides a session.customData object that allows you to store data on the session object and query it from the GUI. Data stored on the session object persist only for the current Abaqus/CAE session. When you close the Abaqus/CAE session, Abaqus does not store any of the data below `session.customData` on the model database. As a result, these data will be lost, and you will not be able to retrieve these data when you start a new session and open the model database. The session object is useful for maintaining data relevant to the current session only, such as the current model or output database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:226
msgid "The same methods and classes that are available for `mdb.customData` are available for `session.customData`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:229
msgid "Saving application data in a model database"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:231
msgid "f you have custom kernel scripts that store data in a model database, you may want to store information about your application in the same model database. When the model database is opened subsequently, you can access this information and decide how to proceed. For example, you can store version information and check if you need to upgrade your data in the model database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:233
msgid "You use the appData object to store custom application-related data in the model database. The appData object is an instance of an AbaqusAppData class. You can add any attributes to the appData object that are necessary to track information about your custom application. The following example illustrates how you can store the version number of your application on the appData object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:243
msgid "You use the setAppData method to install an appData object as session.customData.appData and to associate it with your application name. For example:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:250
msgid "You can call the `setAppData` method only once per application name, which prevents unauthorized changes to the method. However, the `setAppData` method may be called multiple times using different application names to allow more than one application to register with the same model database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:252
msgid "When the user saves a model database, Abaqus copies the session.customData.appData object to the mdb.customData.appData object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:255
msgid "Checking a model database when it is opened"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:257
msgid "If you have custom kernel scripts that use custom data in a model database, you may want your application to verify some of the contents of a model database before it is fully opened. For example, you may want to check the database to see if you need to upgrade the data that is stored in it. In addition, you may need to initialize a new model database with your custom data. Two methods are provided for verifying and initializing a model database: `verifyMdb` and `initializeMdb`."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:259
msgid "**Verifying a model database**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:261
msgid "The `verifyMdb` method is used to verify the partial contents of a model database when it is opened. You must write the verifyMdb method and install it using the `setVerifyMdb` method. You can call the `setVerifyMdb` method only once per application name, which prevents unauthorized changes to the method. However, the `setVerifyMdb` method may be called multiple times using different application names to allow more than one application to register with the same model database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:263
msgid "When Abaqus opens a model database, its first action is to load only the mdb.`customData.appData` object and pass that object to each `verifyMdb` method registered in the session. If the model database has no appData, then Abaqus passes None to each `verifyMdb` method. Inside your `verifyMdb` method you can query the appData object to determine if you need to take any action, such as upgrading your data."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:265
msgid "**Initializing a model database**"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:267
msgid "If a script creates a new model database, you can initialize the model database with your custom objects using the `initializeMdb` method. Abaqus calls each `initializeMdb` method registered with the session whenever a new model database is created. You must write the `initializeMdb` method and install it using the `setInitializeMdb` method. You can call the `setInitializeMdb` method only once per application name, which prevents unauthorized changes to the method. However, the `setInitializeMdb` method may be called multiple times using different application names to allow more than one application to register with the same model database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:269
msgid "Kernel initialization scripts specified by the **startup** command line option are executed by Abaqus/CAE after it has finished its initialization process. By that time, a new model database or a database specified on the command line using the database option has already been opened. A utility method called `processInitialMdb` has been created to automatically process the initial model database for you. If the initial model database does not have any customData or does not have customData for your particular application, your `initializeMdb` method will be called. If the initial model database has customData for your application, your `verifyMdb` method will be called."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/extending.rst:271
msgid "The following example shows how you can use the `verifyMdb`, `intializeMdb`, and `processInitialMdb` methods. You should execute the example using the startup command line option when you start Abaqus/CAE. For more information, see Abaqus/CAE execution."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:3
msgid "Object-oriented programming and the Abaqus Scripting Interface"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:5
msgid "You should now be familiar with some of the concepts behind object-oriented programming, such as objects, constructors, methods, and members. This section describes how object-oriented programming relates to the Abaqus Scripting Interface and summarizes some of the terminology."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:8
msgid "The Abaqus Scripting Interface and methods"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:10
msgid "Most Abaqus Scripting Interface commands are methods. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:16
msgid "In this example `setValues()` is a method of the Viewport object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:18
msgid "A constructor is a method that creates an object. By convention, all constructor names and all objects start with an uppercase character in the Abaqus Scripting Interface. The name of a constructor is usually the same as the name of the type of object it creates. In the following example `Viewport` is a constructor that creates a Viewport object called `myViewport`:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:25
msgid "Some objects do not have a constructor. The object is created as a member of another object when the first object is created. For example, Abaqus creates the vertices of a part when you create a part's geometry, and the coordinates of the vertices are stored as Vertex objects. The Vertex objects are members of the Part object. The following statement prints the coordinates of the first vertex of a part:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:32
msgid "The standard Python statement `object.__methods__` lists all the methods of an object. For example, the following statement lists all the methods of a Viewport object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:38
msgid "See the :doc:`references` for a description of each method of the Abaqus Scripting Interface objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:41
msgid "The Abaqus Scripting Interface and members"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:43
msgid "An object has members as well as methods. A member can be thought of as a property of an object. For example, `width` is a member of the Viewport object. The following statements show how you access a member of an object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:50
msgid "The standard Python statement `object.__members__` lists all the members of an object. For example, the following statement lists all the members of a Viewport object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:56
msgid "The values of members are specific to each instance of the object. For example, the value of the `width` member of a Viewport object is specific to each viewport."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:58
msgid "Members of an Abaqus object are read-only; consequently, you cannot change their value with a simple assignment statement. You use the `setValues()` method to change the value of a member. For example, the `setValues()` statement in the following script changes the thickness of a shell section:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:73
msgid "You cannot use assignment to change the value of the Shell object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:80
msgid "The following statements illustrate the use of constructors, methods, and members:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:110
msgid "You use the `Access` description provided with each object in the :doc:`references` to determine how you access the object. You append a method or member to this description when you are writing a script. Similarly, you use the `Path` description provided with each constructor in the :doc:`references` to determine the path to the constructor."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:113
msgid "Object-oriented programming and the Abaqus Scripting Interface - a summary"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:115
msgid "After you create an object, you then use methods of the objects to enter or to modify the data associated with the object. For example, you use the `addNodes` and `addElements` methods of the Part object to add nodes and elements, respectively. Similarly, you use the `addData` method of the `FieldOutput` object to add field output data."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:117
msgid "The following list summarizes some of the concepts behind object-oriented programming and how they relate to the Abaqus Scripting Interface:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:119
msgid "An object encapsulates some data and functions that are used to manipulate those data."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:121
msgid "The data encapsulated by an object are called the members of the object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:123
msgid "The functions that manipulate the data are called methods."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:125
msgid "The Abaqus Scripting Interface uses the convention that the name of a type of object begins with an uppercase character; for example, a Viewport object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:127
msgid "A method that creates an object is called a constructor. The Abaqus Scripting Interface uses the convention that constructors begin with an uppercase character. In contrast, methods that operate on an object begin with a lowercase character."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:129
msgid "After you create an object, you then use methods of the object to enter or to modify the data associated with the object. For example, if you are creating an output database, you first create an Odb object. You then use the `addNodes` and `addElements` methods of the Part object to add nodes and elements, respectively. Similarly, you use the `addData` method of the `FieldOutput` object to add field output data to the output database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:131
msgid "You use the `Access` description provided with each object in the :doc:`references` to determine how you access the object. You append a method or a member to this description when you are writing a script."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:133
msgid "You use the `Path` description provided with each constructor in the :doc:`references` to determine the path to the constructor."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/oop.rst:135
msgid "You use the `setValues()` method to modify the members of an Abaqus Scripting Interface object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:5
msgid "This section describes the style that is used to describe Abaqus Scripting Interface commands. The commands are found in the :doc:`references`. You may want to refer to the :doc:`references` while you read this section and compare the style of a documented command with the descriptions provided here."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:8
msgid "How the commands are ordered"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:12
msgid "Chapters are grouped alphabetically by functionality. In general, the functionality corresponds to the modules and toolsets that are found in Abaqus/CAE; for example, Amplitude commands, Animation commands, and Assembly commands."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:14
msgid "Within each chapter the primary objects appear first and are followed by other objects in alphabetical order. For example, in Mesh commands the objects are listed in the following order:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:25
msgid "Within each object description, the commands are listed in the following order:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:27
msgid "Constructors (in alphabetical order)"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:28
msgid "Methods (in alphabetical order)"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:29
msgid "Members"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:31
msgid "Some methods are not associated with an object and appear at the end of a chapter; for example, the `evaluateMaterial()` method appears at the end of :doc:`references/mdb/model/material` commands."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:36
msgid "The description of each object in the :doc:`references` begins with a section that describes how you access an instance of the object. The import statements are provided for completeness. Abaqus/CAE imports all modules when you start a session, and you do not need to include the `import module name` statement in your scripts. However, you must import the Abaqus Scripting Interface Symbolic Constants with the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:42
msgid "These should be the first statement in all your Abaqus Scripting Interface scripts."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:44
msgid "The following is the access description for the Material object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:51
msgid "The first line of the access description indicates the module that Abaqus/CAE imported to make this object, and its methods and members, available to your script."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:53
msgid "The access description also specifies where instances of the object are located in the data model. In the previous example the second line indicates how your script can access Material objects from a particular model. You must qualify a material object, command, or member with the variable mdb, as described in Functions and modules. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:62
msgid "Similarly, if you are reading from an output database, the following is the access description for the HistoryRegion object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:69
msgid "The first line indicates that Abaqus/CAE imported the odbAccess module to make the Odb objects, methods, and members available to your Abaqus Scripting Interface script. The second line indicates how your script can access HistoryRegion objects from a particular step."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:77
msgid "The following statements show how you use the object described by this Access description:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:89
msgid "The last line shows the validInvariants member of the FieldOutput object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:94
msgid "A method that creates an object is called a constructor. The Abaqus Scripting Interface uses the convention that constructors begin with an uppercase character. In contrast, methods that operate on an object begin with a lowercase character. The description of each constructor in the :doc:`references` includes a path to the command. For example, the following describes the path to the Viewport constructor:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:100
msgid "Some constructors include more than one path. For example, you can create a datum that is associated with either a Part object or the RootAssembly object, and each path is listed."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:109
msgid "If you are using the Abaqus Scripting Interface to read data from an output database, the objects exist when you open the output database, and you do not have to use constructors to create them. However, if you are creating or writing to an output database, you may need to use constructors to create new objects, such as part instances and steps. The documentation describes the path to the constructors that create objects in an output database."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:126
msgid "Arguments"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:128
msgid "The ellipsis `(...)` in the command description indicates that the command takes one or more arguments. For example, the Viewport constructor takes arguments."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:134
msgid "In contrast, the `makeCurrent` method takes no arguments."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:140
msgid "Some arguments of a command are required, and some arguments are optional. In the :doc:`references` the required arguments are listed first, followed by the optional arguments. If the argument is optional, the default value is provided. The default value is the value of an optional argument when you call a method and omit the argument."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:142
msgid "The `setValues` method is a special case. All of the arguments to the `setValues` method are optional, but any argument that you omit retains its current value; Abaqus does not assign a default value to the argument."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:144
msgid "Some objects have no constructors; Abaqus creates the objects for you. For such objects the documentation describes the initial value of an optional argument. The initial value given for the argument is the initial value assigned to the corresponding member when Abaqus creates the object. For example, the defaultViewportAnnotationOptions object has no constructor; Abaqus creates the defaultViewportAnnotationOptions object when you start a session. When you create a new viewport, the settings are copied from the current viewport."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:146
msgid "You can use the `setValues` method to modify the value of a member; for example, to modify the value of the triad member of the defaultViewportAnnotationsOptions object. When you call session."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:152
msgid "the value of the triad member is set to off. The other member values remain unchanged; this behavior is called \"as is\" behavior because the values remain \"as is.\" The `setValuesInStep` method displays similar \"as is\" behavior."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:154
msgid "Keyword and positional arguments are described in Creating functions. We recommend that you use keyword arguments since they can be supplied in any order and they make your scripts easier to read and debug; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:161
msgid "If you choose not to use keywords, the arguments must be provided in the order in which they are documented."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:168
msgid "You can use a combination of keyword and positional arguments. Keyword arguments can be supplied after positional arguments; however, positional arguments cannot be entered after keyword arguments. For example, you can use the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:175
msgid "However, you cannot use the following statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:182
msgid "You will find it easier to use keyword arguments so that you do not have to concern yourself with the positional requirements."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:187
msgid "All commands return a value. Many commands return the None object described in :doc:`/user/python/introduction/python-basics/none`. Constructors (methods that create an object) always return the object being created. The return value of a command can be assigned to a Python variable. For example, in the following statement the Viewport constructor returns a Viewport object, and the variable `newViewport` refers to this new object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/style.rst:194
msgid "You can use the object returned by a command in subsequent statements. For example, the `titlebar` member of a Viewport object is a Boolean specifying whether the viewport title bar is displayed and can have a value of either ON or OFF. The following statement tests the titlebar member of the new viewport created by the previous statement:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:3
msgid "Abaqus Scripting Interface data types"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:5
msgid "This section describe the most common Abaqus Scripting Interface data type The standard :doc:`/user/python/introduction/python-basics/types` described in Python data types include integers, floats, strings, and sequences. The Abaqus Scripting Interface adds over 500 additional data types."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:8
msgid "SymbolicConstants"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:10
msgid "Some arguments require that you provide a SymbolicConstant. SymbolicConstants are defined by the Abaqus Scripting Interface and are written in all capital letters. If your script uses a SymbolicConstant defined by the Abaqus Scripting Interface, you must import the SymbolicConstant with the following statement before you refer to it:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:16
msgid "When an argument to a command is a SymbolicConstant, the description in the :doc:`references` lists all its possible values. For example, when you are printing an image, the image can be rendered in one of the following formats: BLACK_AND_WHITE, GREYSCALE, or COLOR."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:18
msgid "Similarly, a data member can be a SymbolicConstant. For example, the type member of the Elastic object can be one of the following SymbolicConstants: ISOTROPIC, ORTHOTROPIC, ANISOTROPIC, ENGINEERING_CONSTANTS, LAMINA, TRACTION, or COUPLED_TRACTION."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:20
msgid "If the SymbolicConstants provided by the Abaqus Scripting Interface do not meet your needs, you can create your own SymbolicConstants using the SymbolicConstant constructor. For more information, see SymbolicConstant object."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:23
msgid "Booleans"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:25
msgid "Python defines two Boolean values, True and False. The type of a Python Boolean is <type 'bool'>."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:33
msgid "In addition, the Abaqus Scripting Interface defines a Boolean object, derived from the SymbolicConstant object, which can take the values ON and OFF. For example, `noPartsInputFile` is a member of a Model object that indicates whether the input file will be written with parts and assemblies. The type of the `noPartsInputFile` member is <type 'AbaqusBoolean'>."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:35
msgid "Abaqus recommends that you use the Python Boolean in your scripts and that you convert existing scripts to use the Python Boolean."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:37
msgid "The value of a Boolean argument can appear to be ambiguous; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:47
msgid "Because of this ambiguity, you should test a Boolean for a positive or negative value, as opposed to comparing it to a specific value like 0, OFF, or False. For example, the following statements show how you should test the value of a Boolean member:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:59
msgid "Repositories are containers that store a particular type of object; for example, the steps repository contains all the steps defined in the model. A repository maps to a set of information and is similar to a Python dictionary; for more information, see :doc:`/user/python/introduction/python-basics/dictionaries`. However, only a constructor can add an object to a repository. In addition, all the objects in a repository are of the same type. For example, the following repository contains all the models in the model database:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:65
msgid "In turn, the following repository contains all the parts in the model `Model-1`:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:71
msgid "As with dictionaries, you can refer to an object in a repository using its key. The key is typically the name you provided in the constructor command when the object was created. For example, the Viewport constructor creates a new Viewport object in the viewports repository."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:78
msgid "The key to this new Viewport object in the viewports repository is Side view. You use this key to access this particular Viewport object. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:84
msgid "You can make your scripts more readable by assigning a variable to an object in a repository. For example, you could rewrite the previous statement after assigning the Viewport object to the variable myViewport:"
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:92
msgid "In general, if the user can create the object, its repository key is a string. In some cases Abaqus/CAE creates an object, and the key can be a string, an integer, or a SymbolicConstant."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:94
msgid "As with dictionaries, you can use the keys() method to access the repository keys."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:108
msgid "You can use the `keys()[i]` method to access an individual key; however, most repositories are not ordered, and this is not recommended."
msgstr ""

#: ../../abqpy/docs/source/user/python/python-abaqus/types.rst:110
msgid "You can use the `changeKey()` method to change the name of a key in a repository. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts.rst:3
msgid "Using the Abaqus Scripting Interface with Abaqus/CAE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts.rst:5
msgid "This section discusses how you can use the Abaqus Scripting Interface to control Abaqus/CAE models and analysis jobs."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:3
msgid "Using Abaqus Scripting Interface commands in your environment file"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:5
msgid "The Abaqus environment file is read by Abaqus/CAE when you start a session. The environment file can contain Abaqus Scripting Interface commands. The following is an example environment file:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:47
msgid "The `addImportCallback` statement instructs Abaqus to call a function when the user first imports a module. In this example Abaqus calls the `setJobPreferences` function when the user first enters the Job module, and Abaqus calls the `setVisPreferences` function when the user first enters the Visualization module. The `setJobPreferences` function creates a queue on a remote host. The `setVisPreferences` function sets default options for contour plots."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:49
msgid "The example environment file uses the `onCaeStartup()` function to control a set of Python statements that are executed when Abaqus/CAE first starts. The environment file can also contain the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:51
msgid "The `onJobStartup()` function controls a set of statements that execute when an analysis job starts. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:61
msgid "The onJobCompletion() function controls a set of statements that execute when an analysis job completes. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:77
msgid "The following variables are available to the `onJobStartup()` and `onJobCompletion()` functions:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:79
msgid "**id**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:81
msgid "The job identifier that was specified as the value of the job option from the command line."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:83
msgid "**savedir**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:85
msgid "The path to the directory from which the job was submitted."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:87
msgid "**scrdir**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:89
msgid "The path to the scratch directory."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:91
msgid "**analysisType**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:93
msgid "The type of analysis to be executed. Possible values are STANDARD and EXPLICIT."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:95
msgid "For a list of the variables that are available outside of the `onJobStartup()` and `onJobCompletion()` functions, see Job variables."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/environment-file.rst:97
msgid "For more information on the environment file, see `Environment File Settings <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEEXCRefMap/simaexc-c-envfile.htm?contextscope=all>`_ and `Customizing the Abaqus environment <https://help.3ds.com/2021/English/DSSIMULIA_Established/SIMACAEILGRefMap/simailg-m-Environment-sb.htm?contextscope=all>`_."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:3
msgid "Interacting with Abaqus/Standard and Abaqus/Explicit"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:5
msgid "The Job commands include methods that allow you to submit jobs to Abaqus/Standard and Abaqus/Explicit. This section describes how you can interact with Abaqus/Standard and Abaqus/Explicit and synchronize your scripts with the analysis job."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:8
msgid "Processing messages from Abaqus/Standard and Abaqus/Explicit"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:10
msgid "You can use the `addMessageCallback` method to associate an event-driven function with a particular message that is retrieved from Abaqus/Standard or Abaqus/Explicit. When Abaqus/CAE retrieves the specific message from Abaqus/Standard or Abaqus/Explicit, the function executes and takes the necessary action. This type of function is called a callback function. The `addMessageCallback` method specifies which callback function to use for which message."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:12
msgid "The arguments to `addMessageCallback` are:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:14
msgid "The name of the job to monitor for messages."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:15
msgid "The message from Abaqus/Standard or Abaqus/Explicit that causes the callback function to execute."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:16
msgid "The name of the callback function."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:17
msgid "An object to pass to the callback function."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:19
msgid "These arguments allow you to associate the callback function with both a particular job and a particular message. Alternatively, you can associate the callback function with all jobs and all messages. The commands are described in :doc:`reference/kernel/messaging`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:21
msgid "The interface definition of the callback function is"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:27
msgid "The arguments to the callback function are:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:29
msgid "**jobName**: A String specifying the name of the job to be monitored. You can also use the SymbolicConstant ANY_JOB that specifies that the callback function will monitor messages from all jobs."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:30
msgid "**messageType**: A SymbolicConstant specifying the message type that will call the callback function. You can also use the SymbolicConstant ANY_MESSAGE_TYPE that specifies that all messages will call the callback function. The following is a list of the message types issued by Abaqus/Standard and Abaqus/Explicit:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:32
msgid "ABORTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:33
msgid "ANY_JOB"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:34
msgid "ANY_MESSAGE_TYPE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:35
msgid "COMPLETED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:36
msgid "END_STEP"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:37
msgid "ERROR"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:38
msgid "HEADING"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:39
msgid "HEALER_JOB"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:40
msgid "HEALER_TYPE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:41
msgid "INTERRUPTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:42
msgid "ITERATION"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:43
msgid "JOB_ABORTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:44
msgid "JOB_COMPLETED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:45
msgid "JOB_INTERRUPTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:46
msgid "JOB_SUBMITTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:47
msgid "MONITOR_DATA"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:48
msgid "ODB_FILE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:49
msgid "ODB_FRAME"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:50
msgid "SIMULATION_ABORTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:51
msgid "SIMULATION_COMPLETED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:52
msgid "SIMULATION_INTERRUPTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:53
msgid "SIMULATION_SUBMITTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:54
msgid "STARTED"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:55
msgid "STATUS"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:56
msgid "STEP"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:57
msgid "WARNING"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:58
msgid "**data**: A DataObject object containing the message data. The following list describes the members of the DataObject object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:60
msgid "**clientHost**: A String specifying the host name of the machine that is running the analysis."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:61
msgid "**clientName**: A String specifying the name of the client that sent the message. Possible values are"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:63
msgid "\"BatchPre\" (the input file preprocessor)"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:64
msgid "\"Packager\" (the Abaqus/Explicit preprocessor packager)"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:65
msgid "\"Standard\" (the Abaqus/Standard analysis)"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:66
msgid "\"Explicit\" (the Abaqus/Explicit analysis)"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:67
msgid "\"Calculator\" (the postprocessing calculator)"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:69
msgid "**phase**: A SymbolicConstant specifying the phase of the analysis. Possible values are"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:71
msgid "BATCHPRE_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:72
msgid "PACKAGER_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:73
msgid "STANDARD_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:74
msgid "EXPLICIT_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:75
msgid "CALCULATOR_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:76
msgid "HEALER_PHASE"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:78
msgid "**processId**: An Int specifying the process ID of the analysis program."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:79
msgid "**threadId**: An Int specifying the thread ID of the analysis program. Threads are used for parallel or multiprocessing; in most cases *threadId* is set to zero."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:80
msgid "**timeStamp**: An Int specifying the time the message was sent in seconds since 00:00:00 UTC, January 1, 1970."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:81
msgid "**userData**: Any Python object or `None`. This object is passed as the **userData** argument to `addMessageCallback`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:83
msgid "The following script is an example of how you can use the messaging capability of the Abaqus Scripting Interface. The callback function will intercept all messages from Abaqus/Standard or Abaqus/Explicit and print the messages in the Abaqus/CAE command line interface. Use the following command to retrieve the example script:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:90
msgid "To execute the script, do the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:92
msgid "From the Abaqus/CAE command line interface type from simpleMonitor import printMessages"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:93
msgid "Submit an analysis job as usual."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:94
msgid "To start printing the messages, type `printMessages(ON)` from the Abaqus/CAE command line interface."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:95
msgid "To stop printing the messages, type `printMessages(OFF)` from the Abaqus/CAE command line interface."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:145
msgid "Waiting for a job to complete"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:147
msgid "You can use the Job object's `waitForCompletion` method to synchronize your script with a job that has been submitted. If you call the `waitForCompletion` method after you submit a job, the script waits until the analysis is complete before continuing. When the script continues, you should check the status of the job to ensure that the job completed successfully and did not abort. For example, the script described in Reproducing the cantilever beam tutorial uses `waitForCompletion` to ensure that the analysis job has finished executing successfully before the script opens the resulting output database and displays a contour plot of the results."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:149
msgid "In the following example, the script submits myJob1 and waits for it to complete before submitting myJob2."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:160
msgid "If you submit more than one job and then issue a `waitForCompletion` statement, Abaqus waits until the job associated with the `waitForCompletion` statement is complete before checking the status of the second job. If the second job has already completed, the `waitForCompletion` method returns immediately. In the following example the script will not check the status of `myJob2` until `myJob1` has completed."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:172
msgid "An example of a callback function"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:174
msgid "The following section describes how you can use a callback function as an alternative to the `waitForCompletion` method described in :doc:`/user/python/use-scripts/interact:waiting for a job to complete`. The example uses messaging commands to synchronize a script with an Abaqus/Standard or Abaqus/Explicit analysis. Messaging commands set up a callback function that monitors messages from Abaqus/Standard and Abaqus/Explicit. When the desired message is received, the callback function executes."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:176
msgid "he example uses a callback function that responds to all messages from Abaqus/Standard and Abaqus/Explicit. The function decides what action to take based on the messages received from a job called Deform. If the message indicates that the analysis job is complete, the function opens the output database created by the job and displays a default contour plot."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:199
msgid "The following statements show how the example script can be modified to use the callback function. After the first statement is executed, the callback function responds to all messages from the job named `Deform`. The final two statements create the job and submit it for analysis; the example script has now finished executing. When the job is complete, the callback function opens the resulting output database and displays a contour plot."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/interact.rst:213
msgid "You can use the `removeMessageCallback` method at the end of the callback function to remove it from the system. The arguments to the `removeMessageCallback` method must be identical to the arguments to the corresponding `addMessageCallback` command that set up the callback function."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:3
msgid "Copying, deleting, and renaming Abaqus Scripting Interface objects"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:5
msgid "The following section describes how you copy and delete Abaqus Scripting Interface objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:9
msgid "Creating a copy of an object"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:11
msgid "Most Abaqus objects have a method that creates a copy of the object. The same command provides the name of the new object. Methods that create a copy of an object are called copy constructors. Although copy constructors exist for most objects, in most cases they are not documented in the Abaqus Scripting Reference Guide. The format of a copy constructor is"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:17
msgid "A copy constructor returns an object of the type of objectToBeCopied with the given name. For example, the following statements show you can create a Part object and then use a copy constructor to create a second Part object that is a copy of the first:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:27
msgid "You can also use the copy constructor to create a new object in a different model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:38
msgid "More on copying objects"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:40
msgid "To create a copy of an object, some objects use the base type described in Abstract base type. For example, to copy a HomogeneousSolidSection object, you use the abstract base type Section constructor."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:61
msgid "Deleting objects"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:63
msgid "In general, if you can create an object, you can delete the object. For example, the following statements create a Material object in the material repository:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:69
msgid "You can use the Python del statement to delete an object, but you must provide the full path to the object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:75
msgid "The variable myMaterial that referred to the object still exists; however, the variable no longer refers to the object. You can use the del statement to delete the variable."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:81
msgid "Conversely, if you create the object as before but delete the variable that referred to the object, only the variable is deleted; the object still exists. You can assign a new variable to the object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:90
msgid "The previous explanation does not apply to the few Abaqus/CAE objects that are not members of either an Mdb object or a Session object; for example, XYData and Leaf objects. These objects are sometimes referred to as temporary, and the delete semantics for these objects are the same as for standard Python objects. The object exists as long as there is a reference to it. If you delete the reference, the object is also deleted."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:93
msgid "Renaming objects"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/modify-objects.rst:95
msgid "When you rename an object, variables that refer to that object may become stale, depending on the implementation detail of that object interface. It is always best to create new variables after you rename an object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:3
msgid "Namespace"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:5
msgid "Namespace is an important concept for the Abaqus Scripting Interface programmer. A namespace can be thought of as a program execution environment, and namespaces are independent of each other. Namespaces prevent conflict between variable names. You can use the same variable name to refer to different objects in different name spaces. :numref:`acl-all-schematic-nls-2` illustrates how commands interact with the Abaqus/CAE kernel."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:12
msgid "The Abaqus Scripting Interface and the Abaqus/CAE kernel."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:14
msgid "Abaqus Scripting Interface commands are issued to the Python interpreter from either the GUI, the command line interface, or a script. Abaqus/CAE executes these commands in one of two namespaces."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:16
msgid "**Script namespace**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:18
msgid "Abaqus Scripting Interface commands issued from scripts and from the command line interface are executed in the script namespace. Commands issued from **File -> Run Script** are also executed in the script namespace. For example, if you enter the following statement from the command line interface to create a viewport:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:25
msgid "the variable myViewport exists only in the script namespace. The name of the script namespace is main."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:27
msgid "**Journal namespace**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:29
msgid "Abaqus Scripting Interface commands issued by the GUI are executed in the journal namespace. For example, if you use the GUI to partition an edge, Abaqus/CAE writes the following statements to the replay file, abaqus.rpy:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:38
msgid "The variables defined in the replay file (p1, e, and edges, in the above example) exist only in the journal namespace. Abaqus/CAE issues an exception if you attempt to refer to one of these variables from the script namespace. For example, the following statement was issued from the command line interface and tries to partition the same edge:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:45
msgid "The name of the journal namespace is journaling."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:47
msgid "The statement `from abaqus import *` described in Executing scripts imports the mdb variable into the script namespace. You can then use the mdb variable in your scripts to access the objects in the object model. Although variables in one namespace are not visible to the other namespace, the object repositories are now available in both. As a result, an object created in one namespace can still be referred to in another namespace if you use its full path (`mdb.models['Model A']...`) and its repository key."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:49
msgid "For example, although the variable `p1` in the above statement cannot be accessed from the script namespace, you can still use the command line interface to access the part to which `p1` referred."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:55
msgid "The model and part repositories are available in both the journal and script namespaces. You can also create your own variable `p1` from the command line interface or from a script."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/namespace.rst:61
msgid "The variable `p1` in the script namespace is independent of the variable p1 in the journal namespace."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:3
msgid "The Abaqus object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:5
msgid "We have already discussed how Python provides built-in objects like integers, lists, dictionaries, and strings. When you are writing Abaqus Scripting Interface scripts, you need to access these built-in objects together with the objects used by Abaqus/CAE. These Abaqus Scripting Interface objects extend Python with new types of objects. The hierarchy and the relationship between these objects is called the Abaqus object model. The following sections describe the Abaqus object model in more detail."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:8
msgid "About the Abaqus object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:10
msgid "The object model is an important concept in object-oriented programming. The object model consists of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:12
msgid "A definition of each Abaqus Scripting Interface object including its methods and data members. The object definitions are found in the :doc:`references`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:14
msgid "Definitions of the relationships between the objects. These relationships form the structure or the hierarchy of the object model. The relationships between the objects are summarized in the following list:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:16
msgid "**Ownership**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:18
msgid "The ownership hierarchy defines the access path to the objects in the Abaqus model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:20
msgid "**Associations**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:22
msgid "Associations describe the relationships between the objects; for example, whether one object refers to another and whether an object is an instance of another."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:24
msgid "Abaqus extends Python with approximately 500 additional objects, and there are many relationships between these objects. As a result, the complete Abaqus object model is too complex to illustrate in a single figure."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:26
msgid "In general terms the Abaqus object model is divided into the Session, the Mdb, and the Odb objects, as shown in :numref:`cmd-int-model-overview-nls`"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:33
msgid "The Abaqus object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:35
msgid "An object in the object model can be one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:37
msgid "**Container**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:39
msgid "A Container is an object that contains objects of a similar type. A container in the Abaqus object model can be either a repository or a sequence. For example, the steps container is a repository that contains all the steps in the analysis. Your scripts use the steps container to access a step."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:41
msgid "**Singular object**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:43
msgid "Objects that are not containers are shown as a Singular object. A singular object contains no other objects of a similar type; for example, the Session object and the Mdb object. There is only one Session object and only one Mdb object in the Abaqus object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:45
msgid "The ... at the end of the object models shown in this section indicates that there are additional objects in the model that are not included in the figure. For clarity, the figures show only the most commonly used objects in the object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:47
msgid "The statement `from abaqus import *` imports the Session object (named `session`) and the Mdb object (named `mdb`) and makes them available to your scripts. The statement `from odbAccess import *` allows you to access Abaqus output results from your script. The Session, Mdb, and Odb objects are described as follows:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:49
msgid "**Session**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:51
msgid "Session objects are objects that are not saved between Abaqus/CAE sessions; for example, the objects that define viewports, remote queues, and user-defined views, as shown in :numref:`cmd-int-model-session-nls`"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:58
msgid "The Session object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:60
msgid "The viewports container is owned by the Session object, as shown in :numref:`cmd-int-model-session-nls`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:67
msgid "The Viewport object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:69
msgid "**Mdb**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:71
msgid "The statement from abaqus import * creates an instance of the Mdb object called mdb. Mdb objects are objects that are saved in a model database and can be recovered between Abaqus/CAE sessions. Mdb objects include the Model object and the Job object. The Model object, in turn, is comprised of Part objects, Section objects, Material objects, Step objects, etc. :numref:`cmd-int-model-model-nls` shows the basic structure of the objects under the Model object. For more information, see The Model object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:78
msgid "The structure of the objects under the Model object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:80
msgid "**Odb**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:82
msgid "Odb objects are saved in an output database and contain both model and results data, as shown in :numref:`cmd-int-model-odb-nls`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:89
msgid "The Odb object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:91
msgid "Most of the commands in the Abaqus Scripting Interface begin with either the Session, the Mdb, or the Odb object. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:100
msgid "Using tab completion to explore the object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:102
msgid "You can use tab completion from the command line interface to speed up your typing and to explore the object model. For example, you can type `mdb.models['Model-1'].parts[` in the command line interface. When you press the **[Tab]** key, the command line cycles through the parts in the model. When you press **[Shift][Tab]**, the command line cycles backwards through the parts in the model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:104
msgid "Tab completion also searches the file system when it detects an incomplete string. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:121
msgid "You can use tab completion when you are accessing an output database. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:128
msgid "You can also use tab completion when you are accessing an output database from the Abaqus Python prompt. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:139
msgid "The Model object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:141
msgid "The Model object contains many objects. :numref:`cmd-int-model-overview-nls-2` and :numref:`cmd-int-model-assembly-nls-2` show the most commonly used objects that are contained in the Part and RootAssembly."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:148
msgid "The Part object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:155
msgid "The RootAssembly object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:157
msgid "The Job object is separate from the Model object. The object model for the Job object is straightforward; the Job object owns no other objects. The Job object refers to a Model object but is not owned by the Model object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:160
msgid "Using the object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:162
msgid "Object model figures such as :numref:`cmd-int-abstract-nls` provide important information to the Abaqus Scripting Interface programmer."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:164
msgid "The object model describes the relationships between objects. For example, in object-oriented programming terms a geometry object, such as a Cell, Face, Edge, or Vertex object, is said to be owned by the Part object. The Part object, in turn, is owned by the Model object. This ownership relationship between objects is referred to as the ownership hierarchy of the object model."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:166
msgid "Ownership implies that if an object is copied, everything owned by that object is also copied. Similarly, if an object is deleted, everything owned by the object is deleted. This concept is similar to parent-child relationships in Abaqus/CAE. If you delete a Part, all the children of the part—such as geometry, datums, and regions—are also deleted."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:168
msgid "The relationships between objects are described in the `Path` and `Access` descriptions in the command reference. For example, the following statement uses the path to a Cell object:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:176
msgid "The associations between the objects are captured by the object model. Objects can refer to other objects; for example, the section objects refer to a material, and the interaction objects refer to a region, to steps, and possibly to amplitudes. An object that refers to another object usually has a data member that indicates the name of the object to which it is referring. For example, `material` is a member of the section objects, and createStepName is a member of the interaction objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:179
msgid "Abstract base type"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:181
msgid "The Abaqus object model includes the concept of an abstract base type. An abstract base type allows similar objects to share common attributes. For example, pressure and concentrated force are both kinds of loads. Object-oriented programmers call the relationship between pressure and load an is a relationship—a pressure is a kind of load. In this example Load is the name of the abstract base type. In the type hierachy Pressure and ConcentratedForce types have a base type Load. A Pressure is a Load."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:183
msgid "In :numref:`cmd-int-abstract-nls` AnalysisStep and Step are both abstract base types. In terms of the real world a static step is an analysis step and a static step is also a step. In terms of the object model a StaticStep object is an AnalysisStep object and a StaticStep object is also a Step object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:190
msgid "An example of the is a relationships between objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:192
msgid "In contrast the object model figures described at the beginning of this section show what object-oriented programmers call has a relationships between objects. For example, a session has a viewport repository, and a model has a root assembly."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:194
msgid "Abaqus uses the name of the abstract base type as the name of the repository that contains objects of similar types. For example, the StaticStep, BuckleStep, and FrequencyStep constructors all create objects in the steps repository. Other abstract base types include Amplitude, BoundaryCondition, Datum, Field, Interaction, and Section."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:196
msgid "The term abstract implies that the Abaqus object model does not contain an object that has the type of an abstract base type. For example, there are no objects of type Load or Step in the Abaqus object model. In contrast, the Feature object is a base type, but it is not abstract. The Abaqus object model includes Feature objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:199
msgid "Importing modules to extend the object model"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:201
msgid "To access the objects referred to by the Model object, such as Part and Section objects, Abaqus/CAE extends or augments the object model by importing additional modules. For example, to create or access a Part object, Abaqus/CAE needs to import the part module. Abaqus/CAE imports all the modules when you start a session. As a result the entire object model is available to your scripts."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:203
msgid "However, in some cases, your script may need to import a module; for example, to access a module constant, type, or function. In addition, it is useful for you to know which module Abaqus/CAE imported to augment the object model with a particular object. You have already seen the syntax to import a module:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:210
msgid "In general, you should use the following approach to importing Abaqus modules:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:216
msgid "The description of an object in the :doc:`references` includes an `Access` section that describes which module Abaqus/CAE imported to make the object available and how you can access the object from a command. After Abaqus/CAE imports a module, all the objects associated with the module become available to you. In addition, all the methods and members associated with each object are also available."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:218
msgid "The following table describes the relationship between some of the modules in the Abaqus Scripting Interface and the functionality of the modules and toolsets found in Abaqus/CAE:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:221
msgid "**Module**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:221
msgid "**Abaqus/CAE functionality**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:223
msgid "assembly"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:223
msgid "The Assembly module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:225
msgid "datum"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:225
msgid "The Datum toolset"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:227
msgid "interaction"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:227
msgid "The Interaction module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:229
msgid "job"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:229
msgid "The Job module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:231
msgid "load"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:231
msgid "The Load module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:233
msgid "material"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:233
msgid "Materials in the Property module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:235
msgid "mesh"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:235
msgid "The Mesh module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:237
msgid "part"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:237
msgid "The Part module"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:239
msgid "partition"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/object-model.rst:239
msgid "The Partition toolset"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:3
msgid "Abaqus/CAE sequences"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:5
msgid "Some methods take arguments that are described as a sequence of sequences of Floats or a sequence of sequences of Ints. Data that are entered into the table editor in Abaqus/CAE appear as a sequence of sequences in the equivalent Abaqus Scripting Interface command. In effect the data are a two-dimensional array. The data across one row form one sequence, and multiple rows form a sequence of those sequences."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:7
msgid "For example, consider the case where the user is creating an elastic material and describing a temperature-dependent behavior."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:14
msgid "The equivalent Abaqus Scripting Interface command is"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:25
msgid "The `table` argument is described in the :doc:`references` as a sequence of sequences of Floats."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:27
msgid "Lists, tuples, strings, and arrays are described in Sequences. In addition, the Abaqus Scripting Interface defines some of its own sequences that contain objects of the same type."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:29
msgid "**GeomSequence**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:31
msgid "A GeomSequence is a sequence of geometry objects, such as Vertices or Edges. An Edge sequence is derived from the GeomSequence object. Use the len() function to determine the number of objects in a GeomSequence. A GeomSequence has methods and members too."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:33
msgid "For example, the following creates a three-dimensional part by extruding a 70 × 70 square through a distance of 20. The members of the resulting Part object are listed along with some information about the sequence of Edge objects."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:46
msgid "The following statement displays the members of the resulting three-dimensional part:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:63
msgid "The edges, faces, vertices, cells, and ips members are all derived from the `GeomSequence` object."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:65
msgid "The following statements display some information about the edges sequence:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:84
msgid "**MeshSequence**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:86
msgid "A sequence of Nodes or Elements."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:88
msgid "**SurfSequence**"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/sequences.rst:90
msgid "A sequence of Surfaces."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:3
msgid "Specifying a region"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:5
msgid "Many of the commands used by the Abaqus Scripting Interface require a region argument. For example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:7
msgid "Load commands use the region argument to specify where the load is applied. You apply a concentrated force to vertices; you apply pressure to a face or an edge."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:9
msgid "Mesh commands, such as setting the element type and creating the mesh, use the region argument to specify where the operation should be applied."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:11
msgid "Set commands use the region argument to specify the region that comprises the set."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:13
msgid "A region can be either a predefined Set or Surface object or a temporary Region object. For more information, see Region commands."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:15
msgid "You should not rely on the integer id to identify a vertex, edge, face, or cell in a region command; for example, myFace=myModel.parts['Door'].faces[3]. The id can change if you add or delete features to your model; in addition, the id can change with a new release of Abaqus."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:17
msgid "Rather than using the integer `id`, you should use the `findAt` method to identify a vertex, edge, face, or cell. The arguments to `findAt` are an arbitrary point on an edge, face, or cell or the X-, Y-, and Z-coordinates of a vertex. `findAt` returns an object that contains the `id` of the vertex or the `id` of the edge, face, or cell that includes the arbitrary point."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:19
msgid "`findAt` initially uses the ACIS tolerance of 1E-6. As a result, `findAt` returns any entity that is at the arbitrary point specified or at a distance of less than 1E-6 from the arbitrary point. If nothing is found, `findAt` uses the tolerance for imprecise geometry (applicable only for imprecise geometric entities). If necessary, it can open the tolerance further to find a suitable object. The arbitrary point must not be shared by a second edge, face, or cell. If two entities intersect or coincide at the arbitrary point, `findAt` chooses the first entity that it encounters, and you should not rely on the return value being consistent."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:21
msgid "Alternatively, if you are working with an existing model that contains named regions, you can specify a region by referring to its name. For example, in the example described in Investigating the skew sensitivity of shell elements, you create a model using Abaqus/CAE. While you define the model, you must create a set that includes the vertex at the center of a planar part and you must name the set `CENTER`. You subsequently run a script that parameterizes the model and performs a series of analyses. The script uses the named region to retrieve the displacement and the bending moment at the center of the plate. The following statement refers to the set that you created and named using Abaqus/CAE:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:27
msgid "The following script illustrates how you can create a region. Regions are created from each of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:29
msgid "A sequence of tuples indicating the vertices, edges, faces, or cells in the region. The sequence can include multiple tuples of the same type."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:31
msgid "A sequence of tuples indicating a combination of the vertices, edges, faces, and cells in the region. The tuples can appear in any order in the sequence. In addition, you can include multiple tuples of the same type, and you can omit any type from the sequence."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-region.rst:33
msgid "A Surface object specifying an entity and the side of the entity."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:3
msgid "Specifying what is displayed in the viewport"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:5
msgid "While a script is running and moving between models, modules, parts, and assemblies, you can control the contents of specified viewports. The contents can be one of the following:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:7
msgid "A part"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:8
msgid "The assembly"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:9
msgid "A sketch"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:10
msgid "Data from an output database"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:11
msgid "An X–Y plot"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:12
msgid "Empty"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:14
msgid "n some cases you will want to update the contents of the viewport as the model changes; for example, to illustrate how the assembly was partitioned prior to meshing. However, frequent updates to a viewport will slow down your script, and you may want to leave the viewport empty until the script has completed. Alternatively, you can display an object that the script is not operating on; for example, you can display a part while the script operates on the assembly."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:16
msgid "You use the following command to change the contents of a specified viewport:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/specify-viewport.rst:22
msgid "The displayedObject argument can be a Part, Assembly, Sketch, Odb, or XYPlot object or `None`. If displayedObject=None, Abaqus/CAE displays an empty viewport. For more information, see `setValues(...)`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:3
msgid "Prompting the user for input"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:5
msgid "You may want to request input from a user while an Abaqus Scripting Interface script is executing. There are many reasons for requesting input; for example, to specify design parameters, to enable a macro to take action based on the input received, or to force parts of the script to be repeated. The Abaqus Scripting Interface provides three functions that request input from the user and return the data entered by the user:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:7
msgid "The `getInput` function requests a single input from the user from a text field in a dialog box."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:9
msgid "The `getInputs` function requests multiple inputs from the user from text fields in a dialog box."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:11
msgid "The `getWarningReply` function requests a reply to a warning message from the user from a warning dialog box."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:15
msgid "Note: You cannot use a script that contains getInput, getInputs or getWarningReply if you are running the script from the command line and passing the script name to the command line options -start,-replay or -noGUI."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:18
msgid "Requesting a single input from the user"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:20
msgid "The `getInput` function displays a dialog box in the center of the main window, and the user enters the requested value in the text field in the dialog box. The value is returned to the executing script as a String after the user presses the **[Enter]** key or clicks **[OK]**. Optionally, you can specify a default value to be displayed in the text field. The `getInput` function does not provide any error checking; it is the script author's responsibility to verify the user input. For more information, see :func:`~abaqus.UtilityAndView.User.getInput`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:22
msgid "The following examples illustrate the use of the `getInput` function. The first example shows a script that uses the `getInput` function to obtain a number from the user. The script then prints the square root of that number."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:31
msgid "The `float` function on the third line converts the string returned by `getInput` into a floating point number. The following figure shows the dialog box that appears when this script is executed:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:38
msgid "The next example shows how to modify a macro recorded by the **Macro Manager** in Abaqus/CAE to use the getInput function. The following text shows a macro named `createViewport` that was recorded by Abaqus/CAE while the user created a viewport. Macros are stored in the file `abaqusMacros.py` in your local or home directory."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:49
msgid "The following shows how you can modify the macro to accept input from the user. Default values for the viewport width and height have been added to the input request."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:62
msgid "The `eval` function in the third line of the macro converts the string returned by the `getInput` function into two integers. When you supply the default values shown in this example to the `getInput` function, the prompt and the text field in the dialog box that appears are shown in the following figure. If the user clicks **[OK]** or presses **[Enter]**, the default values are accepted and returned to the `getInput` function. If the user clicks **[Cancel]**, None is returned."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:70
msgid "Requesting multiple inputs from the user"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:72
msgid "The `getInputs` function displays a dialog box in the center of the main window, and the user enters the requested values in text fields in the dialog box. The values are returned to the executing script as a sequence of Strings after the user clicks the **[OK]** button or presses **[Enter]**. Optionally, you can specify default values to be displayed in the text fields. For more information, see :func:`~abaqus.UtilityAndView.User.getInputs`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:74
msgid "The following examples illustrate the use of the `getInputs` function to obtain a sequence of numbers from the user:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:85
msgid "The following figure shows the dialog box that these statements create:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:92
msgid "The `fields` argument to the `getInputs` method is a sequence of sequences of Strings. The inner sequence is a pair of Strings that specifies the description of the text field and the default value of the field. If the text field does not have a default value, you must specify an empty string; for example,"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:100
msgid "The `label` argument to the `getInputs` method is an optional label that appears across the top of the dialog box. The dialogTitle argument is an optional string that appears in the title bar of the dialog box."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:102
msgid "If the user clicks **[Cancel]**, the `getInputs` method returns a sequence of `None` objects. You can check the first value in the sequence to determine if the user clicked **[Cancel]**; for example:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:112
msgid "Requesting a warning reply from the user"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:114
msgid "The `getWarningReply` function displays a warning dialog box in the center of the main window, and the user clicks on one of the standard reply buttons in the dialog box. The clicked button value is returned to the executing script. For more information, see :func:`~abaqus.UtilityAndView.User.getWarningReply`."
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:116
msgid "The following example illustrates the use of the `getWarningReply` function:"
msgstr ""

#: ../../abqpy/docs/source/user/python/use-scripts/user-input.rst:128
msgid "The following figure shows the dialog box that appears when this script is executed:"
msgstr ""
