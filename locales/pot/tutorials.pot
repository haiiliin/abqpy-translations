# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-22 11:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../abqpy/docs/source/tutorials.rst:3
msgid "Tutorials"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:6
msgid "The abqpy is built in Python 3 but the Python interpreter of Abaqus is Python 2, so you must write codes that are compatible with Python 2 and Python 3."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:8
msgid "For more examples, check `abqpy/examples at main · haiiliin/abqpy <https://github.com/haiiliin/abqpy/tree/main/examples>`_."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:15
msgid "Usually in Abaqus, we have several things to do:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:12
msgid "Build the model"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:13
msgid "Submit and monitor the job"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:14
msgid "Get the output data and visualize it"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:18
msgid "Build an Abaqus model"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:20
msgid "The most convenient way to build an Abaqus model is to do it in Abaqus CAE. When we use the Abaqus/CAE graphical user interface (GUI) to create a model and to visualize the results, commands are issued internally by Abaqus/CAE after every operation. These commands reflect the geometry you created along with the options and settings you selected from each dialog box."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:25
msgid "Therefore, we can build our Abaqus model using Python script. We can totally use the Python script to build our Abaqus model, although it is not an efficient way. Usually, we do something in Abaqus/CAE, and check the Python script in the reply file (`.rpy`). And then copy it to our script file, this works, but not nicely."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:30
msgid "However, if type hints are provided in Python scripting of Abaqus, things will getting much easier, and that is what `abqpy` does."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:34
msgid "The example model described in the following is simple, there is a square structure, the vertical displacement of the bottom face is fixed, and there is a vertical pressure in the top surface, the Abaqus model is showed as follows:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:43
msgid "Header of the script"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:45
msgid "Usually, when we use Python script to build the model, we need to import the following modules:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:53
msgid "Module `abaqus` contains two most important variable `mdb` and `session` which control the model. Module `abaqusConstants` contains constant strings used in modelling, i.e., when we defines a part using the following code:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:59
msgid "`THREE_D` indicates the part is a 3D part, `DEFORMABLE_BODY` indicates the part is deformable."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:61
msgid "Module `driverUtils` contains an important function `executeOnCaeStartup`, this function will be execute each time we open the Abaqus, so we need to call this function in our Python script. Now, the header of our Python script would be like:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:73
msgid "Create parts"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:75
msgid "First we need to create a sketch that will be used to create the part, we need to use :py:meth:`~abaqus.Sketcher.SketchModel.SketchModel.ConstrainedSketch` to create a sketch:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:83
msgid "In this code, we draw a sketch with a square. Now we can create a part using this sketch:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:90
msgid "The first line creates a 3D and deformable part. Then we use the :py:meth:`~abaqus.Part.Feature.Feature.BaseSolidExtrude` method to create a part using the sketch."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:94
msgid "Create some sets for boundary conditions and loads"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:96
msgid "Unlike building a model in Abaqus/CAE, we can just click the nodes/faces to create sets, when we use a Python script to build the model, we can use coordinates to find nodes/faces we need."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:98
msgid "We can use :py:meth:`~abaqus.Region.RegionPart.RegionPart.Set` and :py:meth:`~abaqus.Region.RegionPart.RegionPart.Surface` to create sets and surfaces:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:109
msgid "Merge parts to assembly"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:111
msgid "We can use :py:meth:`~abaqus.Assembly.AssemblyBase.AssemblyBase.Instance` to create instances："
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:119
msgid "Create materials and sections, and assign materials to sections"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:121
msgid "First we create a Material object using :py:meth:`~abaqus.Material.MaterialModel.MaterialModel.Material`:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:127
msgid "Then we assign some properties to the Material object, i.e., :py:meth:`~abaqus.Material.Material.Material.Elastic` and :py:meth:`~abaqus.Material.Material.Material.Density`:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:134
msgid "Then we create a :py:meth:`~abaqus.Section.SectionModel.SectionModel.HomogeneousSolidSection` and assign the material to the section (:py:meth:`~abaqus.Property.PropertyPart.PropertyPart.SectionAssignment`):"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:143
msgid "Create steps"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:145
msgid "It is easy to create a :py:meth:`~abaqus.Step.StepModel.StepModel.StaticStep`:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:155
msgid "Specify output requests"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:157
msgid "We can use the :py:meth:`~abaqus.StepOutput.OutputModel.OutputModel.FieldOutputRequest` and :py:meth:`~abaqus.StepOutput.OutputModel.OutputModel.HistoryOutputRequest` to specify field output and history output information."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:166
msgid "Create boundary conditions"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:168
msgid "We can use :py:meth:`~abaqus.BoundaryCondition.BoundaryConditionModel.BoundaryConditionModel.DisplacementBC` to create a displacement boundary condition:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:176
msgid "It should be noted that region of the boundary condition should be a region of the instances instead of parts, since sets created in parts are copied to the instance, we can use the sets in the parts that we defined before."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:179
msgid "Create loads"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:181
msgid "We can use :py:meth:`~abaqus.Load.LoadModel.LoadModel.Pressure` ro create a pressure:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:191
msgid "Mesh"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:193
msgid "To mesh the model, we have to set the :py:class:`~abaqus.Mesh.ElemType.ElemType`, which is defined in the `mesh` module, so we need to import `mesh` module:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:208
msgid "Create jobs"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:210
msgid "We can use :py:meth:`~abaqus.Job.JobMdb.JobMdb.Job` to create a job:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:216
msgid "Then we can write the model to an input file (`.inp`):"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:222
msgid "Then we can submit the job:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:231
msgid "Save the Abaqus model to a `.cae` file"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:233
msgid "We can use :py:class:`~abaqus.Mdb.MdbBase.MdbBase.saveAs` to save the Abaqus model to a `.cae` file:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:239
msgid "It should be noted that we have to use this function to save the model when we use `abqpy` to build an Abaqus model. It is because that when we execute all the above codes, the Python script has not been sent to Abaqus kernel. All the functions mentioned above are included in `abqpy`, however, nothing has been done inside this functions, they are just provided for type hints. Therefore, if we want to send the Python script to the Abaqus kernel, we have to use the Abaqus command like this:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:245
msgid "In order to make it simple, this has been done in the :py:meth:`~abaqus.Mdb.MdbBase.MdbBase.saveAs` function:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:257
msgid "The whole script"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:259
msgid "The whole script of this example is showed as follows:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:261
msgid "compression.py"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:340
msgid "Extract output data"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:342
msgid "If we want to extract the output data, we have to write an output script."
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:345
msgid "Header of the output script"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:347
msgid "Similarly, we have to import some modules:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:359
msgid "Open the output database"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:361
msgid "We can use :py:meth:`~abaqus.Session.SessionBase.SessionBase.openOdb` to open the output database:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:369
msgid "Extract the data"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:371
msgid "We can use the :py:meth:`~abaqus.XY.XYSession.XYSession.xyDataListFromField` to extract the output data:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:379
msgid "`dataList` is a list of `XYData` objects. `XYData` is a data type defined in Abaqus, the data is stored in tuples of tuples, so we can simply save it to a file, i.e., using the `numpy` (`numpy` is installed in Python interpreter of Abaqus already):"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:390
msgid "Results of above example"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:392
msgid "The distribution of `U3` of above model is showed as follows:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:400
msgid "The distribution of the vertical displacement of a point in the top surface is showed as follows:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:409
msgid "The whole output script"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:411
msgid "The whole output script of this example is showed as follows:"
msgstr ""

#: ../../abqpy/docs/source/tutorials.rst:413
msgid "compression-output.py"
msgstr ""
